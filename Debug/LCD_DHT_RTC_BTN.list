
LCD_DHT_RTC_BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006c94  08006c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d24  08006d24  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d2c  08006d2c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001694  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001708  20001708  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023af1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f09  00000000  00000000  00043b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  00047aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001aa0  00000000  00000000  00049690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004633  00000000  00000000  0004b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f31f  00000000  00000000  0004f763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f079a  00000000  00000000  0006ea82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015f21c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bc4  00000000  00000000  0015f26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c7c 	.word	0x08006c7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08006c7c 	.word	0x08006c7c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <I2C_LCD_Init>:
#include "main.h"



void I2C_LCD_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_Delay(40); // 1. 켜지고 40ms이상 대기
 80004f8:	2028      	movs	r0, #40	; 0x28
 80004fa:	f000 fde5 	bl	80010c8 <HAL_Delay>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 80004fe:	2030      	movs	r0, #48	; 0x30
 8000500:	f000 f832 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	HAL_Delay(5);	// 2. 4.1ms 이상 대기
 8000504:	2005      	movs	r0, #5
 8000506:	f000 fddf 	bl	80010c8 <HAL_Delay>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 800050a:	2030      	movs	r0, #48	; 0x30
 800050c:	f000 f82c 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	delay_us(150); // 3. 100us 대기
 8000510:	2096      	movs	r0, #150	; 0x96
 8000512:	f000 fa91 	bl	8000a38 <delay_us>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 8000516:	2030      	movs	r0, #48	; 0x30
 8000518:	f000 f826 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x20);
 800051c:	2020      	movs	r0, #32
 800051e:	f000 f823 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x20);
 8000522:	2020      	movs	r0, #32
 8000524:	f000 f820 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x80);
 8000528:	2080      	movs	r0, #128	; 0x80
 800052a:	f000 f81d 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x00);
 800052e:	2000      	movs	r0, #0
 8000530:	f000 f81a 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0xE0);
 8000534:	20e0      	movs	r0, #224	; 0xe0
 8000536:	f000 f817 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	lcd_display_clear();
 800053a:	f000 f808 	bl	800054e <lcd_display_clear>
	I2C_LCD_4bit_cmd_WRITE(0x00);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f812 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x60);
 8000544:	2060      	movs	r0, #96	; 0x60
 8000546:	f000 f80f 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>

}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}

0800054e <lcd_display_clear>:

void lcd_display_clear(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0
	//디스플레이 클리어 커맨드 전송
	I2C_LCD_4bit_cmd_WRITE(0x00);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f808 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x10);
 8000558:	2010      	movs	r0, #16
 800055a:	f000 f805 	bl	8000568 <I2C_LCD_4bit_cmd_WRITE>
	//2ms의 딜레이 줘야 함
	HAL_Delay(2);
 800055e:	2002      	movs	r0, #2
 8000560:	f000 fdb2 	bl	80010c8 <HAL_Delay>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <I2C_LCD_4bit_cmd_WRITE>:
	I2C_LCD_4bit_data_WRITE(((char)cmd << 4) & 0xF0); // 하위 4비트
	HAL_Delay(2);
}

void I2C_LCD_4bit_cmd_WRITE(uint8_t cmd)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_s;
	uint8_t cmd_L[2];

	cmd_s = cmd & 0xF0; // 상위 4비트
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	73fb      	strb	r3, [r7, #15]

	cmd_L[0] = cmd_s | 0x0C; //En = 1
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	f043 030c 	orr.w	r3, r3, #12
 8000580:	b2db      	uxtb	r3, r3
 8000582:	733b      	strb	r3, [r7, #12]
	cmd_L[1] = cmd_s | 0x08; //En = 0
 8000584:	7bfb      	ldrb	r3, [r7, #15]
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	b2db      	uxtb	r3, r3
 800058c:	737b      	strb	r3, [r7, #13]
	//데이터 전송 시 중간에 En 핀을 High->Low로 설정하여 데이터 전송활성화

	if(HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, cmd_L, sizeof(cmd_L), HAL_MAX_DELAY) != HAL_OK)
 800058e:	f107 020c 	add.w	r2, r7, #12
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2302      	movs	r3, #2
 800059a:	214e      	movs	r1, #78	; 0x4e
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <I2C_LCD_4bit_cmd_WRITE+0x4c>)
 800059e:	f001 fccb 	bl	8001f38 <HAL_I2C_Master_Transmit>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <I2C_LCD_4bit_cmd_WRITE+0x44>
	{
		Error_Handler();
 80005a8:	f000 fa70 	bl	8000a8c <Error_Handler>
	}
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200002b8 	.word	0x200002b8

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fd42 	bl	8001044 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f818 	bl	80005f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f98a 	bl	80008dc <MX_GPIO_Init>
  MX_ETH_Init();
 80005c8:	f000 f87e 	bl	80006c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005cc:	f000 f92e 	bl	800082c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005d0:	f000 f956 	bl	8000880 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 80005d4:	f000 f906 	bl	80007e4 <MX_TIM10_Init>
  MX_I2C1_Init();
 80005d8:	f000 f8c4 	bl	8000764 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10); // us 딜레이용 타이머 시작
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <main+0x38>)
 80005de:	f002 fe65 	bl	80032ac <HAL_TIM_Base_Start>
  I2C_LCD_Init();	// lcd 초기화 코드
 80005e2:	f7ff ff87 	bl	80004f4 <I2C_LCD_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005e6:	f003 ff25 	bl	8004434 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ea:	f003 ff47 	bl	800447c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x36>
 80005f0:	2000030c 	.word	0x2000030c

080005f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	2230      	movs	r2, #48	; 0x30
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 fa70 	bl	8006ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000620:	4a27      	ldr	r2, [pc, #156]	; (80006c0 <SystemClock_Config+0xcc>)
 8000622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000626:	6413      	str	r3, [r2, #64]	; 0x40
 8000628:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000634:	2300      	movs	r3, #0
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <SystemClock_Config+0xd0>)
 800063e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000654:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000668:	23a8      	movs	r3, #168	; 0xa8
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000670:	2307      	movs	r3, #7
 8000672:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f002 f8fd 	bl	8002878 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000684:	f000 fa02 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000694:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000698:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2105      	movs	r1, #5
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fb5e 	bl	8002d68 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b2:	f000 f9eb 	bl	8000a8c <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_ETH_Init+0x84>)
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <MX_ETH_Init+0x88>)
 80006d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_ETH_Init+0x8c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_ETH_Init+0x8c>)
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_ETH_Init+0x8c>)
 80006e0:	22e1      	movs	r2, #225	; 0xe1
 80006e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_ETH_Init+0x8c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_ETH_Init+0x8c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_ETH_Init+0x8c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_ETH_Init+0x84>)
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <MX_ETH_Init+0x8c>)
 80006fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_ETH_Init+0x84>)
 80006fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000702:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_ETH_Init+0x84>)
 8000706:	4a14      	ldr	r2, [pc, #80]	; (8000758 <MX_ETH_Init+0x90>)
 8000708:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_ETH_Init+0x84>)
 800070c:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_ETH_Init+0x94>)
 800070e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_ETH_Init+0x84>)
 8000712:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000716:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_ETH_Init+0x84>)
 800071a:	f000 fddb 	bl	80012d4 <HAL_ETH_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000724:	f000 f9b2 	bl	8000a8c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000728:	2238      	movs	r2, #56	; 0x38
 800072a:	2100      	movs	r1, #0
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_ETH_Init+0x98>)
 800072e:	f006 f9db 	bl	8006ae8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_ETH_Init+0x98>)
 8000734:	2221      	movs	r2, #33	; 0x21
 8000736:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_ETH_Init+0x98>)
 800073a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800073e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_ETH_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000208 	.word	0x20000208
 8000750:	40028000 	.word	0x40028000
 8000754:	200008a4 	.word	0x200008a4
 8000758:	20000168 	.word	0x20000168
 800075c:	200000c8 	.word	0x200000c8
 8000760:	20000090 	.word	0x20000090

08000764 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C1_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_I2C1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007a2:	f001 fa85 	bl	8001cb0 <HAL_I2C_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 f96e 	bl	8000a8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007b4:	f001 fec7 	bl	8002546 <HAL_I2CEx_ConfigAnalogFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007be:	f000 f965 	bl	8000a8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_I2C1_Init+0x74>)
 80007c6:	f001 fefa 	bl	80025be <HAL_I2CEx_ConfigDigitalFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 f95c 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200002b8 	.word	0x200002b8
 80007dc:	40005400 	.word	0x40005400
 80007e0:	000186a0 	.word	0x000186a0

080007e4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM10_Init+0x40>)
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_TIM10_Init+0x44>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <MX_TIM10_Init+0x40>)
 80007f0:	22a7      	movs	r2, #167	; 0xa7
 80007f2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_TIM10_Init+0x40>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xffff-1;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_TIM10_Init+0x40>)
 80007fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000800:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_TIM10_Init+0x40>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_TIM10_Init+0x40>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_TIM10_Init+0x40>)
 8000810:	f002 fcfc 	bl	800320c <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800081a:	f000 f937 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000030c 	.word	0x2000030c
 8000828:	40014400 	.word	0x40014400

0800082c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART3_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART3_UART_Init+0x4c>)
 8000864:	f002 ffde 	bl	8003824 <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f90d 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000354 	.word	0x20000354
 800087c:	40004800 	.word	0x40004800

08000880 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800088a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	2204      	movs	r2, #4
 8000890:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000894:	2202      	movs	r2, #2
 8000896:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c4:	f001 feba 	bl	800263c <HAL_PCD_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ce:	f000 f8dd 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000398 	.word	0x20000398

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a4b      	ldr	r2, [pc, #300]	; (8000a28 <MX_GPIO_Init+0x14c>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b45      	ldr	r3, [pc, #276]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a44      	ldr	r2, [pc, #272]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a3d      	ldr	r2, [pc, #244]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b3b      	ldr	r3, [pc, #236]	; (8000a28 <MX_GPIO_Init+0x14c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <MX_GPIO_Init+0x14c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a36      	ldr	r2, [pc, #216]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a2f      	ldr	r2, [pc, #188]	; (8000a28 <MX_GPIO_Init+0x14c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a28      	ldr	r2, [pc, #160]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_GPIO_Init+0x14c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a0:	4822      	ldr	r0, [pc, #136]	; (8000a2c <MX_GPIO_Init+0x150>)
 80009a2:	f001 f96b 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	4821      	ldr	r0, [pc, #132]	; (8000a30 <MX_GPIO_Init+0x154>)
 80009ac:	f001 f966 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481b      	ldr	r0, [pc, #108]	; (8000a34 <MX_GPIO_Init+0x158>)
 80009c8:	f000 ffac 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4811      	ldr	r0, [pc, #68]	; (8000a2c <MX_GPIO_Init+0x150>)
 80009e6:	f000 ff9d 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ea:	2340      	movs	r3, #64	; 0x40
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <MX_GPIO_Init+0x154>)
 8000a02:	f000 ff8f 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_GPIO_Init+0x154>)
 8000a1a:	f000 ff83 	bl	8001924 <HAL_GPIO_Init>

}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40021800 	.word	0x40021800
 8000a34:	40020800 	.word	0x40020800

08000a38 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t number)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	//카운?�� 0?���?? ?��?��
	__HAL_TIM_SET_COUNTER(&htim10,0);
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <delay_us+0x2c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24

	//�??�?? 카운?���?? ?��?��?�� us보다 ?��?���?? 무한루프
	while(__HAL_TIM_GET_COUNTER(&htim10) < number);
 8000a48:	bf00      	nop
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <delay_us+0x2c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d8f9      	bhi.n	8000a4a <delay_us+0x12>
}
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	2000030c 	.word	0x2000030c

08000a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a7a:	f000 fb05 	bl	8001088 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40001000 	.word	0x40001000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <Error_Handler+0x8>
	...

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_MspInit+0x54>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_MspInit+0x54>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	; 0x44
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_MspInit+0x54>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_MspInit+0x54>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_MspInit+0x54>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_MspInit+0x54>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210f      	movs	r1, #15
 8000ada:	f06f 0001 	mvn.w	r0, #1
 8000ade:	f000 fbcf 	bl	8001280 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08e      	sub	sp, #56	; 0x38
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a55      	ldr	r2, [pc, #340]	; (8000c64 <HAL_ETH_MspInit+0x174>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	f040 80a4 	bne.w	8000c5c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	623b      	str	r3, [r7, #32]
 8000b18:	4b53      	ldr	r3, [pc, #332]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	4a52      	ldr	r2, [pc, #328]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b22:	6313      	str	r3, [r2, #48]	; 0x30
 8000b24:	4b50      	ldr	r3, [pc, #320]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b2c:	623b      	str	r3, [r7, #32]
 8000b2e:	6a3b      	ldr	r3, [r7, #32]
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	4b4c      	ldr	r3, [pc, #304]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a4b      	ldr	r2, [pc, #300]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a44      	ldr	r2, [pc, #272]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b42      	ldr	r3, [pc, #264]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a3d      	ldr	r2, [pc, #244]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a36      	ldr	r2, [pc, #216]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0302 	and.w	r3, r3, #2
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a28      	ldr	r2, [pc, #160]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd8:	2332      	movs	r3, #50	; 0x32
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be8:	230b      	movs	r3, #11
 8000bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <HAL_ETH_MspInit+0x17c>)
 8000bf4:	f000 fe96 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf8:	2386      	movs	r3, #134	; 0x86
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c08:	230b      	movs	r3, #11
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	4619      	mov	r1, r3
 8000c12:	4817      	ldr	r0, [pc, #92]	; (8000c70 <HAL_ETH_MspInit+0x180>)
 8000c14:	f000 fe86 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <HAL_ETH_MspInit+0x184>)
 8000c36:	f000 fe75 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4c:	230b      	movs	r3, #11
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c54:	4619      	mov	r1, r3
 8000c56:	4808      	ldr	r0, [pc, #32]	; (8000c78 <HAL_ETH_MspInit+0x188>)
 8000c58:	f000 fe64 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	; 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40028000 	.word	0x40028000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020800 	.word	0x40020800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400
 8000c78:	40021800 	.word	0x40021800

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_I2C_MspInit+0x84>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12c      	bne.n	8000cf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_I2C_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_I2C_MspInit+0x88>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_I2C_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000cba:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc0:	2312      	movs	r3, #18
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <HAL_I2C_MspInit+0x8c>)
 8000cd8:	f000 fe24 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <HAL_I2C_MspInit+0x88>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_I2C_MspInit+0x88>)
 8000ce6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cea:	6413      	str	r3, [r2, #64]	; 0x40
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_I2C_MspInit+0x88>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	; 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40005400 	.word	0x40005400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020400 	.word	0x40020400

08000d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_TIM_Base_MspInit+0x3c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10d      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_TIM_Base_MspInit+0x40>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40014400 	.word	0x40014400
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <HAL_UART_MspInit+0x84>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12c      	bne.n	8000dcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_UART_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dbc:	2307      	movs	r3, #7
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_UART_MspInit+0x8c>)
 8000dc8:	f000 fdac 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40004800 	.word	0x40004800
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020c00 	.word	0x40020c00

08000de0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e00:	d13f      	bne.n	8000e82 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e1e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e30:	230a      	movs	r3, #10
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4815      	ldr	r0, [pc, #84]	; (8000e90 <HAL_PCD_MspInit+0xb0>)
 8000e3c:	f000 fd72 	bl	8001924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480e      	ldr	r0, [pc, #56]	; (8000e90 <HAL_PCD_MspInit+0xb0>)
 8000e56:	f000 fd65 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	6353      	str	r3, [r2, #52]	; 0x34
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <HAL_PCD_MspInit+0xac>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000

08000e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08e      	sub	sp, #56	; 0x38
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <HAL_InitTick+0xe4>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a32      	ldr	r2, [pc, #200]	; (8000f78 <HAL_InitTick+0xe4>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <HAL_InitTick+0xe4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ec0:	f107 0210 	add.w	r2, r7, #16
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 f96c 	bl	80031a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ed0:	6a3b      	ldr	r3, [r7, #32]
 8000ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d103      	bne.n	8000ee2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000eda:	f002 f93d 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8000ede:	6378      	str	r0, [r7, #52]	; 0x34
 8000ee0:	e004      	b.n	8000eec <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ee2:	f002 f939 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	4a23      	ldr	r2, [pc, #140]	; (8000f7c <HAL_InitTick+0xe8>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	0c9b      	lsrs	r3, r3, #18
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_InitTick+0xec>)
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <HAL_InitTick+0xf0>)
 8000efe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <HAL_InitTick+0xec>)
 8000f02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f06:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_InitTick+0xec>)
 8000f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f0c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <HAL_InitTick+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_InitTick+0xec>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_InitTick+0xec>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f20:	4817      	ldr	r0, [pc, #92]	; (8000f80 <HAL_InitTick+0xec>)
 8000f22:	f002 f973 	bl	800320c <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d11b      	bne.n	8000f6c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f34:	4812      	ldr	r0, [pc, #72]	; (8000f80 <HAL_InitTick+0xec>)
 8000f36:	f002 fa21 	bl	800337c <HAL_TIM_Base_Start_IT>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d111      	bne.n	8000f6c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f48:	2036      	movs	r0, #54	; 0x36
 8000f4a:	f000 f9b5 	bl	80012b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d808      	bhi.n	8000f66 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2036      	movs	r0, #54	; 0x36
 8000f5a:	f000 f991 	bl	8001280 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0xf4>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	e002      	b.n	8000f6c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3738      	adds	r7, #56	; 0x38
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	431bde83 	.word	0x431bde83
 8000f80:	200008ac 	.word	0x200008ac
 8000f84:	40001000 	.word	0x40001000
 8000f88:	20000004 	.word	0x20000004

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM6_DAC_IRQHandler+0x10>)
 8000fbe:	f002 fa4d 	bl	800345c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200008ac 	.word	0x200008ac

08000fcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001028 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ff6:	490e      	ldr	r1, [pc, #56]	; (8001030 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800100c:	4c0b      	ldr	r4, [pc, #44]	; (800103c <LoopFillZerobss+0x26>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800101a:	f7ff ffd7 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800101e:	f005 fd2f 	bl	8006a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001022:	f7ff fac9 	bl	80005b8 <main>
  bx  lr    
 8001026:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001028:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800102c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001030:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001034:	08006d34 	.word	0x08006d34
  ldr r2, =_sbss
 8001038:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800103c:	20001708 	.word	0x20001708

08001040 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001040:	e7fe      	b.n	8001040 <ADC_IRQHandler>
	...

08001044 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_Init+0x40>)
 800104e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001052:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <HAL_Init+0x40>)
 800105a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a07      	ldr	r2, [pc, #28]	; (8001084 <HAL_Init+0x40>)
 8001066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800106c:	2003      	movs	r0, #3
 800106e:	f000 f8fc 	bl	800126a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001072:	200f      	movs	r0, #15
 8001074:	f7ff ff0e 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001078:	f7ff fd0e 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023c00 	.word	0x40023c00

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	200008f4 	.word	0x200008f4

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200008f4 	.word	0x200008f4

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4907      	ldr	r1, [pc, #28]	; (80011ac <__NVIC_EnableIRQ+0x38>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff4c 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001292:	f7ff ff61 	bl	8001158 <__NVIC_GetPriorityGrouping>
 8001296:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	68b9      	ldr	r1, [r7, #8]
 800129c:	6978      	ldr	r0, [r7, #20]
 800129e:	f7ff ffb1 	bl	8001204 <NVIC_EncodePriority>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff80 	bl	80011b0 <__NVIC_SetPriority>
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff54 	bl	8001174 <__NVIC_EnableIRQ>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e06c      	b.n	80013c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d106      	bne.n	80012fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2223      	movs	r2, #35	; 0x23
 80012f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fbf9 	bl	8000af0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b31      	ldr	r3, [pc, #196]	; (80013c8 <HAL_ETH_Init+0xf4>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	4a30      	ldr	r2, [pc, #192]	; (80013c8 <HAL_ETH_Init+0xf4>)
 8001308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130c:	6453      	str	r3, [r2, #68]	; 0x44
 800130e:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <HAL_ETH_Init+0xf4>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800131a:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_ETH_Init+0xf8>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <HAL_ETH_Init+0xf8>)
 8001320:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001324:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_ETH_Init+0xf8>)
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	4927      	ldr	r1, [pc, #156]	; (80013cc <HAL_ETH_Init+0xf8>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001334:	4b25      	ldr	r3, [pc, #148]	; (80013cc <HAL_ETH_Init+0xf8>)
 8001336:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6812      	ldr	r2, [r2, #0]
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800134e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001350:	f7ff feae 	bl	80010b0 <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001356:	e011      	b.n	800137c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001358:	f7ff feaa 	bl	80010b0 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001366:	d909      	bls.n	800137c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2204      	movs	r2, #4
 800136c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	22e0      	movs	r2, #224	; 0xe0
 8001374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e021      	b.n	80013c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1e4      	bne.n	8001358 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f958 	bl	8001644 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f9ff 	bl	8001798 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fa55 	bl	800184a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	461a      	mov	r2, r3
 80013a6:	2100      	movs	r1, #0
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f9bd 	bl	8001728 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2210      	movs	r2, #16
 80013ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40013800 	.word	0x40013800

080013d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	4b51      	ldr	r3, [pc, #324]	; (800152c <ETH_SetMACConfig+0x15c>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	7c1b      	ldrb	r3, [r3, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <ETH_SetMACConfig+0x28>
 80013f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013f6:	e000      	b.n	80013fa <ETH_SetMACConfig+0x2a>
 80013f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	7c5b      	ldrb	r3, [r3, #17]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <ETH_SetMACConfig+0x38>
 8001402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001406:	e000      	b.n	800140a <ETH_SetMACConfig+0x3a>
 8001408:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800140a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	7fdb      	ldrb	r3, [r3, #31]
 8001416:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001418:	431a      	orrs	r2, r3
                        macconf->Speed |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800141e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	7f92      	ldrb	r2, [r2, #30]
 8001424:	2a00      	cmp	r2, #0
 8001426:	d102      	bne.n	800142e <ETH_SetMACConfig+0x5e>
 8001428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142c:	e000      	b.n	8001430 <ETH_SetMACConfig+0x60>
 800142e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001430:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	7f1b      	ldrb	r3, [r3, #28]
 8001436:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001438:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800143e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	791b      	ldrb	r3, [r3, #4]
 8001444:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001446:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800144e:	2a00      	cmp	r2, #0
 8001450:	d102      	bne.n	8001458 <ETH_SetMACConfig+0x88>
 8001452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001456:	e000      	b.n	800145a <ETH_SetMACConfig+0x8a>
 8001458:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800145a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	7bdb      	ldrb	r3, [r3, #15]
 8001460:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001462:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001470:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001472:	4313      	orrs	r3, r2
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fe1c 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80014a6:	4013      	ands	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80014b6:	2a00      	cmp	r2, #0
 80014b8:	d101      	bne.n	80014be <ETH_SetMACConfig+0xee>
 80014ba:	2280      	movs	r2, #128	; 0x80
 80014bc:	e000      	b.n	80014c0 <ETH_SetMACConfig+0xf0>
 80014be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80014ce:	2a01      	cmp	r2, #1
 80014d0:	d101      	bne.n	80014d6 <ETH_SetMACConfig+0x106>
 80014d2:	2208      	movs	r2, #8
 80014d4:	e000      	b.n	80014d8 <ETH_SetMACConfig+0x108>
 80014d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80014e0:	2a01      	cmp	r2, #1
 80014e2:	d101      	bne.n	80014e8 <ETH_SetMACConfig+0x118>
 80014e4:	2204      	movs	r2, #4
 80014e6:	e000      	b.n	80014ea <ETH_SetMACConfig+0x11a>
 80014e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80014f2:	2a01      	cmp	r2, #1
 80014f4:	d101      	bne.n	80014fa <ETH_SetMACConfig+0x12a>
 80014f6:	2202      	movs	r2, #2
 80014f8:	e000      	b.n	80014fc <ETH_SetMACConfig+0x12c>
 80014fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014fc:	4313      	orrs	r3, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001514:	2001      	movs	r0, #1
 8001516:	f7ff fdd7 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	619a      	str	r2, [r3, #24]
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	ff20810f 	.word	0xff20810f

08001530 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <ETH_SetDMAConfig+0x110>)
 800154a:	4013      	ands	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	7b1b      	ldrb	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d102      	bne.n	800155c <ETH_SetDMAConfig+0x2c>
 8001556:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800155a:	e000      	b.n	800155e <ETH_SetDMAConfig+0x2e>
 800155c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	7b5b      	ldrb	r3, [r3, #13]
 8001562:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001564:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	7f52      	ldrb	r2, [r2, #29]
 800156a:	2a00      	cmp	r2, #0
 800156c:	d102      	bne.n	8001574 <ETH_SetDMAConfig+0x44>
 800156e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001572:	e000      	b.n	8001576 <ETH_SetDMAConfig+0x46>
 8001574:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001576:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	7b9b      	ldrb	r3, [r3, #14]
 800157c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800157e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001584:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	7f1b      	ldrb	r3, [r3, #28]
 800158a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800158c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	7f9b      	ldrb	r3, [r3, #30]
 8001592:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001594:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800159a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015a4:	4313      	orrs	r3, r2
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff fd7e 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	791b      	ldrb	r3, [r3, #4]
 80015de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001602:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001608:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001616:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff fd4f 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	f8de3f23 	.word	0xf8de3f23

08001644 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0a6      	sub	sp, #152	; 0x98
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800164c:	2301      	movs	r3, #1
 800164e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001652:	2301      	movs	r3, #1
 8001654:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800166e:	2301      	movs	r3, #1
 8001670:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001680:	2300      	movs	r3, #0
 8001682:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800168a:	2300      	movs	r3, #0
 800168c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80016a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80016ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016bc:	4619      	mov	r1, r3
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fe86 	bl	80013d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016c8:	2301      	movs	r3, #1
 80016ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016f0:	2301      	movs	r3, #1
 80016f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001704:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800170c:	2300      	movs	r3, #0
 800170e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff08 	bl	8001530 <ETH_SetDMAConfig>
}
 8001720:	bf00      	nop
 8001722:	3798      	adds	r7, #152	; 0x98
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3305      	adds	r3, #5
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	3204      	adds	r2, #4
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <ETH_MACAddressConfig+0x68>)
 800174a:	4413      	add	r3, r2
 800174c:	461a      	mov	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3303      	adds	r3, #3
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	061a      	lsls	r2, r3, #24
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3302      	adds	r3, #2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	041b      	lsls	r3, r3, #16
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3301      	adds	r3, #1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	4313      	orrs	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	7812      	ldrb	r2, [r2, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <ETH_MACAddressConfig+0x6c>)
 800177a:	4413      	add	r3, r2
 800177c:	461a      	mov	r2, r3
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40028040 	.word	0x40028040
 8001794:	40028044 	.word	0x40028044

08001798 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e03e      	b.n	8001824 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	3206      	adds	r2, #6
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d80c      	bhi.n	8001808 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	440b      	add	r3, r1
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	e004      	b.n	8001812 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	461a      	mov	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3301      	adds	r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d9bd      	bls.n	80017a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183c:	611a      	str	r2, [r3, #16]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e046      	b.n	80018e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6919      	ldr	r1, [r3, #16]
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001894:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800189c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80018aa:	68b9      	ldr	r1, [r7, #8]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	3212      	adds	r2, #18
 80018b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d80c      	bhi.n	80018d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6919      	ldr	r1, [r3, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	440b      	add	r3, r1
 80018ce:	461a      	mov	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	e004      	b.n	80018e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d9b5      	bls.n	8001858 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001916:	60da      	str	r2, [r3, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	e177      	b.n	8001c30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001940:	2201      	movs	r2, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 8166 	bne.w	8001c2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	2b01      	cmp	r3, #1
 8001968:	d005      	beq.n	8001976 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	2b02      	cmp	r3, #2
 8001974:	d130      	bne.n	80019d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 0201 	and.w	r2, r3, #1
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d017      	beq.n	8001a14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d123      	bne.n	8001a68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	69b9      	ldr	r1, [r7, #24]
 8001a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0203 	and.w	r2, r3, #3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80c0 	beq.w	8001c2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_GPIO_Init+0x324>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_GPIO_Init+0x324>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_GPIO_Init+0x324>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac6:	4a61      	ldr	r2, [pc, #388]	; (8001c4c <HAL_GPIO_Init+0x328>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_GPIO_Init+0x32c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d037      	beq.n	8001b62 <HAL_GPIO_Init+0x23e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d031      	beq.n	8001b5e <HAL_GPIO_Init+0x23a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a56      	ldr	r2, [pc, #344]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x236>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a55      	ldr	r2, [pc, #340]	; (8001c5c <HAL_GPIO_Init+0x338>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x232>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <HAL_GPIO_Init+0x33c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x22e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a53      	ldr	r2, [pc, #332]	; (8001c64 <HAL_GPIO_Init+0x340>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x22a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_GPIO_Init+0x344>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x226>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <HAL_GPIO_Init+0x348>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x222>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_GPIO_Init+0x34c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x21e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x21a>
 8001b3a:	2309      	movs	r3, #9
 8001b3c:	e012      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b3e:	230a      	movs	r3, #10
 8001b40:	e010      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b42:	2308      	movs	r3, #8
 8001b44:	e00e      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e00c      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	e00a      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e008      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b62:	2300      	movs	r3, #0
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f002 0203 	and.w	r2, r2, #3
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b74:	4935      	ldr	r1, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x328>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba6:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	f67f ae84 	bls.w	8001940 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40021400 	.word	0x40021400
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	40021c00 	.word	0x40021c00
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40022400 	.word	0x40022400
 8001c78:	40013c00 	.word	0x40013c00

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
	...

08001cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e12b      	b.n	8001f1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe ffd0 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d14:	f001 fa20 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 8001d18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a81      	ldr	r2, [pc, #516]	; (8001f24 <HAL_I2C_Init+0x274>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d807      	bhi.n	8001d34 <HAL_I2C_Init+0x84>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a80      	ldr	r2, [pc, #512]	; (8001f28 <HAL_I2C_Init+0x278>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	bf94      	ite	ls
 8001d2c:	2301      	movls	r3, #1
 8001d2e:	2300      	movhi	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	e006      	b.n	8001d42 <HAL_I2C_Init+0x92>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a7d      	ldr	r2, [pc, #500]	; (8001f2c <HAL_I2C_Init+0x27c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0e7      	b.n	8001f1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4a78      	ldr	r2, [pc, #480]	; (8001f30 <HAL_I2C_Init+0x280>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	0c9b      	lsrs	r3, r3, #18
 8001d54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4a6a      	ldr	r2, [pc, #424]	; (8001f24 <HAL_I2C_Init+0x274>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d802      	bhi.n	8001d84 <HAL_I2C_Init+0xd4>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3301      	adds	r3, #1
 8001d82:	e009      	b.n	8001d98 <HAL_I2C_Init+0xe8>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <HAL_I2C_Init+0x284>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	099b      	lsrs	r3, r3, #6
 8001d96:	3301      	adds	r3, #1
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	430b      	orrs	r3, r1
 8001d9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001daa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	495c      	ldr	r1, [pc, #368]	; (8001f24 <HAL_I2C_Init+0x274>)
 8001db4:	428b      	cmp	r3, r1
 8001db6:	d819      	bhi.n	8001dec <HAL_I2C_Init+0x13c>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	1e59      	subs	r1, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dc6:	1c59      	adds	r1, r3, #1
 8001dc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dcc:	400b      	ands	r3, r1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_I2C_Init+0x138>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1e59      	subs	r1, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de0:	3301      	adds	r3, #1
 8001de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de6:	e051      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001de8:	2304      	movs	r3, #4
 8001dea:	e04f      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d111      	bne.n	8001e18 <HAL_I2C_Init+0x168>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e58      	subs	r0, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e012      	b.n	8001e3e <HAL_I2C_Init+0x18e>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	1e58      	subs	r0, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	0099      	lsls	r1, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf0c      	ite	eq
 8001e38:	2301      	moveq	r3, #1
 8001e3a:	2300      	movne	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_I2C_Init+0x196>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e022      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10e      	bne.n	8001e6c <HAL_I2C_Init+0x1bc>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e58      	subs	r0, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6859      	ldr	r1, [r3, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	440b      	add	r3, r1
 8001e5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e6a:	e00f      	b.n	8001e8c <HAL_I2C_Init+0x1dc>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	0099      	lsls	r1, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6911      	ldr	r1, [r2, #16]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	4311      	orrs	r1, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	000186a0 	.word	0x000186a0
 8001f28:	001e847f 	.word	0x001e847f
 8001f2c:	003d08ff 	.word	0x003d08ff
 8001f30:	431bde83 	.word	0x431bde83
 8001f34:	10624dd3 	.word	0x10624dd3

08001f38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af02      	add	r7, sp, #8
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	461a      	mov	r2, r3
 8001f44:	460b      	mov	r3, r1
 8001f46:	817b      	strh	r3, [r7, #10]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff f8b0 	bl	80010b0 <HAL_GetTick>
 8001f50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	f040 80e0 	bne.w	8002120 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2319      	movs	r3, #25
 8001f66:	2201      	movs	r2, #1
 8001f68:	4970      	ldr	r1, [pc, #448]	; (800212c <HAL_I2C_Master_Transmit+0x1f4>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f964 	bl	8002238 <I2C_WaitOnFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f76:	2302      	movs	r3, #2
 8001f78:	e0d3      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_I2C_Master_Transmit+0x50>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e0cc      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d007      	beq.n	8001fae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2221      	movs	r2, #33	; 0x21
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	893a      	ldrh	r2, [r7, #8]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4a50      	ldr	r2, [pc, #320]	; (8002130 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ff0:	8979      	ldrh	r1, [r7, #10]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	6a3a      	ldr	r2, [r7, #32]
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f89c 	bl	8002134 <I2C_MasterRequestWrite>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e08d      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800201c:	e066      	b.n	80020ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	6a39      	ldr	r1, [r7, #32]
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 f9de 	bl	80023e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00d      	beq.n	800204a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b04      	cmp	r3, #4
 8002034:	d107      	bne.n	8002046 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002044:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b04      	cmp	r3, #4
 8002086:	d11b      	bne.n	80020c0 <HAL_I2C_Master_Transmit+0x188>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	d017      	beq.n	80020c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	6a39      	ldr	r1, [r7, #32]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f9ce 	bl	8002466 <I2C_WaitOnBTFFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00d      	beq.n	80020ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d107      	bne.n	80020e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e01a      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d194      	bne.n	800201e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	00100002 	.word	0x00100002
 8002130:	ffff0000 	.word	0xffff0000

08002134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af02      	add	r7, sp, #8
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	460b      	mov	r3, r1
 8002142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b08      	cmp	r3, #8
 800214e:	d006      	beq.n	800215e <I2C_MasterRequestWrite+0x2a>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d003      	beq.n	800215e <I2C_MasterRequestWrite+0x2a>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800215c:	d108      	bne.n	8002170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e00b      	b.n	8002188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	2b12      	cmp	r3, #18
 8002176:	d107      	bne.n	8002188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 f84f 	bl	8002238 <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00d      	beq.n	80021bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ae:	d103      	bne.n	80021b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e035      	b.n	8002228 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021c4:	d108      	bne.n	80021d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021d4:	611a      	str	r2, [r3, #16]
 80021d6:	e01b      	b.n	8002210 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	11db      	asrs	r3, r3, #7
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f003 0306 	and.w	r3, r3, #6
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f063 030f 	orn	r3, r3, #15
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	490e      	ldr	r1, [pc, #56]	; (8002230 <I2C_MasterRequestWrite+0xfc>)
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f875 	bl	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e010      	b.n	8002228 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	b2da      	uxtb	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	4907      	ldr	r1, [pc, #28]	; (8002234 <I2C_MasterRequestWrite+0x100>)
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f865 	bl	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	00010008 	.word	0x00010008
 8002234:	00010002 	.word	0x00010002

08002238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	603b      	str	r3, [r7, #0]
 8002244:	4613      	mov	r3, r2
 8002246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002248:	e025      	b.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002250:	d021      	beq.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002252:	f7fe ff2d 	bl	80010b0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d302      	bcc.n	8002268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d116      	bne.n	8002296 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f043 0220 	orr.w	r2, r3, #32
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e023      	b.n	80022de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10d      	bne.n	80022bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	43da      	mvns	r2, r3
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4013      	ands	r3, r2
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	e00c      	b.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4013      	ands	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d0b6      	beq.n	800224a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80022f4:	e051      	b.n	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002304:	d123      	bne.n	800234e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002314:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800231e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0204 	orr.w	r2, r3, #4
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e046      	b.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d021      	beq.n	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002356:	f7fe feab 	bl	80010b0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	d302      	bcc.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d116      	bne.n	800239a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f043 0220 	orr.w	r2, r3, #32
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e020      	b.n	80023dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10c      	bne.n	80023be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	bf14      	ite	ne
 80023b6:	2301      	movne	r3, #1
 80023b8:	2300      	moveq	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	e00b      	b.n	80023d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	4013      	ands	r3, r2
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d18d      	bne.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023f0:	e02d      	b.n	800244e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f878 	bl	80024e8 <I2C_IsAcknowledgeFailed>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e02d      	b.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002408:	d021      	beq.n	800244e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	f7fe fe51 	bl	80010b0 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	429a      	cmp	r2, r3
 8002418:	d302      	bcc.n	8002420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d116      	bne.n	800244e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f043 0220 	orr.w	r2, r3, #32
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e007      	b.n	800245e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d1ca      	bne.n	80023f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b084      	sub	sp, #16
 800246a:	af00      	add	r7, sp, #0
 800246c:	60f8      	str	r0, [r7, #12]
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002472:	e02d      	b.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f837 	bl	80024e8 <I2C_IsAcknowledgeFailed>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e02d      	b.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248a:	d021      	beq.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248c:	f7fe fe10 	bl	80010b0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	429a      	cmp	r2, r3
 800249a:	d302      	bcc.n	80024a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f043 0220 	orr.w	r2, r3, #32
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e007      	b.n	80024e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d1ca      	bne.n	8002474 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024fe:	d11b      	bne.n	8002538 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002508:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	f043 0204 	orr.w	r2, r3, #4
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b20      	cmp	r3, #32
 800255a:	d129      	bne.n	80025b0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2224      	movs	r2, #36	; 0x24
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0210 	bic.w	r2, r2, #16
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025be:	b480      	push	{r7}
 80025c0:	b085      	sub	sp, #20
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d12a      	bne.n	800262e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2224      	movs	r2, #36	; 0x24
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0201 	bic.w	r2, r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80025f8:	89fb      	ldrh	r3, [r7, #14]
 80025fa:	f023 030f 	bic.w	r3, r3, #15
 80025fe:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b29a      	uxth	r2, r3
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	4313      	orrs	r3, r2
 8002608:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	89fa      	ldrh	r2, [r7, #14]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f042 0201 	orr.w	r2, r2, #1
 8002620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
  }
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	b08f      	sub	sp, #60	; 0x3c
 8002640:	af0a      	add	r7, sp, #40	; 0x28
 8002642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e10f      	b.n	800286e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7fe fbb9 	bl	8000de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2203      	movs	r2, #3
 8002672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f001 fbec 	bl	8003e6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	687e      	ldr	r6, [r7, #4]
 800269a:	466d      	mov	r5, sp
 800269c:	f106 0410 	add.w	r4, r6, #16
 80026a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b0:	1d33      	adds	r3, r6, #4
 80026b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b4:	6838      	ldr	r0, [r7, #0]
 80026b6:	f001 fb77 	bl	8003da8 <USB_CoreInit>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0d0      	b.n	800286e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 fbda 	bl	8003e8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e04a      	b.n	8002774 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	333d      	adds	r3, #61	; 0x3d
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	333c      	adds	r3, #60	; 0x3c
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	b298      	uxth	r0, r3
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3344      	adds	r3, #68	; 0x44
 800271a:	4602      	mov	r2, r0
 800271c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3340      	adds	r3, #64	; 0x40
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3348      	adds	r3, #72	; 0x48
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	334c      	adds	r3, #76	; 0x4c
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3354      	adds	r3, #84	; 0x54
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	3301      	adds	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3af      	bcc.n	80026de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e044      	b.n	800280e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	3301      	adds	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d3b5      	bcc.n	8002784 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	687e      	ldr	r6, [r7, #4]
 8002820:	466d      	mov	r5, sp
 8002822:	f106 0410 	add.w	r4, r6, #16
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002832:	e885 0003 	stmia.w	r5, {r0, r1}
 8002836:	1d33      	adds	r3, r6, #4
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f001 fb72 	bl	8003f24 <USB_DevInit>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00d      	b.n	800286e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f001 fd3d 	bl	80042e6 <USB_DevDisconnect>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e267      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d075      	beq.n	8002982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d00c      	beq.n	80028bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a2:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d112      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ae:	4b82      	ldr	r3, [pc, #520]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d05b      	beq.n	8002980 <HAL_RCC_OscConfig+0x108>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d157      	bne.n	8002980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e242      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x74>
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a75      	ldr	r2, [pc, #468]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e01d      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x98>
 80028f6:	4b70      	ldr	r3, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a6f      	ldr	r2, [pc, #444]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6c      	ldr	r2, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xb0>
 8002910:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a68      	ldr	r2, [pc, #416]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b66      	ldr	r3, [pc, #408]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a65      	ldr	r2, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe fbbe 	bl	80010b0 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe fbba 	bl	80010b0 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	; 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e207      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	4b5b      	ldr	r3, [pc, #364]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0xc0>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe fbaa 	bl	80010b0 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe fba6 	bl	80010b0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e1f3      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	4b51      	ldr	r3, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0xe8>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d063      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800298e:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d11c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a6:	4b44      	ldr	r3, [pc, #272]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d116      	bne.n	80029e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d001      	beq.n	80029ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e1c7      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	e03a      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ee:	f7fe fb5f 	bl	80010b0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f6:	f7fe fb5b 	bl	80010b0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e1a8      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a14:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4925      	ldr	r1, [pc, #148]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	600b      	str	r3, [r1, #0]
 8002a28:	e015      	b.n	8002a56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <HAL_RCC_OscConfig+0x244>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fb3e 	bl	80010b0 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a38:	f7fe fb3a 	bl	80010b0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e187      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d036      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fb1e 	bl	80010b0 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a78:	f7fe fb1a 	bl	80010b0 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e167      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x200>
 8002a96:	e01b      	b.n	8002ad0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a98:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_RCC_OscConfig+0x248>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7fe fb07 	bl	80010b0 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa4:	e00e      	b.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fb03 	bl	80010b0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d907      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e150      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1ea      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8097 	beq.w	8002c0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae2:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	4a7c      	ldr	r2, [pc, #496]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6413      	str	r3, [r2, #64]	; 0x40
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0e:	4b77      	ldr	r3, [pc, #476]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d118      	bne.n	8002b4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b1a:	4b74      	ldr	r3, [pc, #464]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a73      	ldr	r2, [pc, #460]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fac3 	bl	80010b0 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2e:	f7fe fabf 	bl	80010b0 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e10c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <HAL_RCC_OscConfig+0x474>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_OscConfig+0x2ea>
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	4a63      	ldr	r2, [pc, #396]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b60:	e01c      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b05      	cmp	r3, #5
 8002b68:	d10c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x30c>
 8002b6a:	4b5f      	ldr	r3, [pc, #380]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a5e      	ldr	r2, [pc, #376]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
 8002b76:	4b5c      	ldr	r3, [pc, #368]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	4a5b      	ldr	r2, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6713      	str	r3, [r2, #112]	; 0x70
 8002b82:	e00b      	b.n	8002b9c <HAL_RCC_OscConfig+0x324>
 8002b84:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b8a:	f023 0301 	bic.w	r3, r3, #1
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d015      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fa84 	bl	80010b0 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe fa80 	bl	80010b0 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0cb      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc2:	4b49      	ldr	r3, [pc, #292]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ee      	beq.n	8002bac <HAL_RCC_OscConfig+0x334>
 8002bce:	e014      	b.n	8002bfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fa6e 	bl	80010b0 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fa6a 	bl	80010b0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0b5      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bee:	4b3e      	ldr	r3, [pc, #248]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ee      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bfa:	7dfb      	ldrb	r3, [r7, #23]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b39      	ldr	r3, [pc, #228]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	4a38      	ldr	r2, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a1 	beq.w	8002d58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d05c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d141      	bne.n	8002cae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c30:	f7fe fa3e 	bl	80010b0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe fa3a 	bl	80010b0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e087      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4a:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69da      	ldr	r2, [r3, #28]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	019b      	lsls	r3, r3, #6
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	491b      	ldr	r1, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe fa13 	bl	80010b0 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe fa0f 	bl	80010b0 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e05c      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x416>
 8002cac:	e054      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x478>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f9fc 	bl	80010b0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe f9f8 	bl	80010b0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e045      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x444>
 8002cda:	e03d      	b.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e038      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_RCC_OscConfig+0x4ec>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d028      	beq.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d121      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d11a      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d111      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	085b      	lsrs	r3, r3, #1
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800

08002d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0cc      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d90c      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d044      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d119      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b3f      	ldr	r3, [pc, #252]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e067      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4934      	ldr	r1, [pc, #208]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fe f92a 	bl	80010b0 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fe f926 	bl	80010b0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e04f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 030f 	and.w	r3, r3, #15
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20c      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f821 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd ffc0 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00
 8002f24:	40023800 	.word	0x40023800
 8002f28:	08006cac 	.word	0x08006cac
 8002f2c:	20000000 	.word	0x20000000
 8002f30:	20000004 	.word	0x20000004

08002f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f38:	b094      	sub	sp, #80	; 0x50
 8002f3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f40:	2300      	movs	r3, #0
 8002f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f44:	2300      	movs	r3, #0
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f4c:	4b79      	ldr	r3, [pc, #484]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d00d      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x40>
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	f200 80e1 	bhi.w	8003120 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_RCC_GetSysClockFreq+0x34>
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f66:	e0db      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f68:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f6c:	e0db      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f6e:	4b73      	ldr	r3, [pc, #460]	; (800313c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f72:	e0d8      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f7e:	4b6d      	ldr	r3, [pc, #436]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d063      	beq.n	8003052 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8a:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	2200      	movs	r2, #0
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	f04f 0000 	mov.w	r0, #0
 8002fae:	f04f 0100 	mov.w	r1, #0
 8002fb2:	0159      	lsls	r1, r3, #5
 8002fb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fb8:	0150      	lsls	r0, r2, #5
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	1a51      	subs	r1, r2, r1
 8002fc2:	6139      	str	r1, [r7, #16]
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd8:	4659      	mov	r1, fp
 8002fda:	018b      	lsls	r3, r1, #6
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	018a      	lsls	r2, r1, #6
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	ebb2 0801 	subs.w	r8, r2, r1
 8002fec:	4659      	mov	r1, fp
 8002fee:	eb63 0901 	sbc.w	r9, r3, r1
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003006:	4690      	mov	r8, r2
 8003008:	4699      	mov	r9, r3
 800300a:	4623      	mov	r3, r4
 800300c:	eb18 0303 	adds.w	r3, r8, r3
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	462b      	mov	r3, r5
 8003014:	eb49 0303 	adc.w	r3, r9, r3
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003026:	4629      	mov	r1, r5
 8003028:	024b      	lsls	r3, r1, #9
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003030:	4621      	mov	r1, r4
 8003032:	024a      	lsls	r2, r1, #9
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800303a:	2200      	movs	r2, #0
 800303c:	62bb      	str	r3, [r7, #40]	; 0x28
 800303e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003040:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003044:	f7fd f8d4 	bl	80001f0 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003050:	e058      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003052:	4b38      	ldr	r3, [pc, #224]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	2200      	movs	r2, #0
 800305a:	4618      	mov	r0, r3
 800305c:	4611      	mov	r1, r2
 800305e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
 8003068:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800306c:	4642      	mov	r2, r8
 800306e:	464b      	mov	r3, r9
 8003070:	f04f 0000 	mov.w	r0, #0
 8003074:	f04f 0100 	mov.w	r1, #0
 8003078:	0159      	lsls	r1, r3, #5
 800307a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800307e:	0150      	lsls	r0, r2, #5
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4641      	mov	r1, r8
 8003086:	ebb2 0a01 	subs.w	sl, r2, r1
 800308a:	4649      	mov	r1, r9
 800308c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800309c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030a4:	ebb2 040a 	subs.w	r4, r2, sl
 80030a8:	eb63 050b 	sbc.w	r5, r3, fp
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	00eb      	lsls	r3, r5, #3
 80030b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030ba:	00e2      	lsls	r2, r4, #3
 80030bc:	4614      	mov	r4, r2
 80030be:	461d      	mov	r5, r3
 80030c0:	4643      	mov	r3, r8
 80030c2:	18e3      	adds	r3, r4, r3
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	464b      	mov	r3, r9
 80030c8:	eb45 0303 	adc.w	r3, r5, r3
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030da:	4629      	mov	r1, r5
 80030dc:	028b      	lsls	r3, r1, #10
 80030de:	4621      	mov	r1, r4
 80030e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030e4:	4621      	mov	r1, r4
 80030e6:	028a      	lsls	r2, r1, #10
 80030e8:	4610      	mov	r0, r2
 80030ea:	4619      	mov	r1, r3
 80030ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ee:	2200      	movs	r2, #0
 80030f0:	61bb      	str	r3, [r7, #24]
 80030f2:	61fa      	str	r2, [r7, #28]
 80030f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030f8:	f7fd f87a 	bl	80001f0 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4613      	mov	r3, r2
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <HAL_RCC_GetSysClockFreq+0x200>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	3301      	adds	r3, #1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800311e:	e002      	b.n	8003126 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCC_GetSysClockFreq+0x204>)
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003128:	4618      	mov	r0, r3
 800312a:	3750      	adds	r7, #80	; 0x50
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	00f42400 	.word	0x00f42400
 800313c:	007a1200 	.word	0x007a1200

08003140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_GetHCLKFreq+0x14>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	4618      	mov	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000000 	.word	0x20000000

08003158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800315c:	f7ff fff0 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0a9b      	lsrs	r3, r3, #10
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	; (800317c <HAL_RCC_GetPCLK1Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	08006cbc 	.word	0x08006cbc

08003180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003184:	f7ff ffdc 	bl	8003140 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0b5b      	lsrs	r3, r3, #13
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	08006cbc 	.word	0x08006cbc

080031a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	220f      	movs	r2, #15
 80031b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0203 	and.w	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80031dc:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_GetClockConfig+0x5c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	08db      	lsrs	r3, r3, #3
 80031e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80031ea:	4b07      	ldr	r3, [pc, #28]	; (8003208 <HAL_RCC_GetClockConfig+0x60>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40023c00 	.word	0x40023c00

0800320c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd fd6a 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fa36 	bl	80036bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d001      	beq.n	80032c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e046      	b.n	8003352 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a23      	ldr	r2, [pc, #140]	; (8003360 <HAL_TIM_Base_Start+0xb4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032de:	d01d      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_TIM_Base_Start+0xb8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d018      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_TIM_Base_Start+0xbc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_TIM_Base_Start+0xc0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <HAL_TIM_Base_Start+0xc4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a19      	ldr	r2, [pc, #100]	; (8003374 <HAL_TIM_Base_Start+0xc8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_TIM_Base_Start+0x70>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a18      	ldr	r2, [pc, #96]	; (8003378 <HAL_TIM_Base_Start+0xcc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d111      	bne.n	8003340 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d010      	beq.n	8003350 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	e007      	b.n	8003350 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40010400 	.word	0x40010400
 8003374:	40014000 	.word	0x40014000
 8003378:	40001800 	.word	0x40001800

0800337c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d001      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e04e      	b.n	8003432 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a23      	ldr	r2, [pc, #140]	; (8003440 <HAL_TIM_Base_Start_IT+0xc4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d022      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x80>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d01d      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x80>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a1f      	ldr	r2, [pc, #124]	; (8003444 <HAL_TIM_Base_Start_IT+0xc8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x80>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <HAL_TIM_Base_Start_IT+0xcc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x80>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1c      	ldr	r2, [pc, #112]	; (800344c <HAL_TIM_Base_Start_IT+0xd0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x80>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIM_Base_Start_IT+0xd4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x80>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIM_Base_Start_IT+0xdc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d111      	bne.n	8003420 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d010      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341e:	e007      	b.n	8003430 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40010000 	.word	0x40010000
 8003444:	40000400 	.word	0x40000400
 8003448:	40000800 	.word	0x40000800
 800344c:	40000c00 	.word	0x40000c00
 8003450:	40010400 	.word	0x40010400
 8003454:	40014000 	.word	0x40014000
 8003458:	40001800 	.word	0x40001800

0800345c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b02      	cmp	r3, #2
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b02      	cmp	r3, #2
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0202 	mvn.w	r2, #2
 8003488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8ee 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8e0 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f8f1 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b04      	cmp	r3, #4
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0204 	mvn.w	r2, #4
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8c4 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8b6 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f8c7 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b08      	cmp	r3, #8
 8003518:	d122      	bne.n	8003560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b08      	cmp	r3, #8
 8003526:	d11b      	bne.n	8003560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0208 	mvn.w	r2, #8
 8003530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2204      	movs	r2, #4
 8003536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f89a 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 800354c:	e005      	b.n	800355a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f88c 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f89d 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b10      	cmp	r3, #16
 800356c:	d122      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b10      	cmp	r3, #16
 800357a:	d11b      	bne.n	80035b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0210 	mvn.w	r2, #16
 8003584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2208      	movs	r2, #8
 800358a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f870 	bl	8003680 <HAL_TIM_IC_CaptureCallback>
 80035a0:	e005      	b.n	80035ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f862 	bl	800366c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f873 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10e      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0201 	mvn.w	r2, #1
 80035d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd fa44 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f8:	2b80      	cmp	r3, #128	; 0x80
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f902 	bl	8003810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003616:	2b40      	cmp	r3, #64	; 0x40
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003624:	2b40      	cmp	r3, #64	; 0x40
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f838 	bl	80036a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b20      	cmp	r3, #32
 8003644:	d10e      	bne.n	8003664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b20      	cmp	r3, #32
 8003652:	d107      	bne.n	8003664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0220 	mvn.w	r2, #32
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f8cc 	bl	80037fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a40      	ldr	r2, [pc, #256]	; (80037d0 <TIM_Base_SetConfig+0x114>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d013      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d00f      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a3d      	ldr	r2, [pc, #244]	; (80037d4 <TIM_Base_SetConfig+0x118>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a3c      	ldr	r2, [pc, #240]	; (80037d8 <TIM_Base_SetConfig+0x11c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3b      	ldr	r2, [pc, #236]	; (80037dc <TIM_Base_SetConfig+0x120>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x40>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3a      	ldr	r2, [pc, #232]	; (80037e0 <TIM_Base_SetConfig+0x124>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a2f      	ldr	r2, [pc, #188]	; (80037d0 <TIM_Base_SetConfig+0x114>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d02b      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d027      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a2c      	ldr	r2, [pc, #176]	; (80037d4 <TIM_Base_SetConfig+0x118>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d023      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a2b      	ldr	r2, [pc, #172]	; (80037d8 <TIM_Base_SetConfig+0x11c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01f      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a2a      	ldr	r2, [pc, #168]	; (80037dc <TIM_Base_SetConfig+0x120>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01b      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a29      	ldr	r2, [pc, #164]	; (80037e0 <TIM_Base_SetConfig+0x124>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d017      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a28      	ldr	r2, [pc, #160]	; (80037e4 <TIM_Base_SetConfig+0x128>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a27      	ldr	r2, [pc, #156]	; (80037e8 <TIM_Base_SetConfig+0x12c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00f      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a26      	ldr	r2, [pc, #152]	; (80037ec <TIM_Base_SetConfig+0x130>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00b      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <TIM_Base_SetConfig+0x134>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a24      	ldr	r2, [pc, #144]	; (80037f4 <TIM_Base_SetConfig+0x138>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a23      	ldr	r2, [pc, #140]	; (80037f8 <TIM_Base_SetConfig+0x13c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <TIM_Base_SetConfig+0x114>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_Base_SetConfig+0xf8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a0c      	ldr	r2, [pc, #48]	; (80037e0 <TIM_Base_SetConfig+0x124>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40010000 	.word	0x40010000
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40000800 	.word	0x40000800
 80037dc:	40000c00 	.word	0x40000c00
 80037e0:	40010400 	.word	0x40010400
 80037e4:	40014000 	.word	0x40014000
 80037e8:	40014400 	.word	0x40014400
 80037ec:	40014800 	.word	0x40014800
 80037f0:	40001800 	.word	0x40001800
 80037f4:	40001c00 	.word	0x40001c00
 80037f8:	40002000 	.word	0x40002000

080037fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e03f      	b.n	80038b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fa80 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f829 	bl	80038c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800387c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800388c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800389c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b0c0      	sub	sp, #256	; 0x100
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	ea40 0301 	orr.w	r3, r0, r1
 80038e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003918:	f021 010c 	bic.w	r1, r1, #12
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003926:	430b      	orrs	r3, r1
 8003928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	6999      	ldr	r1, [r3, #24]
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	ea40 0301 	orr.w	r3, r0, r1
 8003946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <UART_SetConfig+0x2cc>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d005      	beq.n	8003960 <UART_SetConfig+0xa0>
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b8d      	ldr	r3, [pc, #564]	; (8003b90 <UART_SetConfig+0x2d0>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d104      	bne.n	800396a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003960:	f7ff fc0e 	bl	8003180 <HAL_RCC_GetPCLK2Freq>
 8003964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003968:	e003      	b.n	8003972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800396a:	f7ff fbf5 	bl	8003158 <HAL_RCC_GetPCLK1Freq>
 800396e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	f040 810c 	bne.w	8003b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800398a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800398e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	1891      	adds	r1, r2, r2
 8003998:	65b9      	str	r1, [r7, #88]	; 0x58
 800399a:	415b      	adcs	r3, r3
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800399e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039a2:	4621      	mov	r1, r4
 80039a4:	eb12 0801 	adds.w	r8, r2, r1
 80039a8:	4629      	mov	r1, r5
 80039aa:	eb43 0901 	adc.w	r9, r3, r1
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c2:	4690      	mov	r8, r2
 80039c4:	4699      	mov	r9, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	eb18 0303 	adds.w	r3, r8, r3
 80039cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039d0:	462b      	mov	r3, r5
 80039d2:	eb49 0303 	adc.w	r3, r9, r3
 80039d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ee:	460b      	mov	r3, r1
 80039f0:	18db      	adds	r3, r3, r3
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
 80039f4:	4613      	mov	r3, r2
 80039f6:	eb42 0303 	adc.w	r3, r2, r3
 80039fa:	657b      	str	r3, [r7, #84]	; 0x54
 80039fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a04:	f7fc fbf4 	bl	80001f0 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	011c      	lsls	r4, r3, #4
 8003a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a30:	415b      	adcs	r3, r3
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a38:	4641      	mov	r1, r8
 8003a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a3e:	4649      	mov	r1, r9
 8003a40:	eb43 0b01 	adc.w	fp, r3, r1
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a58:	4692      	mov	sl, r2
 8003a5a:	469b      	mov	fp, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a66:	464b      	mov	r3, r9
 8003a68:	eb4b 0303 	adc.w	r3, fp, r3
 8003a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a84:	460b      	mov	r3, r1
 8003a86:	18db      	adds	r3, r3, r3
 8003a88:	643b      	str	r3, [r7, #64]	; 0x40
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
 8003a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a9a:	f7fc fba9 	bl	80001f0 <__aeabi_uldivmod>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2264      	movs	r2, #100	; 0x64
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	1acb      	subs	r3, r1, r3
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003abc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ac8:	441c      	add	r4, r3
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aec:	4641      	mov	r1, r8
 8003aee:	1851      	adds	r1, r2, r1
 8003af0:	6339      	str	r1, [r7, #48]	; 0x30
 8003af2:	4649      	mov	r1, r9
 8003af4:	414b      	adcs	r3, r1
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b04:	4659      	mov	r1, fp
 8003b06:	00cb      	lsls	r3, r1, #3
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0e:	4651      	mov	r1, sl
 8003b10:	00ca      	lsls	r2, r1, #3
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	4642      	mov	r2, r8
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b20:	464b      	mov	r3, r9
 8003b22:	460a      	mov	r2, r1
 8003b24:	eb42 0303 	adc.w	r3, r2, r3
 8003b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b40:	460b      	mov	r3, r1
 8003b42:	18db      	adds	r3, r3, r3
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b46:	4613      	mov	r3, r2
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b56:	f7fc fb4b 	bl	80001f0 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003b60:	fba3 1302 	umull	r1, r3, r3, r2
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	2164      	movs	r1, #100	; 0x64
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	3332      	adds	r3, #50	; 0x32
 8003b72:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	f003 0207 	and.w	r2, r3, #7
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4422      	add	r2, r4
 8003b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b88:	e105      	b.n	8003d96 <UART_SetConfig+0x4d6>
 8003b8a:	bf00      	nop
 8003b8c:	40011000 	.word	0x40011000
 8003b90:	40011400 	.word	0x40011400
 8003b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	6239      	str	r1, [r7, #32]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1854      	adds	r4, r2, r1
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	eb43 0501 	adc.w	r5, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	00eb      	lsls	r3, r5, #3
 8003bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd2:	00e2      	lsls	r2, r4, #3
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	4643      	mov	r3, r8
 8003bda:	18e3      	adds	r3, r4, r3
 8003bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003be0:	464b      	mov	r3, r9
 8003be2:	eb45 0303 	adc.w	r3, r5, r3
 8003be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c06:	4629      	mov	r1, r5
 8003c08:	008b      	lsls	r3, r1, #2
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c10:	4621      	mov	r1, r4
 8003c12:	008a      	lsls	r2, r1, #2
 8003c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c18:	f7fc faea 	bl	80001f0 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4b60      	ldr	r3, [pc, #384]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	011c      	lsls	r4, r3, #4
 8003c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	1891      	adds	r1, r2, r2
 8003c42:	61b9      	str	r1, [r7, #24]
 8003c44:	415b      	adcs	r3, r3
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	1851      	adds	r1, r2, r1
 8003c50:	6139      	str	r1, [r7, #16]
 8003c52:	4649      	mov	r1, r9
 8003c54:	414b      	adcs	r3, r1
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c64:	4659      	mov	r1, fp
 8003c66:	00cb      	lsls	r3, r1, #3
 8003c68:	4651      	mov	r1, sl
 8003c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6e:	4651      	mov	r1, sl
 8003c70:	00ca      	lsls	r2, r1, #3
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	4642      	mov	r2, r8
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c80:	464b      	mov	r3, r9
 8003c82:	460a      	mov	r2, r1
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	008b      	lsls	r3, r1, #2
 8003ca8:	4641      	mov	r1, r8
 8003caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cae:	4641      	mov	r1, r8
 8003cb0:	008a      	lsls	r2, r1, #2
 8003cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cb6:	f7fc fa9b 	bl	80001f0 <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	2164      	movs	r1, #100	; 0x64
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	3332      	adds	r3, #50	; 0x32
 8003cd2:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cde:	441c      	add	r4, r3
 8003ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce8:	677a      	str	r2, [r7, #116]	; 0x74
 8003cea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cee:	4642      	mov	r2, r8
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	1891      	adds	r1, r2, r2
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	415b      	adcs	r3, r3
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfe:	4641      	mov	r1, r8
 8003d00:	1851      	adds	r1, r2, r1
 8003d02:	6039      	str	r1, [r7, #0]
 8003d04:	4649      	mov	r1, r9
 8003d06:	414b      	adcs	r3, r1
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d16:	4659      	mov	r1, fp
 8003d18:	00cb      	lsls	r3, r1, #3
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d20:	4651      	mov	r1, sl
 8003d22:	00ca      	lsls	r2, r1, #3
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4642      	mov	r2, r8
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d30:	464b      	mov	r3, r9
 8003d32:	460a      	mov	r2, r1
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	663b      	str	r3, [r7, #96]	; 0x60
 8003d44:	667a      	str	r2, [r7, #100]	; 0x64
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d52:	4649      	mov	r1, r9
 8003d54:	008b      	lsls	r3, r1, #2
 8003d56:	4641      	mov	r1, r8
 8003d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	008a      	lsls	r2, r1, #2
 8003d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d64:	f7fc fa44 	bl	80001f0 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2164      	movs	r1, #100	; 0x64
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4422      	add	r2, r4
 8003d94:	609a      	str	r2, [r3, #8]
}
 8003d96:	bf00      	nop
 8003d98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da2:	bf00      	nop
 8003da4:	51eb851f 	.word	0x51eb851f

08003da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da8:	b084      	sub	sp, #16
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	f107 001c 	add.w	r0, r7, #28
 8003db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d122      	bne.n	8003e06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d105      	bne.n	8003dfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 faa2 	bl	8004344 <USB_CoreReset>
 8003e00:	4603      	mov	r3, r0
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	e01a      	b.n	8003e3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fa96 	bl	8004344 <USB_CoreReset>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8003e2e:	e005      	b.n	8003e3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10b      	bne.n	8003e5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f043 0206 	orr.w	r2, r3, #6
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e66:	b004      	add	sp, #16
 8003e68:	4770      	bx	lr

08003e6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0201 	bic.w	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d115      	bne.n	8003eda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7fd f904 	bl	80010c8 <HAL_Delay>
      ms++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fa2e 	bl	8004328 <USB_GetMode>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d01e      	beq.n	8003f10 <USB_SetCurrentMode+0x84>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2b31      	cmp	r3, #49	; 0x31
 8003ed6:	d9f0      	bls.n	8003eba <USB_SetCurrentMode+0x2e>
 8003ed8:	e01a      	b.n	8003f10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d115      	bne.n	8003f0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7fd f8eb 	bl	80010c8 <HAL_Delay>
      ms++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 fa15 	bl	8004328 <USB_GetMode>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <USB_SetCurrentMode+0x84>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b31      	cmp	r3, #49	; 0x31
 8003f08:	d9f0      	bls.n	8003eec <USB_SetCurrentMode+0x60>
 8003f0a:	e001      	b.n	8003f10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e005      	b.n	8003f1c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b32      	cmp	r3, #50	; 0x32
 8003f14:	d101      	bne.n	8003f1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f24:	b084      	sub	sp, #16
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	e009      	b.n	8003f58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3340      	adds	r3, #64	; 0x40
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3301      	adds	r3, #1
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b0e      	cmp	r3, #14
 8003f5c:	d9f2      	bls.n	8003f44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d11c      	bne.n	8003f9e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f94:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f9c:	e00b      	b.n	8003fb6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc8:	4619      	mov	r1, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	680b      	ldr	r3, [r1, #0]
 8003fd4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10c      	bne.n	8003ff6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f965 	bl	80042b4 <USB_SetDevSpeed>
 8003fea:	e008      	b.n	8003ffe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fec:	2101      	movs	r1, #1
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f960 	bl	80042b4 <USB_SetDevSpeed>
 8003ff4:	e003      	b.n	8003ffe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ff6:	2103      	movs	r1, #3
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 f95b 	bl	80042b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ffe:	2110      	movs	r1, #16
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f8f3 	bl	80041ec <USB_FlushTxFifo>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f91f 	bl	8004254 <USB_FlushRxFifo>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	461a      	mov	r2, r3
 8004028:	2300      	movs	r3, #0
 800402a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004032:	461a      	mov	r2, r3
 8004034:	2300      	movs	r3, #0
 8004036:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	461a      	mov	r2, r3
 8004040:	2300      	movs	r3, #0
 8004042:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004044:	2300      	movs	r3, #0
 8004046:	613b      	str	r3, [r7, #16]
 8004048:	e043      	b.n	80040d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800405c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004060:	d118      	bne.n	8004094 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	461a      	mov	r2, r3
 8004076:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e013      	b.n	80040a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	461a      	mov	r2, r3
 800408c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e008      	b.n	80040a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a0:	461a      	mov	r2, r3
 80040a2:	2300      	movs	r3, #0
 80040a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	461a      	mov	r2, r3
 80040b4:	2300      	movs	r3, #0
 80040b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	461a      	mov	r2, r3
 80040c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3301      	adds	r3, #1
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d3b7      	bcc.n	800404a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	e043      	b.n	8004168 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040f6:	d118      	bne.n	800412a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	461a      	mov	r2, r3
 800410c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e013      	b.n	800413c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004120:	461a      	mov	r2, r3
 8004122:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	e008      	b.n	800413c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	461a      	mov	r2, r3
 800414a:	2300      	movs	r3, #0
 800414c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415a:	461a      	mov	r2, r3
 800415c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004160:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	3301      	adds	r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d3b7      	bcc.n	80040e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004182:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004190:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f043 0210 	orr.w	r2, r3, #16
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699a      	ldr	r2, [r3, #24]
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <USB_DevInit+0x2c4>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f043 0208 	orr.w	r2, r3, #8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d107      	bne.n	80041d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d0:	f043 0304 	orr.w	r3, r3, #4
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041e4:	b004      	add	sp, #16
 80041e6:	4770      	bx	lr
 80041e8:	803c3800 	.word	0x803c3800

080041ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a13      	ldr	r2, [pc, #76]	; (8004250 <USB_FlushTxFifo+0x64>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e01b      	b.n	8004244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	daf2      	bge.n	80041fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	019b      	lsls	r3, r3, #6
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a08      	ldr	r2, [pc, #32]	; (8004250 <USB_FlushTxFifo+0x64>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d901      	bls.n	8004236 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e006      	b.n	8004244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b20      	cmp	r3, #32
 8004240:	d0f0      	beq.n	8004224 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	00030d40 	.word	0x00030d40

08004254 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	3301      	adds	r3, #1
 8004264:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <USB_FlushRxFifo+0x5c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e018      	b.n	80042a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	daf2      	bge.n	8004260 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2210      	movs	r2, #16
 8004282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	3301      	adds	r3, #1
 8004288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <USB_FlushRxFifo+0x5c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e006      	b.n	80042a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d0f0      	beq.n	8004284 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	00030d40 	.word	0x00030d40

080042b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	460b      	mov	r3, r1
 80042be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	78fb      	ldrb	r3, [r7, #3]
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042d4:	4313      	orrs	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004300:	f023 0303 	bic.w	r3, r3, #3
 8004304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	f003 0301 	and.w	r3, r3, #1
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a13      	ldr	r2, [pc, #76]	; (80043a8 <USB_CoreReset+0x64>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e01b      	b.n	800439a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	daf2      	bge.n	8004350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3301      	adds	r3, #1
 800437e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <USB_CoreReset+0x64>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e006      	b.n	800439a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b01      	cmp	r3, #1
 8004396:	d0f0      	beq.n	800437a <USB_CoreReset+0x36>

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	00030d40 	.word	0x00030d40

080043ac <__NVIC_SetPriority>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	6039      	str	r1, [r7, #0]
 80043b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db0a      	blt.n	80043d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	490c      	ldr	r1, [pc, #48]	; (80043f8 <__NVIC_SetPriority+0x4c>)
 80043c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ca:	0112      	lsls	r2, r2, #4
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	440b      	add	r3, r1
 80043d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043d4:	e00a      	b.n	80043ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	b2da      	uxtb	r2, r3
 80043da:	4908      	ldr	r1, [pc, #32]	; (80043fc <__NVIC_SetPriority+0x50>)
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	3b04      	subs	r3, #4
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	440b      	add	r3, r1
 80043ea:	761a      	strb	r2, [r3, #24]
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	e000e100 	.word	0xe000e100
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <SysTick_Handler+0x1c>)
 8004406:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004408:	f001 fc02 	bl	8005c10 <xTaskGetSchedulerState>
 800440c:	4603      	mov	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004412:	f002 f9e9 	bl	80067e8 <xPortSysTickHandler>
  }
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	e000e010 	.word	0xe000e010

08004420 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004424:	2100      	movs	r1, #0
 8004426:	f06f 0004 	mvn.w	r0, #4
 800442a:	f7ff ffbf 	bl	80043ac <__NVIC_SetPriority>
#endif
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800443a:	f3ef 8305 	mrs	r3, IPSR
 800443e:	603b      	str	r3, [r7, #0]
  return(result);
 8004440:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004446:	f06f 0305 	mvn.w	r3, #5
 800444a:	607b      	str	r3, [r7, #4]
 800444c:	e00c      	b.n	8004468 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <osKernelInitialize+0x44>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d105      	bne.n	8004462 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <osKernelInitialize+0x44>)
 8004458:	2201      	movs	r2, #1
 800445a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800445c:	2300      	movs	r3, #0
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e002      	b.n	8004468 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004468:	687b      	ldr	r3, [r7, #4]
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	200008f8 	.word	0x200008f8

0800447c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004482:	f3ef 8305 	mrs	r3, IPSR
 8004486:	603b      	str	r3, [r7, #0]
  return(result);
 8004488:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <osKernelStart+0x1a>
    stat = osErrorISR;
 800448e:	f06f 0305 	mvn.w	r3, #5
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	e010      	b.n	80044b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <osKernelStart+0x48>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d109      	bne.n	80044b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800449e:	f7ff ffbf 	bl	8004420 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <osKernelStart+0x48>)
 80044a4:	2202      	movs	r2, #2
 80044a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044a8:	f000 ff56 	bl	8005358 <vTaskStartScheduler>
      stat = osOK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e002      	b.n	80044b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044b8:	687b      	ldr	r3, [r7, #4]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200008f8 	.word	0x200008f8

080044c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80044d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4a06      	ldr	r2, [pc, #24]	; (80044f8 <vApplicationGetIdleTaskMemory+0x30>)
 80044de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2280      	movs	r2, #128	; 0x80
 80044e4:	601a      	str	r2, [r3, #0]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	200008fc 	.word	0x200008fc
 80044f8:	200009b8 	.word	0x200009b8

080044fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <vApplicationGetTimerTaskMemory+0x2c>)
 800450c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4a06      	ldr	r2, [pc, #24]	; (800452c <vApplicationGetTimerTaskMemory+0x30>)
 8004512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20000bb8 	.word	0x20000bb8
 800452c:	20000c74 	.word	0x20000c74

08004530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0208 	add.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f103 0208 	add.w	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 0208 	add.w	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d103      	bne.n	80045f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e00c      	b.n	800460c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3308      	adds	r3, #8
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e002      	b.n	8004600 <vListInsert+0x2e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	d2f6      	bcs.n	80045fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d103      	bne.n	8004678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1e5a      	subs	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046c2:	f001 ffff 	bl	80066c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	441a      	add	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	3b01      	subs	r3, #1
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	441a      	add	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d114      	bne.n	8004742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3310      	adds	r3, #16
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f8b1 	bl	800588c <xTaskRemoveFromEventList>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <xQueueGenericReset+0xcc>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	e009      	b.n	8004756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3310      	adds	r3, #16
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fef2 	bl	8004530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff feed 	bl	8004530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004756:	f001 ffe5 	bl	8006724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800475a:	2301      	movs	r3, #1
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08e      	sub	sp, #56	; 0x38
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <xQueueGenericCreateStatic+0x52>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <xQueueGenericCreateStatic+0x56>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <xQueueGenericCreateStatic+0x58>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	623b      	str	r3, [r7, #32]
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <xQueueGenericCreateStatic+0x7e>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <xQueueGenericCreateStatic+0x82>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <xQueueGenericCreateStatic+0x84>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61fb      	str	r3, [r7, #28]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004806:	2350      	movs	r3, #80	; 0x50
 8004808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b50      	cmp	r3, #80	; 0x50
 800480e:	d00a      	beq.n	8004826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61bb      	str	r3, [r7, #24]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800483a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f805 	bl	8004858 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004850:	4618      	mov	r0, r3
 8004852:	3730      	adds	r7, #48	; 0x30
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e002      	b.n	800487a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004886:	2101      	movs	r1, #1
 8004888:	69b8      	ldr	r0, [r7, #24]
 800488a:	f7ff ff05 	bl	8004698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	; 0x38
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ae:	2300      	movs	r3, #0
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <xQueueGenericSend+0x32>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <xQueueGenericSend+0x40>
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <xQueueGenericSend+0x44>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <xQueueGenericSend+0x46>
 80048e4:	2300      	movs	r3, #0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <xQueueGenericSend+0x60>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d103      	bne.n	800490e <xQueueGenericSend+0x6e>
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <xQueueGenericSend+0x72>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueGenericSend+0x74>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueGenericSend+0x8e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	623b      	str	r3, [r7, #32]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800492e:	f001 f96f 	bl	8005c10 <xTaskGetSchedulerState>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <xQueueGenericSend+0x9e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericSend+0xa2>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericSend+0xa4>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericSend+0xbe>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800495e:	f001 feb1 	bl	80066c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <xQueueGenericSend+0xd4>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d129      	bne.n	80049c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800497a:	f000 fa0b 	bl	8004d94 <prvCopyDataToQueue>
 800497e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	3324      	adds	r3, #36	; 0x24
 800498c:	4618      	mov	r0, r3
 800498e:	f000 ff7d 	bl	800588c <xTaskRemoveFromEventList>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004998:	4b3f      	ldr	r3, [pc, #252]	; (8004a98 <xQueueGenericSend+0x1f8>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	e00a      	b.n	80049c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049b0:	4b39      	ldr	r3, [pc, #228]	; (8004a98 <xQueueGenericSend+0x1f8>)
 80049b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049c0:	f001 feb0 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e063      	b.n	8004a90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d103      	bne.n	80049d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049ce:	f001 fea9 	bl	8006724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e05c      	b.n	8004a90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d106      	bne.n	80049ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 ffb7 	bl	8005954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e6:	2301      	movs	r3, #1
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049ea:	f001 fe9b 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ee:	f000 fd23 	bl	8005438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f2:	f001 fe67 	bl	80066c4 <vPortEnterCritical>
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fc:	b25b      	sxtb	r3, r3
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d103      	bne.n	8004a0c <xQueueGenericSend+0x16c>
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a12:	b25b      	sxtb	r3, r3
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSend+0x182>
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a22:	f001 fe7f 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a26:	1d3a      	adds	r2, r7, #4
 8004a28:	f107 0314 	add.w	r3, r7, #20
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 ffa6 	bl	8005980 <xTaskCheckForTimeOut>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d124      	bne.n	8004a84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3c:	f000 faa2 	bl	8004f84 <prvIsQueueFull>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	3310      	adds	r3, #16
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fecc 	bl	80057ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a56:	f000 fa2d 	bl	8004eb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a5a:	f000 fcfb 	bl	8005454 <xTaskResumeAll>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f af7c 	bne.w	800495e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004a66:	4b0c      	ldr	r3, [pc, #48]	; (8004a98 <xQueueGenericSend+0x1f8>)
 8004a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	e772      	b.n	800495e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a7a:	f000 fa1b 	bl	8004eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a7e:	f000 fce9 	bl	8005454 <xTaskResumeAll>
 8004a82:	e76c      	b.n	800495e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a86:	f000 fa15 	bl	8004eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a8a:	f000 fce3 	bl	8005454 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3738      	adds	r7, #56	; 0x38
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	e000ed04 	.word	0xe000ed04

08004a9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b090      	sub	sp, #64	; 0x40
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d103      	bne.n	8004ad8 <xQueueGenericSendFromISR+0x3c>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <xQueueGenericSendFromISR+0x40>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <xQueueGenericSendFromISR+0x42>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d103      	bne.n	8004b06 <xQueueGenericSendFromISR+0x6a>
 8004afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <xQueueGenericSendFromISR+0x6e>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericSendFromISR+0x70>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	623b      	str	r3, [r7, #32]
}
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b26:	f001 feaf 	bl	8006888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b2a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	61fa      	str	r2, [r7, #28]
 8004b40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d302      	bcc.n	8004b58 <xQueueGenericSendFromISR+0xbc>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d12f      	bne.n	8004bb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004b6e:	f000 f911 	bl	8004d94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d112      	bne.n	8004ba2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d016      	beq.n	8004bb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	3324      	adds	r3, #36	; 0x24
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fe7f 	bl	800588c <xTaskRemoveFromEventList>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00e      	beq.n	8004bb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e007      	b.n	8004bb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ba2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	b25a      	sxtb	r2, r3
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004bb6:	e001      	b.n	8004bbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004bc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3740      	adds	r7, #64	; 0x40
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <xQueueReceive+0x30>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	623b      	str	r3, [r7, #32]
}
 8004c00:	bf00      	nop
 8004c02:	e7fe      	b.n	8004c02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d103      	bne.n	8004c12 <xQueueReceive+0x3e>
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <xQueueReceive+0x42>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <xQueueReceive+0x44>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <xQueueReceive+0x5e>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	61fb      	str	r3, [r7, #28]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c32:	f000 ffed 	bl	8005c10 <xTaskGetSchedulerState>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <xQueueReceive+0x6e>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <xQueueReceive+0x72>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e000      	b.n	8004c48 <xQueueReceive+0x74>
 8004c46:	2300      	movs	r3, #0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xQueueReceive+0x8e>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	61bb      	str	r3, [r7, #24]
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c62:	f001 fd2f 	bl	80066c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d01f      	beq.n	8004cb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c76:	f000 f8f7 	bl	8004e68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	1e5a      	subs	r2, r3, #1
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00f      	beq.n	8004caa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	3310      	adds	r3, #16
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fdfc 	bl	800588c <xTaskRemoveFromEventList>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c9a:	4b3d      	ldr	r3, [pc, #244]	; (8004d90 <xQueueReceive+0x1bc>)
 8004c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	f3bf 8f4f 	dsb	sy
 8004ca6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004caa:	f001 fd3b 	bl	8006724 <vPortExitCritical>
				return pdPASS;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e069      	b.n	8004d86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cb8:	f001 fd34 	bl	8006724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e062      	b.n	8004d86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d106      	bne.n	8004cd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc6:	f107 0310 	add.w	r3, r7, #16
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fe42 	bl	8005954 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd4:	f001 fd26 	bl	8006724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd8:	f000 fbae 	bl	8005438 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cdc:	f001 fcf2 	bl	80066c4 <vPortEnterCritical>
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d103      	bne.n	8004cf6 <xQueueReceive+0x122>
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfc:	b25b      	sxtb	r3, r3
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d103      	bne.n	8004d0c <xQueueReceive+0x138>
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d0c:	f001 fd0a 	bl	8006724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d10:	1d3a      	adds	r2, r7, #4
 8004d12:	f107 0310 	add.w	r3, r7, #16
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fe31 	bl	8005980 <xTaskCheckForTimeOut>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d123      	bne.n	8004d6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d26:	f000 f917 	bl	8004f58 <prvIsQueueEmpty>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d017      	beq.n	8004d60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	3324      	adds	r3, #36	; 0x24
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 fd57 	bl	80057ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d40:	f000 f8b8 	bl	8004eb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d44:	f000 fb86 	bl	8005454 <xTaskResumeAll>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d189      	bne.n	8004c62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004d4e:	4b10      	ldr	r3, [pc, #64]	; (8004d90 <xQueueReceive+0x1bc>)
 8004d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	e780      	b.n	8004c62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d62:	f000 f8a7 	bl	8004eb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d66:	f000 fb75 	bl	8005454 <xTaskResumeAll>
 8004d6a:	e77a      	b.n	8004c62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d6e:	f000 f8a1 	bl	8004eb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d72:	f000 fb6f 	bl	8005454 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d78:	f000 f8ee 	bl	8004f58 <prvIsQueueEmpty>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f43f af6f 	beq.w	8004c62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3730      	adds	r7, #48	; 0x30
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d14d      	bne.n	8004e56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 ff44 	bl	8005c4c <xTaskPriorityDisinherit>
 8004dc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	e043      	b.n	8004e56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d119      	bne.n	8004e08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6858      	ldr	r0, [r3, #4]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	f001 fe74 	bl	8006acc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	441a      	add	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d32b      	bcc.n	8004e56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	e026      	b.n	8004e56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68d8      	ldr	r0, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	461a      	mov	r2, r3
 8004e12:	68b9      	ldr	r1, [r7, #8]
 8004e14:	f001 fe5a 	bl	8006acc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	425b      	negs	r3, r3
 8004e22:	441a      	add	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d207      	bcs.n	8004e44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	425b      	negs	r3, r3
 8004e3e:	441a      	add	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d105      	bne.n	8004e56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	3b01      	subs	r3, #1
 8004e54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004e5e:	697b      	ldr	r3, [r7, #20]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d018      	beq.n	8004eac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	441a      	add	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68da      	ldr	r2, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d303      	bcc.n	8004e9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68d9      	ldr	r1, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6838      	ldr	r0, [r7, #0]
 8004ea8:	f001 fe10 	bl	8006acc <memcpy>
	}
}
 8004eac:	bf00      	nop
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ebc:	f001 fc02 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ec6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec8:	e011      	b.n	8004eee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d012      	beq.n	8004ef8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3324      	adds	r3, #36	; 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fcd8 	bl	800588c <xTaskRemoveFromEventList>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004ee2:	f000 fdaf 	bl	8005a44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	dce9      	bgt.n	8004eca <prvUnlockQueue+0x16>
 8004ef6:	e000      	b.n	8004efa <prvUnlockQueue+0x46>
					break;
 8004ef8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	22ff      	movs	r2, #255	; 0xff
 8004efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004f02:	f001 fc0f 	bl	8006724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004f06:	f001 fbdd 	bl	80066c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f12:	e011      	b.n	8004f38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d012      	beq.n	8004f42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3310      	adds	r3, #16
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fcb3 	bl	800588c <xTaskRemoveFromEventList>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f2c:	f000 fd8a 	bl	8005a44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	dce9      	bgt.n	8004f14 <prvUnlockQueue+0x60>
 8004f40:	e000      	b.n	8004f44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	22ff      	movs	r2, #255	; 0xff
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004f4c:	f001 fbea 	bl	8006724 <vPortExitCritical>
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f60:	f001 fbb0 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e001      	b.n	8004f76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f76:	f001 fbd5 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f8c:	f001 fb9a 	bl	80066c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d102      	bne.n	8004fa2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	e001      	b.n	8004fa6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004fa6:	f001 fbbd 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8004faa:	68fb      	ldr	r3, [r7, #12]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	e014      	b.n	8004fee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fc4:	4a0f      	ldr	r2, [pc, #60]	; (8005004 <vQueueAddToRegistry+0x50>)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fd0:	490c      	ldr	r1, [pc, #48]	; (8005004 <vQueueAddToRegistry+0x50>)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fda:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <vQueueAddToRegistry+0x50>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fe6:	e006      	b.n	8004ff6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	3301      	adds	r3, #1
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b07      	cmp	r3, #7
 8004ff2:	d9e7      	bls.n	8004fc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	20001074 	.word	0x20001074

08005008 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005018:	f001 fb54 	bl	80066c4 <vPortEnterCritical>
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005022:	b25b      	sxtb	r3, r3
 8005024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005028:	d103      	bne.n	8005032 <vQueueWaitForMessageRestricted+0x2a>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005038:	b25b      	sxtb	r3, r3
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d103      	bne.n	8005048 <vQueueWaitForMessageRestricted+0x40>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005048:	f001 fb6c 	bl	8006724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d106      	bne.n	8005062 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3324      	adds	r3, #36	; 0x24
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	68b9      	ldr	r1, [r7, #8]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fbe9 	bl	8005834 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005062:	6978      	ldr	r0, [r7, #20]
 8005064:	f7ff ff26 	bl	8004eb4 <prvUnlockQueue>
	}
 8005068:	bf00      	nop
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08e      	sub	sp, #56	; 0x38
 8005074:	af04      	add	r7, sp, #16
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800507e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10a      	bne.n	800509a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	623b      	str	r3, [r7, #32]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	61fb      	str	r3, [r7, #28]
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050b6:	23bc      	movs	r3, #188	; 0xbc
 80050b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2bbc      	cmp	r3, #188	; 0xbc
 80050be:	d00a      	beq.n	80050d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	61bb      	str	r3, [r7, #24]
}
 80050d2:	bf00      	nop
 80050d4:	e7fe      	b.n	80050d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01e      	beq.n	800511c <xTaskCreateStatic+0xac>
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050f6:	2300      	movs	r3, #0
 80050f8:	9303      	str	r3, [sp, #12]
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	9302      	str	r3, [sp, #8]
 80050fe:	f107 0314 	add.w	r3, r7, #20
 8005102:	9301      	str	r3, [sp, #4]
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f80c 	bl	800512c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005116:	f000 f8af 	bl	8005278 <prvAddNewTaskToReadyList>
 800511a:	e001      	b.n	8005120 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005120:	697b      	ldr	r3, [r7, #20]
	}
 8005122:	4618      	mov	r0, r3
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	461a      	mov	r2, r3
 8005144:	21a5      	movs	r1, #165	; 0xa5
 8005146:	f001 fccf 	bl	8006ae8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800514a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005154:	3b01      	subs	r3, #1
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f023 0307 	bic.w	r3, r3, #7
 8005162:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <prvInitialiseNewTask+0x58>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	617b      	str	r3, [r7, #20]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01f      	beq.n	80051ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	e012      	b.n	80051b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	7819      	ldrb	r1, [r3, #0]
 8005198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	3334      	adds	r3, #52	; 0x34
 80051a0:	460a      	mov	r2, r1
 80051a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	3301      	adds	r3, #1
 80051b4:	61fb      	str	r3, [r7, #28]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b0f      	cmp	r3, #15
 80051ba:	d9e9      	bls.n	8005190 <prvInitialiseNewTask+0x64>
 80051bc:	e000      	b.n	80051c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80051be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c8:	e003      	b.n	80051d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	2b37      	cmp	r3, #55	; 0x37
 80051d6:	d901      	bls.n	80051dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051d8:	2337      	movs	r3, #55	; 0x37
 80051da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ea:	2200      	movs	r2, #0
 80051ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	3304      	adds	r3, #4
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff f9bc 	bl	8004570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	3318      	adds	r3, #24
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff f9b7 	bl	8004570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	2200      	movs	r2, #0
 8005224:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	3354      	adds	r3, #84	; 0x54
 800522c:	2260      	movs	r2, #96	; 0x60
 800522e:	2100      	movs	r1, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f001 fc59 	bl	8006ae8 <memset>
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	4a0c      	ldr	r2, [pc, #48]	; (800526c <prvInitialiseNewTask+0x140>)
 800523a:	659a      	str	r2, [r3, #88]	; 0x58
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	4a0c      	ldr	r2, [pc, #48]	; (8005270 <prvInitialiseNewTask+0x144>)
 8005240:	65da      	str	r2, [r3, #92]	; 0x5c
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <prvInitialiseNewTask+0x148>)
 8005246:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	69b8      	ldr	r0, [r7, #24]
 800524e:	f001 f90d 	bl	800646c <pxPortInitialiseStack>
 8005252:	4602      	mov	r2, r0
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005262:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005264:	bf00      	nop
 8005266:	3720      	adds	r7, #32
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	08006ce4 	.word	0x08006ce4
 8005270:	08006d04 	.word	0x08006d04
 8005274:	08006cc4 	.word	0x08006cc4

08005278 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005280:	f001 fa20 	bl	80066c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005284:	4b2d      	ldr	r3, [pc, #180]	; (800533c <prvAddNewTaskToReadyList+0xc4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a2c      	ldr	r2, [pc, #176]	; (800533c <prvAddNewTaskToReadyList+0xc4>)
 800528c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005296:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800529c:	4b27      	ldr	r3, [pc, #156]	; (800533c <prvAddNewTaskToReadyList+0xc4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d110      	bne.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052a4:	f000 fbf2 	bl	8005a8c <prvInitialiseTaskLists>
 80052a8:	e00d      	b.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052aa:	4b26      	ldr	r3, [pc, #152]	; (8005344 <prvAddNewTaskToReadyList+0xcc>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d802      	bhi.n	80052c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052c0:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052c6:	4b20      	ldr	r3, [pc, #128]	; (8005348 <prvAddNewTaskToReadyList+0xd0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <prvAddNewTaskToReadyList+0xd0>)
 80052ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <prvAddNewTaskToReadyList+0xd0>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	4b1b      	ldr	r3, [pc, #108]	; (800534c <prvAddNewTaskToReadyList+0xd4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d903      	bls.n	80052ec <prvAddNewTaskToReadyList+0x74>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <prvAddNewTaskToReadyList+0xd4>)
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4a15      	ldr	r2, [pc, #84]	; (8005350 <prvAddNewTaskToReadyList+0xd8>)
 80052fa:	441a      	add	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f7ff f941 	bl	800458a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005308:	f001 fa0c 	bl	8006724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800530c:	4b0d      	ldr	r3, [pc, #52]	; (8005344 <prvAddNewTaskToReadyList+0xcc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <prvAddNewTaskToReadyList+0xc8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	429a      	cmp	r2, r3
 8005320:	d207      	bcs.n	8005332 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <prvAddNewTaskToReadyList+0xdc>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20001588 	.word	0x20001588
 8005340:	200010b4 	.word	0x200010b4
 8005344:	20001594 	.word	0x20001594
 8005348:	200015a4 	.word	0x200015a4
 800534c:	20001590 	.word	0x20001590
 8005350:	200010b8 	.word	0x200010b8
 8005354:	e000ed04 	.word	0xe000ed04

08005358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	; 0x28
 800535c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005366:	463a      	mov	r2, r7
 8005368:	1d39      	adds	r1, r7, #4
 800536a:	f107 0308 	add.w	r3, r7, #8
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff f8aa 	bl	80044c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	9202      	str	r2, [sp, #8]
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	2300      	movs	r3, #0
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	2300      	movs	r3, #0
 8005384:	460a      	mov	r2, r1
 8005386:	4924      	ldr	r1, [pc, #144]	; (8005418 <vTaskStartScheduler+0xc0>)
 8005388:	4824      	ldr	r0, [pc, #144]	; (800541c <vTaskStartScheduler+0xc4>)
 800538a:	f7ff fe71 	bl	8005070 <xTaskCreateStatic>
 800538e:	4603      	mov	r3, r0
 8005390:	4a23      	ldr	r2, [pc, #140]	; (8005420 <vTaskStartScheduler+0xc8>)
 8005392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005394:	4b22      	ldr	r3, [pc, #136]	; (8005420 <vTaskStartScheduler+0xc8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800539c:	2301      	movs	r3, #1
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	e001      	b.n	80053a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d102      	bne.n	80053b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80053ac:	f000 fd10 	bl	8005dd0 <xTimerCreateTimerTask>
 80053b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d11b      	bne.n	80053f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	613b      	str	r3, [r7, #16]
}
 80053ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053cc:	4b15      	ldr	r3, [pc, #84]	; (8005424 <vTaskStartScheduler+0xcc>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3354      	adds	r3, #84	; 0x54
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <vTaskStartScheduler+0xd0>)
 80053d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <vTaskStartScheduler+0xd4>)
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295
 80053dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <vTaskStartScheduler+0xd8>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053e4:	4b13      	ldr	r3, [pc, #76]	; (8005434 <vTaskStartScheduler+0xdc>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053ea:	f001 f8c9 	bl	8006580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053ee:	e00e      	b.n	800540e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d10a      	bne.n	800540e <vTaskStartScheduler+0xb6>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	60fb      	str	r3, [r7, #12]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <vTaskStartScheduler+0xb4>
}
 800540e:	bf00      	nop
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	08006c94 	.word	0x08006c94
 800541c:	08005a5d 	.word	0x08005a5d
 8005420:	200015ac 	.word	0x200015ac
 8005424:	200010b4 	.word	0x200010b4
 8005428:	20000010 	.word	0x20000010
 800542c:	200015a8 	.word	0x200015a8
 8005430:	20001594 	.word	0x20001594
 8005434:	2000158c 	.word	0x2000158c

08005438 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800543c:	4b04      	ldr	r3, [pc, #16]	; (8005450 <vTaskSuspendAll+0x18>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	4a03      	ldr	r2, [pc, #12]	; (8005450 <vTaskSuspendAll+0x18>)
 8005444:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005446:	bf00      	nop
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	200015b0 	.word	0x200015b0

08005454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800545e:	2300      	movs	r3, #0
 8005460:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005462:	4b42      	ldr	r3, [pc, #264]	; (800556c <xTaskResumeAll+0x118>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10a      	bne.n	8005480 <xTaskResumeAll+0x2c>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	603b      	str	r3, [r7, #0]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005480:	f001 f920 	bl	80066c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005484:	4b39      	ldr	r3, [pc, #228]	; (800556c <xTaskResumeAll+0x118>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3b01      	subs	r3, #1
 800548a:	4a38      	ldr	r2, [pc, #224]	; (800556c <xTaskResumeAll+0x118>)
 800548c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548e:	4b37      	ldr	r3, [pc, #220]	; (800556c <xTaskResumeAll+0x118>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d162      	bne.n	800555c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005496:	4b36      	ldr	r3, [pc, #216]	; (8005570 <xTaskResumeAll+0x11c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d05e      	beq.n	800555c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800549e:	e02f      	b.n	8005500 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a0:	4b34      	ldr	r3, [pc, #208]	; (8005574 <xTaskResumeAll+0x120>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3318      	adds	r3, #24
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff f8c9 	bl	8004644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7ff f8c4 	bl	8004644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c0:	4b2d      	ldr	r3, [pc, #180]	; (8005578 <xTaskResumeAll+0x124>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d903      	bls.n	80054d0 <xTaskResumeAll+0x7c>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <xTaskResumeAll+0x124>)
 80054ce:	6013      	str	r3, [r2, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4a27      	ldr	r2, [pc, #156]	; (800557c <xTaskResumeAll+0x128>)
 80054de:	441a      	add	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4619      	mov	r1, r3
 80054e6:	4610      	mov	r0, r2
 80054e8:	f7ff f84f 	bl	800458a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f0:	4b23      	ldr	r3, [pc, #140]	; (8005580 <xTaskResumeAll+0x12c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80054fa:	4b22      	ldr	r3, [pc, #136]	; (8005584 <xTaskResumeAll+0x130>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005500:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <xTaskResumeAll+0x120>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1cb      	bne.n	80054a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800550e:	f000 fb5f 	bl	8005bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <xTaskResumeAll+0x134>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800551e:	f000 f847 	bl	80055b0 <xTaskIncrementTick>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005528:	4b16      	ldr	r3, [pc, #88]	; (8005584 <xTaskResumeAll+0x130>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3b01      	subs	r3, #1
 8005532:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f1      	bne.n	800551e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800553a:	4b13      	ldr	r3, [pc, #76]	; (8005588 <xTaskResumeAll+0x134>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005540:	4b10      	ldr	r3, [pc, #64]	; (8005584 <xTaskResumeAll+0x130>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005548:	2301      	movs	r3, #1
 800554a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800554c:	4b0f      	ldr	r3, [pc, #60]	; (800558c <xTaskResumeAll+0x138>)
 800554e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f3bf 8f4f 	dsb	sy
 8005558:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800555c:	f001 f8e2 	bl	8006724 <vPortExitCritical>

	return xAlreadyYielded;
 8005560:	68bb      	ldr	r3, [r7, #8]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	200015b0 	.word	0x200015b0
 8005570:	20001588 	.word	0x20001588
 8005574:	20001548 	.word	0x20001548
 8005578:	20001590 	.word	0x20001590
 800557c:	200010b8 	.word	0x200010b8
 8005580:	200010b4 	.word	0x200010b4
 8005584:	2000159c 	.word	0x2000159c
 8005588:	20001598 	.word	0x20001598
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <xTaskGetTickCount+0x1c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800559c:	687b      	ldr	r3, [r7, #4]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	2000158c 	.word	0x2000158c

080055b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ba:	4b4f      	ldr	r3, [pc, #316]	; (80056f8 <xTaskIncrementTick+0x148>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 808f 	bne.w	80056e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055c4:	4b4d      	ldr	r3, [pc, #308]	; (80056fc <xTaskIncrementTick+0x14c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055cc:	4a4b      	ldr	r2, [pc, #300]	; (80056fc <xTaskIncrementTick+0x14c>)
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d120      	bne.n	800561a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80055d8:	4b49      	ldr	r3, [pc, #292]	; (8005700 <xTaskIncrementTick+0x150>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	603b      	str	r3, [r7, #0]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <xTaskIncrementTick+0x46>
 80055f8:	4b41      	ldr	r3, [pc, #260]	; (8005700 <xTaskIncrementTick+0x150>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	4b41      	ldr	r3, [pc, #260]	; (8005704 <xTaskIncrementTick+0x154>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a3f      	ldr	r2, [pc, #252]	; (8005700 <xTaskIncrementTick+0x150>)
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4a3f      	ldr	r2, [pc, #252]	; (8005704 <xTaskIncrementTick+0x154>)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4b3e      	ldr	r3, [pc, #248]	; (8005708 <xTaskIncrementTick+0x158>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3301      	adds	r3, #1
 8005612:	4a3d      	ldr	r2, [pc, #244]	; (8005708 <xTaskIncrementTick+0x158>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	f000 fadb 	bl	8005bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800561a:	4b3c      	ldr	r3, [pc, #240]	; (800570c <xTaskIncrementTick+0x15c>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	429a      	cmp	r2, r3
 8005622:	d349      	bcc.n	80056b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005624:	4b36      	ldr	r3, [pc, #216]	; (8005700 <xTaskIncrementTick+0x150>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800562e:	4b37      	ldr	r3, [pc, #220]	; (800570c <xTaskIncrementTick+0x15c>)
 8005630:	f04f 32ff 	mov.w	r2, #4294967295
 8005634:	601a      	str	r2, [r3, #0]
					break;
 8005636:	e03f      	b.n	80056b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005638:	4b31      	ldr	r3, [pc, #196]	; (8005700 <xTaskIncrementTick+0x150>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d203      	bcs.n	8005658 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005650:	4a2e      	ldr	r2, [pc, #184]	; (800570c <xTaskIncrementTick+0x15c>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005656:	e02f      	b.n	80056b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3304      	adds	r3, #4
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe fff1 	bl	8004644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	3318      	adds	r3, #24
 800566e:	4618      	mov	r0, r3
 8005670:	f7fe ffe8 	bl	8004644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005678:	4b25      	ldr	r3, [pc, #148]	; (8005710 <xTaskIncrementTick+0x160>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d903      	bls.n	8005688 <xTaskIncrementTick+0xd8>
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	4a22      	ldr	r2, [pc, #136]	; (8005710 <xTaskIncrementTick+0x160>)
 8005686:	6013      	str	r3, [r2, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <xTaskIncrementTick+0x164>)
 8005696:	441a      	add	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	3304      	adds	r3, #4
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7fe ff73 	bl	800458a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a8:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <xTaskIncrementTick+0x168>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d3b8      	bcc.n	8005624 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80056b2:	2301      	movs	r3, #1
 80056b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b6:	e7b5      	b.n	8005624 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056b8:	4b17      	ldr	r3, [pc, #92]	; (8005718 <xTaskIncrementTick+0x168>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	4915      	ldr	r1, [pc, #84]	; (8005714 <xTaskIncrementTick+0x164>)
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d901      	bls.n	80056d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056d4:	4b11      	ldr	r3, [pc, #68]	; (800571c <xTaskIncrementTick+0x16c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e004      	b.n	80056ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056e2:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <xTaskIncrementTick+0x170>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3301      	adds	r3, #1
 80056e8:	4a0d      	ldr	r2, [pc, #52]	; (8005720 <xTaskIncrementTick+0x170>)
 80056ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056ec:	697b      	ldr	r3, [r7, #20]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200015b0 	.word	0x200015b0
 80056fc:	2000158c 	.word	0x2000158c
 8005700:	20001540 	.word	0x20001540
 8005704:	20001544 	.word	0x20001544
 8005708:	200015a0 	.word	0x200015a0
 800570c:	200015a8 	.word	0x200015a8
 8005710:	20001590 	.word	0x20001590
 8005714:	200010b8 	.word	0x200010b8
 8005718:	200010b4 	.word	0x200010b4
 800571c:	2000159c 	.word	0x2000159c
 8005720:	20001598 	.word	0x20001598

08005724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800572a:	4b2a      	ldr	r3, [pc, #168]	; (80057d4 <vTaskSwitchContext+0xb0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005732:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <vTaskSwitchContext+0xb4>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005738:	e046      	b.n	80057c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800573a:	4b27      	ldr	r3, [pc, #156]	; (80057d8 <vTaskSwitchContext+0xb4>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005740:	4b26      	ldr	r3, [pc, #152]	; (80057dc <vTaskSwitchContext+0xb8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	e010      	b.n	800576a <vTaskSwitchContext+0x46>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10a      	bne.n	8005764 <vTaskSwitchContext+0x40>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	607b      	str	r3, [r7, #4]
}
 8005760:	bf00      	nop
 8005762:	e7fe      	b.n	8005762 <vTaskSwitchContext+0x3e>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3b01      	subs	r3, #1
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	491d      	ldr	r1, [pc, #116]	; (80057e0 <vTaskSwitchContext+0xbc>)
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0e4      	beq.n	8005748 <vTaskSwitchContext+0x24>
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <vTaskSwitchContext+0xbc>)
 800578a:	4413      	add	r3, r2
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	3308      	adds	r3, #8
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d104      	bne.n	80057ae <vTaskSwitchContext+0x8a>
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <vTaskSwitchContext+0xc0>)
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	4a08      	ldr	r2, [pc, #32]	; (80057dc <vTaskSwitchContext+0xb8>)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057be:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <vTaskSwitchContext+0xc0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3354      	adds	r3, #84	; 0x54
 80057c4:	4a08      	ldr	r2, [pc, #32]	; (80057e8 <vTaskSwitchContext+0xc4>)
 80057c6:	6013      	str	r3, [r2, #0]
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr
 80057d4:	200015b0 	.word	0x200015b0
 80057d8:	2000159c 	.word	0x2000159c
 80057dc:	20001590 	.word	0x20001590
 80057e0:	200010b8 	.word	0x200010b8
 80057e4:	200010b4 	.word	0x200010b4
 80057e8:	20000010 	.word	0x20000010

080057ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	60fb      	str	r3, [r7, #12]
}
 800580e:	bf00      	nop
 8005810:	e7fe      	b.n	8005810 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <vTaskPlaceOnEventList+0x44>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3318      	adds	r3, #24
 8005818:	4619      	mov	r1, r3
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7fe fed9 	bl	80045d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005820:	2101      	movs	r1, #1
 8005822:	6838      	ldr	r0, [r7, #0]
 8005824:	f000 fa80 	bl	8005d28 <prvAddCurrentTaskToDelayedList>
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	200010b4 	.word	0x200010b4

08005834 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	617b      	str	r3, [r7, #20]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800585c:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <vTaskPlaceOnEventListRestricted+0x54>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3318      	adds	r3, #24
 8005862:	4619      	mov	r1, r3
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7fe fe90 	bl	800458a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	68b8      	ldr	r0, [r7, #8]
 800587a:	f000 fa55 	bl	8005d28 <prvAddCurrentTaskToDelayedList>
	}
 800587e:	bf00      	nop
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	200010b4 	.word	0x200010b4

0800588c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	60fb      	str	r3, [r7, #12]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3318      	adds	r3, #24
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fe fec1 	bl	8004644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b1e      	ldr	r3, [pc, #120]	; (800593c <xTaskRemoveFromEventList+0xb0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d11d      	bne.n	8005906 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe feb8 	bl	8004644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4b19      	ldr	r3, [pc, #100]	; (8005940 <xTaskRemoveFromEventList+0xb4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d903      	bls.n	80058e8 <xTaskRemoveFromEventList+0x5c>
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a16      	ldr	r2, [pc, #88]	; (8005940 <xTaskRemoveFromEventList+0xb4>)
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <xTaskRemoveFromEventList+0xb8>)
 80058f6:	441a      	add	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7fe fe43 	bl	800458a <vListInsertEnd>
 8005904:	e005      	b.n	8005912 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3318      	adds	r3, #24
 800590a:	4619      	mov	r1, r3
 800590c:	480e      	ldr	r0, [pc, #56]	; (8005948 <xTaskRemoveFromEventList+0xbc>)
 800590e:	f7fe fe3c 	bl	800458a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	4b0d      	ldr	r3, [pc, #52]	; (800594c <xTaskRemoveFromEventList+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	429a      	cmp	r2, r3
 800591e:	d905      	bls.n	800592c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <xTaskRemoveFromEventList+0xc4>)
 8005926:	2201      	movs	r2, #1
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	e001      	b.n	8005930 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005930:	697b      	ldr	r3, [r7, #20]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	200015b0 	.word	0x200015b0
 8005940:	20001590 	.word	0x20001590
 8005944:	200010b8 	.word	0x200010b8
 8005948:	20001548 	.word	0x20001548
 800594c:	200010b4 	.word	0x200010b4
 8005950:	2000159c 	.word	0x2000159c

08005954 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <vTaskInternalSetTimeOutState+0x24>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005964:	4b05      	ldr	r3, [pc, #20]	; (800597c <vTaskInternalSetTimeOutState+0x28>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	200015a0 	.word	0x200015a0
 800597c:	2000158c 	.word	0x2000158c

08005980 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10a      	bne.n	80059c2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	60fb      	str	r3, [r7, #12]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80059c2:	f000 fe7f 	bl	80066c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059c6:	4b1d      	ldr	r3, [pc, #116]	; (8005a3c <xTaskCheckForTimeOut+0xbc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d102      	bne.n	80059e6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
 80059e4:	e023      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b15      	ldr	r3, [pc, #84]	; (8005a40 <xTaskCheckForTimeOut+0xc0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d007      	beq.n	8005a02 <xTaskCheckForTimeOut+0x82>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d302      	bcc.n	8005a02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e015      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d20b      	bcs.n	8005a24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1ad2      	subs	r2, r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff9b 	bl	8005954 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	e004      	b.n	8005a2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a2e:	f000 fe79 	bl	8006724 <vPortExitCritical>

	return xReturn;
 8005a32:	69fb      	ldr	r3, [r7, #28]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3720      	adds	r7, #32
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	2000158c 	.word	0x2000158c
 8005a40:	200015a0 	.word	0x200015a0

08005a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a48:	4b03      	ldr	r3, [pc, #12]	; (8005a58 <vTaskMissedYield+0x14>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	2000159c 	.word	0x2000159c

08005a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a64:	f000 f852 	bl	8005b0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <prvIdleTask+0x28>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d9f9      	bls.n	8005a64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a70:	4b05      	ldr	r3, [pc, #20]	; (8005a88 <prvIdleTask+0x2c>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a80:	e7f0      	b.n	8005a64 <prvIdleTask+0x8>
 8005a82:	bf00      	nop
 8005a84:	200010b8 	.word	0x200010b8
 8005a88:	e000ed04 	.word	0xe000ed04

08005a8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	e00c      	b.n	8005ab2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4a12      	ldr	r2, [pc, #72]	; (8005aec <prvInitialiseTaskLists+0x60>)
 8005aa4:	4413      	add	r3, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fd42 	bl	8004530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	607b      	str	r3, [r7, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b37      	cmp	r3, #55	; 0x37
 8005ab6:	d9ef      	bls.n	8005a98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ab8:	480d      	ldr	r0, [pc, #52]	; (8005af0 <prvInitialiseTaskLists+0x64>)
 8005aba:	f7fe fd39 	bl	8004530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005abe:	480d      	ldr	r0, [pc, #52]	; (8005af4 <prvInitialiseTaskLists+0x68>)
 8005ac0:	f7fe fd36 	bl	8004530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ac4:	480c      	ldr	r0, [pc, #48]	; (8005af8 <prvInitialiseTaskLists+0x6c>)
 8005ac6:	f7fe fd33 	bl	8004530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005aca:	480c      	ldr	r0, [pc, #48]	; (8005afc <prvInitialiseTaskLists+0x70>)
 8005acc:	f7fe fd30 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ad0:	480b      	ldr	r0, [pc, #44]	; (8005b00 <prvInitialiseTaskLists+0x74>)
 8005ad2:	f7fe fd2d 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <prvInitialiseTaskLists+0x78>)
 8005ad8:	4a05      	ldr	r2, [pc, #20]	; (8005af0 <prvInitialiseTaskLists+0x64>)
 8005ada:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <prvInitialiseTaskLists+0x7c>)
 8005ade:	4a05      	ldr	r2, [pc, #20]	; (8005af4 <prvInitialiseTaskLists+0x68>)
 8005ae0:	601a      	str	r2, [r3, #0]
}
 8005ae2:	bf00      	nop
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	200010b8 	.word	0x200010b8
 8005af0:	20001518 	.word	0x20001518
 8005af4:	2000152c 	.word	0x2000152c
 8005af8:	20001548 	.word	0x20001548
 8005afc:	2000155c 	.word	0x2000155c
 8005b00:	20001574 	.word	0x20001574
 8005b04:	20001540 	.word	0x20001540
 8005b08:	20001544 	.word	0x20001544

08005b0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b12:	e019      	b.n	8005b48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b14:	f000 fdd6 	bl	80066c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <prvCheckTasksWaitingTermination+0x50>)
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3304      	adds	r3, #4
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fd8d 	bl	8004644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <prvCheckTasksWaitingTermination+0x54>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	4a0b      	ldr	r2, [pc, #44]	; (8005b60 <prvCheckTasksWaitingTermination+0x54>)
 8005b32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b3e:	f000 fdf1 	bl	8006724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f810 	bl	8005b68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <prvCheckTasksWaitingTermination+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e1      	bne.n	8005b14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	2000155c 	.word	0x2000155c
 8005b60:	20001588 	.word	0x20001588
 8005b64:	20001570 	.word	0x20001570

08005b68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3354      	adds	r3, #84	; 0x54
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 ffcd 	bl	8006b14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d108      	bne.n	8005b96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 febd 	bl	8006908 <vPortFree>
				vPortFree( pxTCB );
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 feba 	bl	8006908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b94:	e018      	b.n	8005bc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d103      	bne.n	8005ba8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 feb1 	bl	8006908 <vPortFree>
	}
 8005ba6:	e00f      	b.n	8005bc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d00a      	beq.n	8005bc8 <prvDeleteTCB+0x60>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	60fb      	str	r3, [r7, #12]
}
 8005bc4:	bf00      	nop
 8005bc6:	e7fe      	b.n	8005bc6 <prvDeleteTCB+0x5e>
	}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <prvResetNextTaskUnblockTime+0x38>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <prvResetNextTaskUnblockTime+0x3c>)
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005be8:	e008      	b.n	8005bfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <prvResetNextTaskUnblockTime+0x38>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <prvResetNextTaskUnblockTime+0x3c>)
 8005bfa:	6013      	str	r3, [r2, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20001540 	.word	0x20001540
 8005c0c:	200015a8 	.word	0x200015a8

08005c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <xTaskGetSchedulerState+0x34>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e008      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <xTaskGetSchedulerState+0x38>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e001      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c36:	687b      	ldr	r3, [r7, #4]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20001594 	.word	0x20001594
 8005c48:	200015b0 	.word	0x200015b0

08005c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d056      	beq.n	8005d10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c62:	4b2e      	ldr	r3, [pc, #184]	; (8005d1c <xTaskPriorityDisinherit+0xd0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d00a      	beq.n	8005c82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	60bb      	str	r3, [r7, #8]
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca4:	1e5a      	subs	r2, r3, #1
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d02c      	beq.n	8005d10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d128      	bne.n	8005d10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fcbe 	bl	8004644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <xTaskPriorityDisinherit+0xd4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d903      	bls.n	8005cf0 <xTaskPriorityDisinherit+0xa4>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	4a0c      	ldr	r2, [pc, #48]	; (8005d20 <xTaskPriorityDisinherit+0xd4>)
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <xTaskPriorityDisinherit+0xd8>)
 8005cfe:	441a      	add	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7fe fc3f 	bl	800458a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d10:	697b      	ldr	r3, [r7, #20]
	}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	200010b4 	.word	0x200010b4
 8005d20:	20001590 	.word	0x20001590
 8005d24:	200010b8 	.word	0x200010b8

08005d28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d32:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d38:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fe fc80 	bl	8004644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d10a      	bne.n	8005d62 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d007      	beq.n	8005d62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d52:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4819      	ldr	r0, [pc, #100]	; (8005dc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d5c:	f7fe fc15 	bl	800458a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d60:	e026      	b.n	8005db0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d6a:	4b14      	ldr	r3, [pc, #80]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d209      	bcs.n	8005d8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d7a:	4b12      	ldr	r3, [pc, #72]	; (8005dc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3304      	adds	r3, #4
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7fe fc23 	bl	80045d2 <vListInsert>
}
 8005d8c:	e010      	b.n	8005db0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d8e:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <prvAddCurrentTaskToDelayedList+0x94>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4610      	mov	r0, r2
 8005d9c:	f7fe fc19 	bl	80045d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005da0:	4b0a      	ldr	r3, [pc, #40]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d202      	bcs.n	8005db0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005daa:	4a08      	ldr	r2, [pc, #32]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6013      	str	r3, [r2, #0]
}
 8005db0:	bf00      	nop
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	2000158c 	.word	0x2000158c
 8005dbc:	200010b4 	.word	0x200010b4
 8005dc0:	20001574 	.word	0x20001574
 8005dc4:	20001544 	.word	0x20001544
 8005dc8:	20001540 	.word	0x20001540
 8005dcc:	200015a8 	.word	0x200015a8

08005dd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dda:	f000 fb07 	bl	80063ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005dde:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <xTimerCreateTimerTask+0x80>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d021      	beq.n	8005e2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dee:	1d3a      	adds	r2, r7, #4
 8005df0:	f107 0108 	add.w	r1, r7, #8
 8005df4:	f107 030c 	add.w	r3, r7, #12
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fb7f 	bl	80044fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	9202      	str	r2, [sp, #8]
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	2302      	movs	r3, #2
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	460a      	mov	r2, r1
 8005e10:	4910      	ldr	r1, [pc, #64]	; (8005e54 <xTimerCreateTimerTask+0x84>)
 8005e12:	4811      	ldr	r0, [pc, #68]	; (8005e58 <xTimerCreateTimerTask+0x88>)
 8005e14:	f7ff f92c 	bl	8005070 <xTaskCreateStatic>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4a10      	ldr	r2, [pc, #64]	; (8005e5c <xTimerCreateTimerTask+0x8c>)
 8005e1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <xTimerCreateTimerTask+0x8c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e26:	2301      	movs	r3, #1
 8005e28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	613b      	str	r3, [r7, #16]
}
 8005e42:	bf00      	nop
 8005e44:	e7fe      	b.n	8005e44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e46:	697b      	ldr	r3, [r7, #20]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	200015e4 	.word	0x200015e4
 8005e54:	08006c9c 	.word	0x08006c9c
 8005e58:	08005f95 	.word	0x08005f95
 8005e5c:	200015e8 	.word	0x200015e8

08005e60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08a      	sub	sp, #40	; 0x28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
 8005e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	623b      	str	r3, [r7, #32]
}
 8005e8a:	bf00      	nop
 8005e8c:	e7fe      	b.n	8005e8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d02a      	beq.n	8005eec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b05      	cmp	r3, #5
 8005ea6:	dc18      	bgt.n	8005eda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ea8:	f7ff feb2 	bl	8005c10 <xTaskGetSchedulerState>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d109      	bne.n	8005ec6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005eb2:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	f107 0110 	add.w	r1, r7, #16
 8005eba:	2300      	movs	r3, #0
 8005ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebe:	f7fe fcef 	bl	80048a0 <xQueueGenericSend>
 8005ec2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ec4:	e012      	b.n	8005eec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	f107 0110 	add.w	r1, r7, #16
 8005ece:	2300      	movs	r3, #0
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f7fe fce5 	bl	80048a0 <xQueueGenericSend>
 8005ed6:	6278      	str	r0, [r7, #36]	; 0x24
 8005ed8:	e008      	b.n	8005eec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <xTimerGenericCommand+0x98>)
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	f107 0110 	add.w	r1, r7, #16
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	f7fe fdd9 	bl	8004a9c <xQueueGenericSendFromISR>
 8005eea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200015e4 	.word	0x200015e4

08005efc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f06:	4b22      	ldr	r3, [pc, #136]	; (8005f90 <prvProcessExpiredTimer+0x94>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe fb95 	bl	8004644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f20:	f003 0304 	and.w	r3, r3, #4
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d022      	beq.n	8005f6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	18d1      	adds	r1, r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	6978      	ldr	r0, [r7, #20]
 8005f36:	f000 f8d1 	bl	80060dc <prvInsertTimerInActiveList>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01f      	beq.n	8005f80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f40:	2300      	movs	r3, #0
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	2300      	movs	r3, #0
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	2100      	movs	r1, #0
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f7ff ff88 	bl	8005e60 <xTimerGenericCommand>
 8005f50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d113      	bne.n	8005f80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	6978      	ldr	r0, [r7, #20]
 8005f86:	4798      	blx	r3
}
 8005f88:	bf00      	nop
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	200015dc 	.word	0x200015dc

08005f94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 f857 	bl	8006054 <prvGetNextExpireTime>
 8005fa6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4619      	mov	r1, r3
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f803 	bl	8005fb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fb2:	f000 f8d5 	bl	8006160 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fb6:	e7f1      	b.n	8005f9c <prvTimerTask+0x8>

08005fb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fc2:	f7ff fa39 	bl	8005438 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f866 	bl	800609c <prvSampleTimeNow>
 8005fd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d130      	bne.n	800603a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <prvProcessTimerOrBlockTask+0x3c>
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d806      	bhi.n	8005ff4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005fe6:	f7ff fa35 	bl	8005454 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff ff85 	bl	8005efc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ff2:	e024      	b.n	800603e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d008      	beq.n	800600c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ffa:	4b13      	ldr	r3, [pc, #76]	; (8006048 <prvProcessTimerOrBlockTask+0x90>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d101      	bne.n	8006008 <prvProcessTimerOrBlockTask+0x50>
 8006004:	2301      	movs	r3, #1
 8006006:	e000      	b.n	800600a <prvProcessTimerOrBlockTask+0x52>
 8006008:	2300      	movs	r3, #0
 800600a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800600c:	4b0f      	ldr	r3, [pc, #60]	; (800604c <prvProcessTimerOrBlockTask+0x94>)
 800600e:	6818      	ldr	r0, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	f7fe fff5 	bl	8005008 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800601e:	f7ff fa19 	bl	8005454 <xTaskResumeAll>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006028:	4b09      	ldr	r3, [pc, #36]	; (8006050 <prvProcessTimerOrBlockTask+0x98>)
 800602a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
}
 8006038:	e001      	b.n	800603e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800603a:	f7ff fa0b 	bl	8005454 <xTaskResumeAll>
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200015e0 	.word	0x200015e0
 800604c:	200015e4 	.word	0x200015e4
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800605c:	4b0e      	ldr	r3, [pc, #56]	; (8006098 <prvGetNextExpireTime+0x44>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <prvGetNextExpireTime+0x16>
 8006066:	2201      	movs	r2, #1
 8006068:	e000      	b.n	800606c <prvGetNextExpireTime+0x18>
 800606a:	2200      	movs	r2, #0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d105      	bne.n	8006084 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <prvGetNextExpireTime+0x44>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e001      	b.n	8006088 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006088:	68fb      	ldr	r3, [r7, #12]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	200015dc 	.word	0x200015dc

0800609c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060a4:	f7ff fa74 	bl	8005590 <xTaskGetTickCount>
 80060a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060aa:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <prvSampleTimeNow+0x3c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d205      	bcs.n	80060c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060b4:	f000 f936 	bl	8006324 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	e002      	b.n	80060c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060c6:	4a04      	ldr	r2, [pc, #16]	; (80060d8 <prvSampleTimeNow+0x3c>)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	200015ec 	.word	0x200015ec

080060dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d812      	bhi.n	8006128 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	1ad2      	subs	r2, r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	e01b      	b.n	800614e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006116:	4b10      	ldr	r3, [pc, #64]	; (8006158 <prvInsertTimerInActiveList+0x7c>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3304      	adds	r3, #4
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f7fe fa56 	bl	80045d2 <vListInsert>
 8006126:	e012      	b.n	800614e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	429a      	cmp	r2, r3
 800612e:	d206      	bcs.n	800613e <prvInsertTimerInActiveList+0x62>
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006138:	2301      	movs	r3, #1
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e007      	b.n	800614e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <prvInsertTimerInActiveList+0x80>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f7fe fa42 	bl	80045d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800614e:	697b      	ldr	r3, [r7, #20]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	200015e0 	.word	0x200015e0
 800615c:	200015dc 	.word	0x200015dc

08006160 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08e      	sub	sp, #56	; 0x38
 8006164:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006166:	e0ca      	b.n	80062fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	da18      	bge.n	80061a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800616e:	1d3b      	adds	r3, r7, #4
 8006170:	3304      	adds	r3, #4
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	61fb      	str	r3, [r7, #28]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006196:	6850      	ldr	r0, [r2, #4]
 8006198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800619a:	6892      	ldr	r2, [r2, #8]
 800619c:	4611      	mov	r1, r2
 800619e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f2c0 80aa 	blt.w	80062fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d004      	beq.n	80061be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fa43 	bl	8004644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061be:	463b      	mov	r3, r7
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7ff ff6b 	bl	800609c <prvSampleTimeNow>
 80061c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b09      	cmp	r3, #9
 80061cc:	f200 8097 	bhi.w	80062fe <prvProcessReceivedCommands+0x19e>
 80061d0:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <prvProcessReceivedCommands+0x78>)
 80061d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d6:	bf00      	nop
 80061d8:	08006201 	.word	0x08006201
 80061dc:	08006201 	.word	0x08006201
 80061e0:	08006201 	.word	0x08006201
 80061e4:	08006275 	.word	0x08006275
 80061e8:	08006289 	.word	0x08006289
 80061ec:	080062d3 	.word	0x080062d3
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006201 	.word	0x08006201
 80061f8:	08006275 	.word	0x08006275
 80061fc:	08006289 	.word	0x08006289
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	b2da      	uxtb	r2, r3
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	18d1      	adds	r1, r2, r3
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006220:	f7ff ff5c 	bl	80060dc <prvInsertTimerInActiveList>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d069      	beq.n	80062fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006230:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05e      	beq.n	80062fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	441a      	add	r2, r3
 8006248:	2300      	movs	r3, #0
 800624a:	9300      	str	r3, [sp, #0]
 800624c:	2300      	movs	r3, #0
 800624e:	2100      	movs	r1, #0
 8006250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006252:	f7ff fe05 	bl	8005e60 <xTimerGenericCommand>
 8006256:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d14f      	bne.n	80062fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	61bb      	str	r3, [r7, #24]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800627a:	f023 0301 	bic.w	r3, r3, #1
 800627e:	b2da      	uxtb	r2, r3
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006286:	e03a      	b.n	80062fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	b2da      	uxtb	r2, r3
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	617b      	str	r3, [r7, #20]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	18d1      	adds	r1, r2, r3
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062cc:	f7ff ff06 	bl	80060dc <prvInsertTimerInActiveList>
					break;
 80062d0:	e015      	b.n	80062fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d103      	bne.n	80062e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80062e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e2:	f000 fb11 	bl	8006908 <vPortFree>
 80062e6:	e00a      	b.n	80062fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062fa:	e000      	b.n	80062fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80062fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062fe:	4b08      	ldr	r3, [pc, #32]	; (8006320 <prvProcessReceivedCommands+0x1c0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	1d39      	adds	r1, r7, #4
 8006304:	2200      	movs	r2, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f7fe fc64 	bl	8004bd4 <xQueueReceive>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	f47f af2a 	bne.w	8006168 <prvProcessReceivedCommands+0x8>
	}
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	3730      	adds	r7, #48	; 0x30
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	200015e4 	.word	0x200015e4

08006324 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800632a:	e048      	b.n	80063be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800632c:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <prvSwitchTimerLists+0xc0>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006336:	4b2b      	ldr	r3, [pc, #172]	; (80063e4 <prvSwitchTimerLists+0xc0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3304      	adds	r3, #4
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe f97d 	bl	8004644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d02e      	beq.n	80063be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	699b      	ldr	r3, [r3, #24]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	429a      	cmp	r2, r3
 8006370:	d90e      	bls.n	8006390 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800637e:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <prvSwitchTimerLists+0xc0>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3304      	adds	r3, #4
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f7fe f922 	bl	80045d2 <vListInsert>
 800638e:	e016      	b.n	80063be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006390:	2300      	movs	r3, #0
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	2100      	movs	r1, #0
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff fd60 	bl	8005e60 <xTimerGenericCommand>
 80063a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10a      	bne.n	80063be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	603b      	str	r3, [r7, #0]
}
 80063ba:	bf00      	nop
 80063bc:	e7fe      	b.n	80063bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <prvSwitchTimerLists+0xc0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1b1      	bne.n	800632c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063c8:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <prvSwitchTimerLists+0xc0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <prvSwitchTimerLists+0xc4>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <prvSwitchTimerLists+0xc0>)
 80063d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063d6:	4a04      	ldr	r2, [pc, #16]	; (80063e8 <prvSwitchTimerLists+0xc4>)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	6013      	str	r3, [r2, #0]
}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	200015dc 	.word	0x200015dc
 80063e8:	200015e0 	.word	0x200015e0

080063ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80063f2:	f000 f967 	bl	80066c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80063f6:	4b15      	ldr	r3, [pc, #84]	; (800644c <prvCheckForValidListAndQueue+0x60>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d120      	bne.n	8006440 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80063fe:	4814      	ldr	r0, [pc, #80]	; (8006450 <prvCheckForValidListAndQueue+0x64>)
 8006400:	f7fe f896 	bl	8004530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006404:	4813      	ldr	r0, [pc, #76]	; (8006454 <prvCheckForValidListAndQueue+0x68>)
 8006406:	f7fe f893 	bl	8004530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800640a:	4b13      	ldr	r3, [pc, #76]	; (8006458 <prvCheckForValidListAndQueue+0x6c>)
 800640c:	4a10      	ldr	r2, [pc, #64]	; (8006450 <prvCheckForValidListAndQueue+0x64>)
 800640e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <prvCheckForValidListAndQueue+0x70>)
 8006412:	4a10      	ldr	r2, [pc, #64]	; (8006454 <prvCheckForValidListAndQueue+0x68>)
 8006414:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006416:	2300      	movs	r3, #0
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	4b11      	ldr	r3, [pc, #68]	; (8006460 <prvCheckForValidListAndQueue+0x74>)
 800641c:	4a11      	ldr	r2, [pc, #68]	; (8006464 <prvCheckForValidListAndQueue+0x78>)
 800641e:	2110      	movs	r1, #16
 8006420:	200a      	movs	r0, #10
 8006422:	f7fe f9a1 	bl	8004768 <xQueueGenericCreateStatic>
 8006426:	4603      	mov	r3, r0
 8006428:	4a08      	ldr	r2, [pc, #32]	; (800644c <prvCheckForValidListAndQueue+0x60>)
 800642a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <prvCheckForValidListAndQueue+0x60>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d005      	beq.n	8006440 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <prvCheckForValidListAndQueue+0x60>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	490b      	ldr	r1, [pc, #44]	; (8006468 <prvCheckForValidListAndQueue+0x7c>)
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fdba 	bl	8004fb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006440:	f000 f970 	bl	8006724 <vPortExitCritical>
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200015e4 	.word	0x200015e4
 8006450:	200015b4 	.word	0x200015b4
 8006454:	200015c8 	.word	0x200015c8
 8006458:	200015dc 	.word	0x200015dc
 800645c:	200015e0 	.word	0x200015e0
 8006460:	20001690 	.word	0x20001690
 8006464:	200015f0 	.word	0x200015f0
 8006468:	08006ca4 	.word	0x08006ca4

0800646c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3b04      	subs	r3, #4
 800647c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006484:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3b04      	subs	r3, #4
 800648a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f023 0201 	bic.w	r2, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3b04      	subs	r3, #4
 800649a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800649c:	4a0c      	ldr	r2, [pc, #48]	; (80064d0 <pxPortInitialiseStack+0x64>)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3b14      	subs	r3, #20
 80064a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3b04      	subs	r3, #4
 80064b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f06f 0202 	mvn.w	r2, #2
 80064ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3b20      	subs	r3, #32
 80064c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	080064d5 	.word	0x080064d5

080064d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064de:	4b12      	ldr	r3, [pc, #72]	; (8006528 <prvTaskExitError+0x54>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d00a      	beq.n	80064fe <prvTaskExitError+0x2a>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	60fb      	str	r3, [r7, #12]
}
 80064fa:	bf00      	nop
 80064fc:	e7fe      	b.n	80064fc <prvTaskExitError+0x28>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60bb      	str	r3, [r7, #8]
}
 8006510:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006512:	bf00      	nop
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0fc      	beq.n	8006514 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800651a:	bf00      	nop
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr
 8006528:	2000000c 	.word	0x2000000c
 800652c:	00000000 	.word	0x00000000

08006530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <pxCurrentTCBConst2>)
 8006532:	6819      	ldr	r1, [r3, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800653a:	f380 8809 	msr	PSP, r0
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f04f 0000 	mov.w	r0, #0
 8006546:	f380 8811 	msr	BASEPRI, r0
 800654a:	4770      	bx	lr
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst2>:
 8006550:	200010b4 	.word	0x200010b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006554:	bf00      	nop
 8006556:	bf00      	nop

08006558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006558:	4808      	ldr	r0, [pc, #32]	; (800657c <prvPortStartFirstTask+0x24>)
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	6800      	ldr	r0, [r0, #0]
 800655e:	f380 8808 	msr	MSP, r0
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8814 	msr	CONTROL, r0
 800656a:	b662      	cpsie	i
 800656c:	b661      	cpsie	f
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	df00      	svc	0
 8006578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800657a:	bf00      	nop
 800657c:	e000ed08 	.word	0xe000ed08

08006580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006586:	4b46      	ldr	r3, [pc, #280]	; (80066a0 <xPortStartScheduler+0x120>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a46      	ldr	r2, [pc, #280]	; (80066a4 <xPortStartScheduler+0x124>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10a      	bne.n	80065a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	613b      	str	r3, [r7, #16]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065a6:	4b3e      	ldr	r3, [pc, #248]	; (80066a0 <xPortStartScheduler+0x120>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a3f      	ldr	r2, [pc, #252]	; (80066a8 <xPortStartScheduler+0x128>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10a      	bne.n	80065c6 <xPortStartScheduler+0x46>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	60fb      	str	r3, [r7, #12]
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065c6:	4b39      	ldr	r3, [pc, #228]	; (80066ac <xPortStartScheduler+0x12c>)
 80065c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <xPortStartScheduler+0x130>)
 80065ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065ee:	4b31      	ldr	r3, [pc, #196]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f0:	2207      	movs	r2, #7
 80065f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065f4:	e009      	b.n	800660a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <xPortStartScheduler+0x134>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	4a2d      	ldr	r2, [pc, #180]	; (80066b4 <xPortStartScheduler+0x134>)
 80065fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006600:	78fb      	ldrb	r3, [r7, #3]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	b2db      	uxtb	r3, r3
 8006608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006612:	2b80      	cmp	r3, #128	; 0x80
 8006614:	d0ef      	beq.n	80065f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006616:	4b27      	ldr	r3, [pc, #156]	; (80066b4 <xPortStartScheduler+0x134>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1c3 0307 	rsb	r3, r3, #7
 800661e:	2b04      	cmp	r3, #4
 8006620:	d00a      	beq.n	8006638 <xPortStartScheduler+0xb8>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	60bb      	str	r3, [r7, #8]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006638:	4b1e      	ldr	r3, [pc, #120]	; (80066b4 <xPortStartScheduler+0x134>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <xPortStartScheduler+0x134>)
 8006640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <xPortStartScheduler+0x134>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800664a:	4a1a      	ldr	r2, [pc, #104]	; (80066b4 <xPortStartScheduler+0x134>)
 800664c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <xPortStartScheduler+0x138>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a17      	ldr	r2, [pc, #92]	; (80066b8 <xPortStartScheduler+0x138>)
 800665c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006662:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <xPortStartScheduler+0x138>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <xPortStartScheduler+0x138>)
 8006668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800666c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800666e:	f000 f8dd 	bl	800682c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006672:	4b12      	ldr	r3, [pc, #72]	; (80066bc <xPortStartScheduler+0x13c>)
 8006674:	2200      	movs	r2, #0
 8006676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006678:	f000 f8fc 	bl	8006874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <xPortStartScheduler+0x140>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0f      	ldr	r2, [pc, #60]	; (80066c0 <xPortStartScheduler+0x140>)
 8006682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006688:	f7ff ff66 	bl	8006558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800668c:	f7ff f84a 	bl	8005724 <vTaskSwitchContext>
	prvTaskExitError();
 8006690:	f7ff ff20 	bl	80064d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	e000ed00 	.word	0xe000ed00
 80066a4:	410fc271 	.word	0x410fc271
 80066a8:	410fc270 	.word	0x410fc270
 80066ac:	e000e400 	.word	0xe000e400
 80066b0:	200016e0 	.word	0x200016e0
 80066b4:	200016e4 	.word	0x200016e4
 80066b8:	e000ed20 	.word	0xe000ed20
 80066bc:	2000000c 	.word	0x2000000c
 80066c0:	e000ef34 	.word	0xe000ef34

080066c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	f383 8811 	msr	BASEPRI, r3
 80066d2:	f3bf 8f6f 	isb	sy
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	607b      	str	r3, [r7, #4]
}
 80066dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <vPortEnterCritical+0x58>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	4a0d      	ldr	r2, [pc, #52]	; (800671c <vPortEnterCritical+0x58>)
 80066e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <vPortEnterCritical+0x58>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10f      	bne.n	8006710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80066f0:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <vPortEnterCritical+0x5c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <vPortEnterCritical+0x4c>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	603b      	str	r3, [r7, #0]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <vPortEnterCritical+0x4a>
	}
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000000c 	.word	0x2000000c
 8006720:	e000ed04 	.word	0xe000ed04

08006724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800672a:	4b12      	ldr	r3, [pc, #72]	; (8006774 <vPortExitCritical+0x50>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <vPortExitCritical+0x24>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	607b      	str	r3, [r7, #4]
}
 8006744:	bf00      	nop
 8006746:	e7fe      	b.n	8006746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006748:	4b0a      	ldr	r3, [pc, #40]	; (8006774 <vPortExitCritical+0x50>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	4a09      	ldr	r2, [pc, #36]	; (8006774 <vPortExitCritical+0x50>)
 8006750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <vPortExitCritical+0x50>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d105      	bne.n	8006766 <vPortExitCritical+0x42>
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f383 8811 	msr	BASEPRI, r3
}
 8006764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2000000c 	.word	0x2000000c
	...

08006780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006780:	f3ef 8009 	mrs	r0, PSP
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <pxCurrentTCBConst>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	f01e 0f10 	tst.w	lr, #16
 8006790:	bf08      	it	eq
 8006792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679a:	6010      	str	r0, [r2, #0]
 800679c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067a4:	f380 8811 	msr	BASEPRI, r0
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f7fe ffb8 	bl	8005724 <vTaskSwitchContext>
 80067b4:	f04f 0000 	mov.w	r0, #0
 80067b8:	f380 8811 	msr	BASEPRI, r0
 80067bc:	bc09      	pop	{r0, r3}
 80067be:	6819      	ldr	r1, [r3, #0]
 80067c0:	6808      	ldr	r0, [r1, #0]
 80067c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c6:	f01e 0f10 	tst.w	lr, #16
 80067ca:	bf08      	it	eq
 80067cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067d0:	f380 8809 	msr	PSP, r0
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w

080067e0 <pxCurrentTCBConst>:
 80067e0:	200010b4 	.word	0x200010b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067e4:	bf00      	nop
 80067e6:	bf00      	nop

080067e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	__asm volatile
 80067ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f2:	f383 8811 	msr	BASEPRI, r3
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	f3bf 8f4f 	dsb	sy
 80067fe:	607b      	str	r3, [r7, #4]
}
 8006800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006802:	f7fe fed5 	bl	80055b0 <xTaskIncrementTick>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <xPortSysTickHandler+0x40>)
 800680e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f383 8811 	msr	BASEPRI, r3
}
 800681e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006820:	bf00      	nop
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	e000ed04 	.word	0xe000ed04

0800682c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006836:	4b0b      	ldr	r3, [pc, #44]	; (8006864 <vPortSetupTimerInterrupt+0x38>)
 8006838:	2200      	movs	r2, #0
 800683a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800683c:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <vPortSetupTimerInterrupt+0x3c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <vPortSetupTimerInterrupt+0x40>)
 8006842:	fba2 2303 	umull	r2, r3, r2, r3
 8006846:	099b      	lsrs	r3, r3, #6
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <vPortSetupTimerInterrupt+0x44>)
 800684a:	3b01      	subs	r3, #1
 800684c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800684e:	4b04      	ldr	r3, [pc, #16]	; (8006860 <vPortSetupTimerInterrupt+0x34>)
 8006850:	2207      	movs	r2, #7
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	e000e010 	.word	0xe000e010
 8006864:	e000e018 	.word	0xe000e018
 8006868:	20000000 	.word	0x20000000
 800686c:	10624dd3 	.word	0x10624dd3
 8006870:	e000e014 	.word	0xe000e014

08006874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006884 <vPortEnableVFP+0x10>
 8006878:	6801      	ldr	r1, [r0, #0]
 800687a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800687e:	6001      	str	r1, [r0, #0]
 8006880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006882:	bf00      	nop
 8006884:	e000ed88 	.word	0xe000ed88

08006888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800688e:	f3ef 8305 	mrs	r3, IPSR
 8006892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b0f      	cmp	r3, #15
 8006898:	d914      	bls.n	80068c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <vPortValidateInterruptPriority+0x70>)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068a4:	4b15      	ldr	r3, [pc, #84]	; (80068fc <vPortValidateInterruptPriority+0x74>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	7afa      	ldrb	r2, [r7, #11]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d20a      	bcs.n	80068c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
 80068c2:	e7fe      	b.n	80068c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068c4:	4b0e      	ldr	r3, [pc, #56]	; (8006900 <vPortValidateInterruptPriority+0x78>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068cc:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <vPortValidateInterruptPriority+0x7c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d90a      	bls.n	80068ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	603b      	str	r3, [r7, #0]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <vPortValidateInterruptPriority+0x60>
	}
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	e000e3f0 	.word	0xe000e3f0
 80068fc:	200016e0 	.word	0x200016e0
 8006900:	e000ed0c 	.word	0xe000ed0c
 8006904:	200016e4 	.word	0x200016e4

08006908 <vPortFree>:
	return pvReturn;
}
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d04d      	beq.n	80069b6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800691a:	2308      	movs	r3, #8
 800691c:	425b      	negs	r3, r3
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	4413      	add	r3, r2
 8006922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <vPortFree+0xb8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <vPortFree+0x44>
	__asm volatile
 8006936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693a:	f383 8811 	msr	BASEPRI, r3
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	60fb      	str	r3, [r7, #12]
}
 8006948:	bf00      	nop
 800694a:	e7fe      	b.n	800694a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <vPortFree+0x62>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	60bb      	str	r3, [r7, #8]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b14      	ldr	r3, [pc, #80]	; (80069c0 <vPortFree+0xb8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4013      	ands	r3, r2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01e      	beq.n	80069b6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11a      	bne.n	80069b6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <vPortFree+0xb8>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	43db      	mvns	r3, r3
 800698a:	401a      	ands	r2, r3
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006990:	f7fe fd52 	bl	8005438 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <vPortFree+0xbc>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4413      	add	r3, r2
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <vPortFree+0xbc>)
 80069a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069a2:	6938      	ldr	r0, [r7, #16]
 80069a4:	f000 f812 	bl	80069cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069a8:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <vPortFree+0xc0>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3301      	adds	r3, #1
 80069ae:	4a06      	ldr	r2, [pc, #24]	; (80069c8 <vPortFree+0xc0>)
 80069b0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069b2:	f7fe fd4f 	bl	8005454 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069b6:	bf00      	nop
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	200016fc 	.word	0x200016fc
 80069c4:	200016f4 	.word	0x200016f4
 80069c8:	200016f8 	.word	0x200016f8

080069cc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069d4:	4b28      	ldr	r3, [pc, #160]	; (8006a78 <prvInsertBlockIntoFreeList+0xac>)
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	e002      	b.n	80069e0 <prvInsertBlockIntoFreeList+0x14>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d8f7      	bhi.n	80069da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	4413      	add	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d108      	bne.n	8006a0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	441a      	add	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	441a      	add	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d118      	bne.n	8006a54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	4b15      	ldr	r3, [pc, #84]	; (8006a7c <prvInsertBlockIntoFreeList+0xb0>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d00d      	beq.n	8006a4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	441a      	add	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e008      	b.n	8006a5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a4a:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <prvInsertBlockIntoFreeList+0xb0>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e003      	b.n	8006a5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d002      	beq.n	8006a6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	200016e8 	.word	0x200016e8
 8006a7c:	200016f0 	.word	0x200016f0

08006a80 <__libc_init_array>:
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	4d0d      	ldr	r5, [pc, #52]	; (8006ab8 <__libc_init_array+0x38>)
 8006a84:	4c0d      	ldr	r4, [pc, #52]	; (8006abc <__libc_init_array+0x3c>)
 8006a86:	1b64      	subs	r4, r4, r5
 8006a88:	10a4      	asrs	r4, r4, #2
 8006a8a:	2600      	movs	r6, #0
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	d109      	bne.n	8006aa4 <__libc_init_array+0x24>
 8006a90:	4d0b      	ldr	r5, [pc, #44]	; (8006ac0 <__libc_init_array+0x40>)
 8006a92:	4c0c      	ldr	r4, [pc, #48]	; (8006ac4 <__libc_init_array+0x44>)
 8006a94:	f000 f8f2 	bl	8006c7c <_init>
 8006a98:	1b64      	subs	r4, r4, r5
 8006a9a:	10a4      	asrs	r4, r4, #2
 8006a9c:	2600      	movs	r6, #0
 8006a9e:	42a6      	cmp	r6, r4
 8006aa0:	d105      	bne.n	8006aae <__libc_init_array+0x2e>
 8006aa2:	bd70      	pop	{r4, r5, r6, pc}
 8006aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aa8:	4798      	blx	r3
 8006aaa:	3601      	adds	r6, #1
 8006aac:	e7ee      	b.n	8006a8c <__libc_init_array+0xc>
 8006aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ab2:	4798      	blx	r3
 8006ab4:	3601      	adds	r6, #1
 8006ab6:	e7f2      	b.n	8006a9e <__libc_init_array+0x1e>
 8006ab8:	08006d2c 	.word	0x08006d2c
 8006abc:	08006d2c 	.word	0x08006d2c
 8006ac0:	08006d2c 	.word	0x08006d2c
 8006ac4:	08006d30 	.word	0x08006d30

08006ac8 <__retarget_lock_acquire_recursive>:
 8006ac8:	4770      	bx	lr

08006aca <__retarget_lock_release_recursive>:
 8006aca:	4770      	bx	lr

08006acc <memcpy>:
 8006acc:	440a      	add	r2, r1
 8006ace:	4291      	cmp	r1, r2
 8006ad0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad4:	d100      	bne.n	8006ad8 <memcpy+0xc>
 8006ad6:	4770      	bx	lr
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae2:	4291      	cmp	r1, r2
 8006ae4:	d1f9      	bne.n	8006ada <memcpy+0xe>
 8006ae6:	bd10      	pop	{r4, pc}

08006ae8 <memset>:
 8006ae8:	4402      	add	r2, r0
 8006aea:	4603      	mov	r3, r0
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d100      	bne.n	8006af2 <memset+0xa>
 8006af0:	4770      	bx	lr
 8006af2:	f803 1b01 	strb.w	r1, [r3], #1
 8006af6:	e7f9      	b.n	8006aec <memset+0x4>

08006af8 <cleanup_glue>:
 8006af8:	b538      	push	{r3, r4, r5, lr}
 8006afa:	460c      	mov	r4, r1
 8006afc:	6809      	ldr	r1, [r1, #0]
 8006afe:	4605      	mov	r5, r0
 8006b00:	b109      	cbz	r1, 8006b06 <cleanup_glue+0xe>
 8006b02:	f7ff fff9 	bl	8006af8 <cleanup_glue>
 8006b06:	4621      	mov	r1, r4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b0e:	f000 b869 	b.w	8006be4 <_free_r>
	...

08006b14 <_reclaim_reent>:
 8006b14:	4b2c      	ldr	r3, [pc, #176]	; (8006bc8 <_reclaim_reent+0xb4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4283      	cmp	r3, r0
 8006b1a:	b570      	push	{r4, r5, r6, lr}
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	d051      	beq.n	8006bc4 <_reclaim_reent+0xb0>
 8006b20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b22:	b143      	cbz	r3, 8006b36 <_reclaim_reent+0x22>
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d14a      	bne.n	8006bc0 <_reclaim_reent+0xac>
 8006b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b2c:	6819      	ldr	r1, [r3, #0]
 8006b2e:	b111      	cbz	r1, 8006b36 <_reclaim_reent+0x22>
 8006b30:	4620      	mov	r0, r4
 8006b32:	f000 f857 	bl	8006be4 <_free_r>
 8006b36:	6961      	ldr	r1, [r4, #20]
 8006b38:	b111      	cbz	r1, 8006b40 <_reclaim_reent+0x2c>
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 f852 	bl	8006be4 <_free_r>
 8006b40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b42:	b111      	cbz	r1, 8006b4a <_reclaim_reent+0x36>
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 f84d 	bl	8006be4 <_free_r>
 8006b4a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b4c:	b111      	cbz	r1, 8006b54 <_reclaim_reent+0x40>
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 f848 	bl	8006be4 <_free_r>
 8006b54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b56:	b111      	cbz	r1, 8006b5e <_reclaim_reent+0x4a>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 f843 	bl	8006be4 <_free_r>
 8006b5e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b60:	b111      	cbz	r1, 8006b68 <_reclaim_reent+0x54>
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 f83e 	bl	8006be4 <_free_r>
 8006b68:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b6a:	b111      	cbz	r1, 8006b72 <_reclaim_reent+0x5e>
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 f839 	bl	8006be4 <_free_r>
 8006b72:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006b74:	b111      	cbz	r1, 8006b7c <_reclaim_reent+0x68>
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 f834 	bl	8006be4 <_free_r>
 8006b7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b7e:	b111      	cbz	r1, 8006b86 <_reclaim_reent+0x72>
 8006b80:	4620      	mov	r0, r4
 8006b82:	f000 f82f 	bl	8006be4 <_free_r>
 8006b86:	69a3      	ldr	r3, [r4, #24]
 8006b88:	b1e3      	cbz	r3, 8006bc4 <_reclaim_reent+0xb0>
 8006b8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	4798      	blx	r3
 8006b90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006b92:	b1b9      	cbz	r1, 8006bc4 <_reclaim_reent+0xb0>
 8006b94:	4620      	mov	r0, r4
 8006b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b9a:	f7ff bfad 	b.w	8006af8 <cleanup_glue>
 8006b9e:	5949      	ldr	r1, [r1, r5]
 8006ba0:	b941      	cbnz	r1, 8006bb4 <_reclaim_reent+0xa0>
 8006ba2:	3504      	adds	r5, #4
 8006ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba6:	2d80      	cmp	r5, #128	; 0x80
 8006ba8:	68d9      	ldr	r1, [r3, #12]
 8006baa:	d1f8      	bne.n	8006b9e <_reclaim_reent+0x8a>
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 f819 	bl	8006be4 <_free_r>
 8006bb2:	e7ba      	b.n	8006b2a <_reclaim_reent+0x16>
 8006bb4:	680e      	ldr	r6, [r1, #0]
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 f814 	bl	8006be4 <_free_r>
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	e7ef      	b.n	8006ba0 <_reclaim_reent+0x8c>
 8006bc0:	2500      	movs	r5, #0
 8006bc2:	e7ef      	b.n	8006ba4 <_reclaim_reent+0x90>
 8006bc4:	bd70      	pop	{r4, r5, r6, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000010 	.word	0x20000010

08006bcc <__malloc_lock>:
 8006bcc:	4801      	ldr	r0, [pc, #4]	; (8006bd4 <__malloc_lock+0x8>)
 8006bce:	f7ff bf7b 	b.w	8006ac8 <__retarget_lock_acquire_recursive>
 8006bd2:	bf00      	nop
 8006bd4:	20001700 	.word	0x20001700

08006bd8 <__malloc_unlock>:
 8006bd8:	4801      	ldr	r0, [pc, #4]	; (8006be0 <__malloc_unlock+0x8>)
 8006bda:	f7ff bf76 	b.w	8006aca <__retarget_lock_release_recursive>
 8006bde:	bf00      	nop
 8006be0:	20001700 	.word	0x20001700

08006be4 <_free_r>:
 8006be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006be6:	2900      	cmp	r1, #0
 8006be8:	d044      	beq.n	8006c74 <_free_r+0x90>
 8006bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bee:	9001      	str	r0, [sp, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8006bf6:	bfb8      	it	lt
 8006bf8:	18e4      	addlt	r4, r4, r3
 8006bfa:	f7ff ffe7 	bl	8006bcc <__malloc_lock>
 8006bfe:	4a1e      	ldr	r2, [pc, #120]	; (8006c78 <_free_r+0x94>)
 8006c00:	9801      	ldr	r0, [sp, #4]
 8006c02:	6813      	ldr	r3, [r2, #0]
 8006c04:	b933      	cbnz	r3, 8006c14 <_free_r+0x30>
 8006c06:	6063      	str	r3, [r4, #4]
 8006c08:	6014      	str	r4, [r2, #0]
 8006c0a:	b003      	add	sp, #12
 8006c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c10:	f7ff bfe2 	b.w	8006bd8 <__malloc_unlock>
 8006c14:	42a3      	cmp	r3, r4
 8006c16:	d908      	bls.n	8006c2a <_free_r+0x46>
 8006c18:	6825      	ldr	r5, [r4, #0]
 8006c1a:	1961      	adds	r1, r4, r5
 8006c1c:	428b      	cmp	r3, r1
 8006c1e:	bf01      	itttt	eq
 8006c20:	6819      	ldreq	r1, [r3, #0]
 8006c22:	685b      	ldreq	r3, [r3, #4]
 8006c24:	1949      	addeq	r1, r1, r5
 8006c26:	6021      	streq	r1, [r4, #0]
 8006c28:	e7ed      	b.n	8006c06 <_free_r+0x22>
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	b10b      	cbz	r3, 8006c34 <_free_r+0x50>
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	d9fa      	bls.n	8006c2a <_free_r+0x46>
 8006c34:	6811      	ldr	r1, [r2, #0]
 8006c36:	1855      	adds	r5, r2, r1
 8006c38:	42a5      	cmp	r5, r4
 8006c3a:	d10b      	bne.n	8006c54 <_free_r+0x70>
 8006c3c:	6824      	ldr	r4, [r4, #0]
 8006c3e:	4421      	add	r1, r4
 8006c40:	1854      	adds	r4, r2, r1
 8006c42:	42a3      	cmp	r3, r4
 8006c44:	6011      	str	r1, [r2, #0]
 8006c46:	d1e0      	bne.n	8006c0a <_free_r+0x26>
 8006c48:	681c      	ldr	r4, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	6053      	str	r3, [r2, #4]
 8006c4e:	4421      	add	r1, r4
 8006c50:	6011      	str	r1, [r2, #0]
 8006c52:	e7da      	b.n	8006c0a <_free_r+0x26>
 8006c54:	d902      	bls.n	8006c5c <_free_r+0x78>
 8006c56:	230c      	movs	r3, #12
 8006c58:	6003      	str	r3, [r0, #0]
 8006c5a:	e7d6      	b.n	8006c0a <_free_r+0x26>
 8006c5c:	6825      	ldr	r5, [r4, #0]
 8006c5e:	1961      	adds	r1, r4, r5
 8006c60:	428b      	cmp	r3, r1
 8006c62:	bf04      	itt	eq
 8006c64:	6819      	ldreq	r1, [r3, #0]
 8006c66:	685b      	ldreq	r3, [r3, #4]
 8006c68:	6063      	str	r3, [r4, #4]
 8006c6a:	bf04      	itt	eq
 8006c6c:	1949      	addeq	r1, r1, r5
 8006c6e:	6021      	streq	r1, [r4, #0]
 8006c70:	6054      	str	r4, [r2, #4]
 8006c72:	e7ca      	b.n	8006c0a <_free_r+0x26>
 8006c74:	b003      	add	sp, #12
 8006c76:	bd30      	pop	{r4, r5, pc}
 8006c78:	20001704 	.word	0x20001704

08006c7c <_init>:
 8006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7e:	bf00      	nop
 8006c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c82:	bc08      	pop	{r3}
 8006c84:	469e      	mov	lr, r3
 8006c86:	4770      	bx	lr

08006c88 <_fini>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr
