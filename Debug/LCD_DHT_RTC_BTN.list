
LCD_DHT_RTC_BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08009f10  08009f10  00019f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a090  0800a090  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a098  0800a098  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00005338  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200053ac  200053ac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026e12  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047b0  00000000  00000000  00046eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dc0  00000000  00000000  0004b668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c20  00000000  00000000  0004d428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d1e  00000000  00000000  0004f048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002324e  00000000  00000000  00078d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6cb5  00000000  00000000  0009bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00192c69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000894c  00000000  00000000  00192cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ef4 	.word	0x08009ef4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08009ef4 	.word	0x08009ef4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <getTemp>:
 */

#include "main.h"
#include "cmsis_os.h"
void getTemp(void)	//PC2
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b098      	sub	sp, #96	; 0x60
 8000eb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef tempgpio;

	uint8_t in_num[40] = {0};
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2224      	movs	r2, #36	; 0x24
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 fc2c 	bl	8008720 <memset>
	uint32_t bit1 = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t bit2 = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	64fb      	str	r3, [r7, #76]	; 0x4c


	//1. 포트에서 1~10ms 동안 LOW 를 출력
	tempgpio.Pin = GPIO_PIN_2;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	tempgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
	tempgpio.Pull = GPIO_PULLUP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &tempgpio);
 8000edc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4889      	ldr	r0, [pc, #548]	; (8001108 <getTemp+0x258>)
 8000ee4:	f001 fd24 	bl	8002930 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2104      	movs	r1, #4
 8000eec:	4886      	ldr	r0, [pc, #536]	; (8001108 <getTemp+0x258>)
 8000eee:	f001 fee3 	bl	8002cb8 <HAL_GPIO_WritePin>
	//HAL_Delay(3); // 1~10ms 지연
	osDelay(pdMS_TO_TICKS(3));
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f004 ff3e 	bl	8005d74 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	4882      	ldr	r0, [pc, #520]	; (8001108 <getTemp+0x258>)
 8000efe:	f001 fedb 	bl	8002cb8 <HAL_GPIO_WritePin>

	//2.40us동안 딜레이 (HIGH상태)

	delay_us(35);
 8000f02:	2023      	movs	r0, #35	; 0x23
 8000f04:	f000 fd10 	bl	8001928 <delay_us>
	//3.핀을 입력으로 바꾸고 80us동안 LOW 입력
	tempgpio.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &tempgpio);
 8000f0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f10:	4619      	mov	r1, r3
 8000f12:	487d      	ldr	r0, [pc, #500]	; (8001108 <getTemp+0x258>)
 8000f14:	f001 fd0c 	bl	8002930 <HAL_GPIO_Init>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_SET);
 8000f18:	bf00      	nop
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	487a      	ldr	r0, [pc, #488]	; (8001108 <getTemp+0x258>)
 8000f1e:	f001 feb3 	bl	8002c88 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d1f8      	bne.n	8000f1a <getTemp+0x6a>

	//4.80us 동안 HIGH 입력
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_RESET);
 8000f28:	bf00      	nop
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4876      	ldr	r0, [pc, #472]	; (8001108 <getTemp+0x258>)
 8000f2e:	f001 feab 	bl	8002c88 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f8      	bne.n	8000f2a <getTemp+0x7a>

	//5.40비트 수신
	for(uint32_t i=0; i<40; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f3c:	e034      	b.n	8000fa8 <getTemp+0xf8>
	{
		bit1 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	653b      	str	r3, [r7, #80]	; 0x50
		bit2 = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
		__HAL_TIM_SET_COUNTER(&htim10,0);
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <getTemp+0x25c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_SET);
 8000f4e:	bf00      	nop
 8000f50:	2104      	movs	r1, #4
 8000f52:	486d      	ldr	r0, [pc, #436]	; (8001108 <getTemp+0x258>)
 8000f54:	f001 fe98 	bl	8002c88 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d1f8      	bne.n	8000f50 <getTemp+0xa0>
		bit1 = __HAL_TIM_GET_COUNTER(&htim10);
 8000f5e:	4b6b      	ldr	r3, [pc, #428]	; (800110c <getTemp+0x25c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	653b      	str	r3, [r7, #80]	; 0x50
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_RESET);
 8000f66:	bf00      	nop
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4867      	ldr	r0, [pc, #412]	; (8001108 <getTemp+0x258>)
 8000f6c:	f001 fe8c 	bl	8002c88 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f8      	bne.n	8000f68 <getTemp+0xb8>
		bit2 = __HAL_TIM_GET_COUNTER(&htim10);
 8000f76:	4b65      	ldr	r3, [pc, #404]	; (800110c <getTemp+0x25c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (bit2 - bit1 > 30)
 8000f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b1e      	cmp	r3, #30
 8000f86:	d906      	bls.n	8000f96 <getTemp+0xe6>
		{
			in_num[i] = 1;
 8000f88:	f107 0210 	add.w	r2, r7, #16
 8000f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f8e:	4413      	add	r3, r2
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e005      	b.n	8000fa2 <getTemp+0xf2>
		}else
		{
			in_num[i] = 0;
 8000f96:	f107 0210 	add.w	r2, r7, #16
 8000f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<40; i++)
 8000fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000faa:	2b27      	cmp	r3, #39	; 0x27
 8000fac:	d9c7      	bls.n	8000f3e <getTemp+0x8e>
		}

	}

	uint16_t temp = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t humi = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	for (int32_t i=31; i>=0; i--)
 8000fba:	231f      	movs	r3, #31
 8000fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8000fbe:	e05c      	b.n	800107a <getTemp+0x1ca>
	{
		if (i > 15)
 8000fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	dd2b      	ble.n	800101e <getTemp+0x16e>
		{
			if(in_num[i] == 1)
 8000fc6:	f107 0210 	add.w	r2, r7, #16
 8000fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d14f      	bne.n	8001074 <getTemp+0x1c4>
			{
				//제곱은 다른 기호
				//humi += 1*(2^(31-i));
				temp += 1 * pow(2, 31-i);
 8000fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd6:	f1c3 031f 	rsb	r3, r3, #31
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff faaa 	bl	8000534 <__aeabi_i2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	ec43 2b11 	vmov	d1, r2, r3
 8000fe8:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001100 <getTemp+0x250>
 8000fec:	f008 f868 	bl	80090c0 <pow>
 8000ff0:	ec55 4b10 	vmov	r4, r5, d0
 8000ff4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa9b 	bl	8000534 <__aeabi_i2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff f949 	bl	800029c <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fda9 	bl	8000b68 <__aeabi_d2uiz>
 8001016:	4603      	mov	r3, r0
 8001018:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800101c:	e02a      	b.n	8001074 <getTemp+0x1c4>
			}
		}
		else
		{
			if(in_num[i] == 1)
 800101e:	f107 0210 	add.w	r2, r7, #16
 8001022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d123      	bne.n	8001074 <getTemp+0x1c4>
			{
				humi += 1 * pow(2, 15-i);
 800102c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800102e:	f1c3 030f 	rsb	r3, r3, #15
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa7e 	bl	8000534 <__aeabi_i2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b11 	vmov	d1, r2, r3
 8001040:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001100 <getTemp+0x250>
 8001044:	f008 f83c 	bl	80090c0 <pow>
 8001048:	ec55 4b10 	vmov	r4, r5, d0
 800104c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa6f 	bl	8000534 <__aeabi_i2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4620      	mov	r0, r4
 800105c:	4629      	mov	r1, r5
 800105e:	f7ff f91d 	bl	800029c <__adddf3>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd7d 	bl	8000b68 <__aeabi_d2uiz>
 800106e:	4603      	mov	r3, r0
 8001070:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	for (int32_t i=31; i>=0; i--)
 8001074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001076:	3b01      	subs	r3, #1
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
 800107a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800107c:	2b00      	cmp	r3, #0
 800107e:	da9f      	bge.n	8000fc0 <getTemp+0x110>
			}
		}
	}
	temp /= 10;
 8001080:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <getTemp+0x260>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	humi /= 10;
 8001090:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001094:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <getTemp+0x260>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	char temp_str [5] ;
	char humi_str [5] ;

	sprintf(temp_str,"%d",temp);
 80010a0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	491a      	ldr	r1, [pc, #104]	; (8001114 <getTemp+0x264>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f007 fc4e 	bl	800894c <siprintf>
	sprintf(humi_str,"%d",humi);
 80010b0:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80010b4:	463b      	mov	r3, r7
 80010b6:	4917      	ldr	r1, [pc, #92]	; (8001114 <getTemp+0x264>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f007 fc47 	bl	800894c <siprintf>
	lcd_set_cursor(1, 1);
 80010be:	2101      	movs	r1, #1
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f8cb 	bl	800125c <lcd_set_cursor>
	lcd_string_write("temp = ");
 80010c6:	4814      	ldr	r0, [pc, #80]	; (8001118 <getTemp+0x268>)
 80010c8:	f000 f908 	bl	80012dc <lcd_string_write>
	lcd_string_write(temp_str);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f903 	bl	80012dc <lcd_string_write>

	//HAL_Delay(50);
	osDelay(pdMS_TO_TICKS(50));
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	f004 fe4c 	bl	8005d74 <osDelay>
	lcd_set_cursor(2, 1);
 80010dc:	2101      	movs	r1, #1
 80010de:	2002      	movs	r0, #2
 80010e0:	f000 f8bc 	bl	800125c <lcd_set_cursor>
	lcd_string_write("humi = ");
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <getTemp+0x26c>)
 80010e6:	f000 f8f9 	bl	80012dc <lcd_string_write>
	lcd_string_write(humi_str);
 80010ea:	463b      	mov	r3, r7
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f8f5 	bl	80012dc <lcd_string_write>

}
 80010f2:	bf00      	nop
 80010f4:	3760      	adds	r7, #96	; 0x60
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdb0      	pop	{r4, r5, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	40000000 	.word	0x40000000
 8001108:	40020800 	.word	0x40020800
 800110c:	20000394 	.word	0x20000394
 8001110:	cccccccd 	.word	0xcccccccd
 8001114:	08009f10 	.word	0x08009f10
 8001118:	08009f14 	.word	0x08009f14
 800111c:	08009f1c 	.word	0x08009f1c

08001120 <print_rtc>:
 */

#include "main.h"
#include "cmsis_os.h"
void print_rtc(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af04      	add	r7, sp, #16
	static char printdate[50]; // 날짜 출력

	//현재 포맷 얻기
	char *format;

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN); // 시간 얻기
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	4825      	ldr	r0, [pc, #148]	; (80011c4 <print_rtc+0xa4>)
 800112e:	f003 fae5 	bl	80046fc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN); // 날짜 얻기
 8001132:	f107 0318 	add.w	r3, r7, #24
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	4822      	ldr	r0, [pc, #136]	; (80011c4 <print_rtc+0xa4>)
 800113c:	f003 fb3c 	bl	80047b8 <HAL_RTC_GetDate>


	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <print_rtc+0x2a>
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <print_rtc+0xa8>)
 8001148:	e000      	b.n	800114c <print_rtc+0x2c>
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <print_rtc+0xac>)
 800114c:	61fb      	str	r3, [r7, #28]

	sprintf(printtime, "%s : %02d:%02d:%02d %s","T",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	797b      	ldrb	r3, [r7, #5]
 8001154:	461a      	mov	r2, r3
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	4619      	mov	r1, r3
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	9101      	str	r1, [sp, #4]
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	4603      	mov	r3, r0
 8001164:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <print_rtc+0xb0>)
 8001166:	491b      	ldr	r1, [pc, #108]	; (80011d4 <print_rtc+0xb4>)
 8001168:	481b      	ldr	r0, [pc, #108]	; (80011d8 <print_rtc+0xb8>)
 800116a:	f007 fbef 	bl	800894c <siprintf>
	sprintf(printdate, "%s : %02d-%02d-%02d","D", 2000 + rtc_date.Year,rtc_date.Month, rtc_date.Date);
 800116e:	7efb      	ldrb	r3, [r7, #27]
 8001170:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001174:	7e7a      	ldrb	r2, [r7, #25]
 8001176:	7eb9      	ldrb	r1, [r7, #26]
 8001178:	9101      	str	r1, [sp, #4]
 800117a:	9200      	str	r2, [sp, #0]
 800117c:	4a17      	ldr	r2, [pc, #92]	; (80011dc <print_rtc+0xbc>)
 800117e:	4918      	ldr	r1, [pc, #96]	; (80011e0 <print_rtc+0xc0>)
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <print_rtc+0xc4>)
 8001182:	f007 fbe3 	bl	800894c <siprintf>
	lcd_set_cursor(1, 1);
 8001186:	2101      	movs	r1, #1
 8001188:	2001      	movs	r0, #1
 800118a:	f000 f867 	bl	800125c <lcd_set_cursor>
	osDelay(pdMS_TO_TICKS(2));
 800118e:	2002      	movs	r0, #2
 8001190:	f004 fdf0 	bl	8005d74 <osDelay>
	lcd_string_write(printdate);
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <print_rtc+0xc4>)
 8001196:	f000 f8a1 	bl	80012dc <lcd_string_write>
	osDelay(pdMS_TO_TICKS(20));
 800119a:	2014      	movs	r0, #20
 800119c:	f004 fdea 	bl	8005d74 <osDelay>
	lcd_set_cursor(2, 1);
 80011a0:	2101      	movs	r1, #1
 80011a2:	2002      	movs	r0, #2
 80011a4:	f000 f85a 	bl	800125c <lcd_set_cursor>
	osDelay(pdMS_TO_TICKS(2));
 80011a8:	2002      	movs	r0, #2
 80011aa:	f004 fde3 	bl	8005d74 <osDelay>
	lcd_string_write(printtime);
 80011ae:	480a      	ldr	r0, [pc, #40]	; (80011d8 <print_rtc+0xb8>)
 80011b0:	f000 f894 	bl	80012dc <lcd_string_write>
	osDelay(pdMS_TO_TICKS(2));
 80011b4:	2002      	movs	r0, #2
 80011b6:	f004 fddd 	bl	8005d74 <osDelay>
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000374 	.word	0x20000374
 80011c8:	08009f24 	.word	0x08009f24
 80011cc:	08009f28 	.word	0x08009f28
 80011d0:	08009f2c 	.word	0x08009f2c
 80011d4:	08009f30 	.word	0x08009f30
 80011d8:	20000090 	.word	0x20000090
 80011dc:	08009f48 	.word	0x08009f48
 80011e0:	08009f4c 	.word	0x08009f4c
 80011e4:	200000c4 	.word	0x200000c4

080011e8 <I2C_LCD_Init>:
#include "main.h"
#include "cmsis_os.h"


void I2C_LCD_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_Delay(40); // 1. 켜지고 40ms이상 대기
 80011ec:	2028      	movs	r0, #40	; 0x28
 80011ee:	f000 ff71 	bl	80020d4 <HAL_Delay>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 80011f2:	2030      	movs	r0, #48	; 0x30
 80011f4:	f000 f8a8 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	HAL_Delay(5);	// 2. 4.1ms 이상 대기
 80011f8:	2005      	movs	r0, #5
 80011fa:	f000 ff6b 	bl	80020d4 <HAL_Delay>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 80011fe:	2030      	movs	r0, #48	; 0x30
 8001200:	f000 f8a2 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	delay_us(150); // 3. 100us 대기
 8001204:	2096      	movs	r0, #150	; 0x96
 8001206:	f000 fb8f 	bl	8001928 <delay_us>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 800120a:	2030      	movs	r0, #48	; 0x30
 800120c:	f000 f89c 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x20);
 8001210:	2020      	movs	r0, #32
 8001212:	f000 f899 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x20);
 8001216:	2020      	movs	r0, #32
 8001218:	f000 f896 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x80);
 800121c:	2080      	movs	r0, #128	; 0x80
 800121e:	f000 f893 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f890 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0xE0);
 8001228:	20e0      	movs	r0, #224	; 0xe0
 800122a:	f000 f88d 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	lcd_display_clear();
 800122e:	f000 f808 	bl	8001242 <lcd_display_clear>
	I2C_LCD_4bit_cmd_WRITE(0x00);
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f888 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x60);
 8001238:	2060      	movs	r0, #96	; 0x60
 800123a:	f000 f885 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}

08001242 <lcd_display_clear>:

void lcd_display_clear(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
	//디스플레이 클리어 커맨드 전송
	I2C_LCD_4bit_cmd_WRITE(0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f87e 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x10);
 800124c:	2010      	movs	r0, #16
 800124e:	f000 f87b 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	//2ms의 딜레이 줘야 함
	//HAL_Delay(2);
	osDelay(pdMS_TO_TICKS(2));
 8001252:	2002      	movs	r0, #2
 8001254:	f004 fd8e 	bl	8005d74 <osDelay>
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}

0800125c <lcd_set_cursor>:
	osDelay(pdMS_TO_TICKS(2));
}


void lcd_set_cursor(uint8_t row, uint8_t column)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	column--;
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	3b01      	subs	r3, #1
 8001270:	71bb      	strb	r3, [r7, #6]
	switch(row)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d002      	beq.n	800127e <lcd_set_cursor+0x22>
 8001278:	2b02      	cmp	r3, #2
 800127a:	d009      	beq.n	8001290 <lcd_set_cursor+0x34>
			//커서를 두번째 행에 설정하고 인덱스를 추가
			//0b11000000의 데이터를 설정하여 2행의 첫밴째 열(0x40)로 커서를 설정
			lcd_cmd_write((column |= 0xC0));
			break;
		default:
			break;
 800127c:	e011      	b.n	80012a2 <lcd_set_cursor+0x46>
			lcd_cmd_write((column |= 0x80));
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001284:	71bb      	strb	r3, [r7, #6]
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f80e 	bl	80012aa <lcd_cmd_write>
			break;
 800128e:	e008      	b.n	80012a2 <lcd_set_cursor+0x46>
			lcd_cmd_write((column |= 0xC0));
 8001290:	79bb      	ldrb	r3, [r7, #6]
 8001292:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001296:	71bb      	strb	r3, [r7, #6]
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f805 	bl	80012aa <lcd_cmd_write>
			break;
 80012a0:	bf00      	nop
	}
	//osDelay(pdMS_TO_TICKS(2));
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <lcd_cmd_write>:


void lcd_cmd_write(uint8_t cmd)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_4bit_cmd_WRITE(cmd & 0xF0); // 상위 4비트
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f023 030f 	bic.w	r3, r3, #15
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f843 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE((cmd << 4) & 0xF0); // 하위 4비트
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f83d 	bl	8001348 <I2C_LCD_4bit_cmd_WRITE>
	//HAL_Delay(2);
	osDelay(pdMS_TO_TICKS(2));
 80012ce:	2002      	movs	r0, #2
 80012d0:	f004 fd50 	bl	8005d74 <osDelay>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <lcd_string_write>:

void lcd_string_write(char *str)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	for(int i=0 ; str[i];i++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	e009      	b.n	80012fe <lcd_string_write+0x22>
	{
		lcd_data_write(str[i]);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f80e 	bl	8001314 <lcd_data_write>
	for(int i=0 ; str[i];i++)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1ef      	bne.n	80012ea <lcd_string_write+0xe>
	}
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <lcd_data_write>:
void lcd_data_write(uint8_t cmd)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_4bit_data_WRITE((char)cmd & 0xF0); // 상위 4비트
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f023 030f 	bic.w	r3, r3, #15
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f836 	bl	8001398 <I2C_LCD_4bit_data_WRITE>
	I2C_LCD_4bit_data_WRITE(((char)cmd << 4) & 0xF0); // 하위 4비트
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	b2db      	uxtb	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f830 	bl	8001398 <I2C_LCD_4bit_data_WRITE>
	//HAL_Delay(2);
	osDelay(pdMS_TO_TICKS(2));
 8001338:	2002      	movs	r0, #2
 800133a:	f004 fd1b 	bl	8005d74 <osDelay>

}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <I2C_LCD_4bit_cmd_WRITE>:

void I2C_LCD_4bit_cmd_WRITE(uint8_t cmd)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_s;
	uint8_t cmd_L[2];

	cmd_s = cmd & 0xF0; // 상위 4비트
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f023 030f 	bic.w	r3, r3, #15
 8001358:	73fb      	strb	r3, [r7, #15]

	cmd_L[0] = cmd_s | 0x0C; //En = 1
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	f043 030c 	orr.w	r3, r3, #12
 8001360:	b2db      	uxtb	r3, r3
 8001362:	733b      	strb	r3, [r7, #12]
	cmd_L[1] = cmd_s | 0x08; //En = 0
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	b2db      	uxtb	r3, r3
 800136c:	737b      	strb	r3, [r7, #13]
	//데이터 전송 시 중간에 En 핀을 High->Low로 설정하여 데이터 전송활성화

	if(HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, cmd_L, sizeof(cmd_L), HAL_MAX_DELAY) != HAL_OK)
 800136e:	f107 020c 	add.w	r2, r7, #12
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2302      	movs	r3, #2
 800137a:	214e      	movs	r1, #78	; 0x4e
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <I2C_LCD_4bit_cmd_WRITE+0x4c>)
 800137e:	f001 fe1d 	bl	8002fbc <HAL_I2C_Master_Transmit>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <I2C_LCD_4bit_cmd_WRITE+0x44>
	{
		Error_Handler();
 8001388:	f000 fb1c 	bl	80019c4 <Error_Handler>
	}
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000320 	.word	0x20000320

08001398 <I2C_LCD_4bit_data_WRITE>:


void I2C_LCD_4bit_data_WRITE(uint8_t data)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af02      	add	r7, sp, #8
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u;
	uint8_t data_W[2];

	data_u = data & 0xF0; // 상위 4비트
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f023 030f 	bic.w	r3, r3, #15
 80013a8:	73fb      	strb	r3, [r7, #15]

	//데이터를 전송하므로 rs = 1이여야 함
	data_W[0] = data_u | 0b00001101; //En = 1
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	f043 030d 	orr.w	r3, r3, #13
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	733b      	strb	r3, [r7, #12]
	data_W[1] = data_u | 0b00001001; //En = 0
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	f043 0309 	orr.w	r3, r3, #9
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	737b      	strb	r3, [r7, #13]
	//데이터 전송 시 중간에 En 핀을 High->Low로 설정하여 데이터 전송활성화

	if(HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_W, sizeof(data_W), HAL_MAX_DELAY) != HAL_OK)
 80013be:	f107 020c 	add.w	r2, r7, #12
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2302      	movs	r3, #2
 80013ca:	214e      	movs	r1, #78	; 0x4e
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <I2C_LCD_4bit_data_WRITE+0x4c>)
 80013ce:	f001 fdf5 	bl	8002fbc <HAL_I2C_Master_Transmit>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <I2C_LCD_4bit_data_WRITE+0x44>
	{
		Error_Handler();
 80013d8:	f000 faf4 	bl	80019c4 <Error_Handler>
	}
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000320 	.word	0x20000320

080013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ee:	f000 fe2f 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f2:	f000 f847 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f6:	f000 f9e1 	bl	80017bc <MX_GPIO_Init>
  MX_ETH_Init();
 80013fa:	f000 f8af 	bl	800155c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80013fe:	f000 f985 	bl	800170c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001402:	f000 f9ad 	bl	8001760 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8001406:	f000 f95d 	bl	80016c4 <MX_TIM10_Init>
  MX_I2C1_Init();
 800140a:	f000 f8f5 	bl	80015f8 <MX_I2C1_Init>
  MX_RTC_Init();
 800140e:	f000 f933 	bl	8001678 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10); // us_timer start
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <main+0x80>)
 8001414:	f003 fb0e 	bl	8004a34 <HAL_TIM_Base_Start>
  I2C_LCD_Init();	// lcd init
 8001418:	f7ff fee6 	bl	80011e8 <I2C_LCD_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800141c:	f004 fbce 	bl	8005bbc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001420:	4a12      	ldr	r2, [pc, #72]	; (800146c <main+0x84>)
 8001422:	2100      	movs	r1, #0
 8001424:	4812      	ldr	r0, [pc, #72]	; (8001470 <main+0x88>)
 8001426:	f004 fc13 	bl	8005c50 <osThreadNew>
 800142a:	4603      	mov	r3, r0
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <main+0x8c>)
 800142e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  status = xTaskCreate(dht_handler, "temphumi", 250, NULL, 2, &dht_task_handle);
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <main+0x90>)
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	2302      	movs	r3, #2
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2300      	movs	r3, #0
 800143a:	22fa      	movs	r2, #250	; 0xfa
 800143c:	490f      	ldr	r1, [pc, #60]	; (800147c <main+0x94>)
 800143e:	4810      	ldr	r0, [pc, #64]	; (8001480 <main+0x98>)
 8001440:	f005 fae5 	bl	8006a0e <xTaskCreate>
 8001444:	6078      	str	r0, [r7, #4]

  configASSERT(status == pdTRUE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d00a      	beq.n	8001462 <main+0x7a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800144c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001450:	f383 8811 	msr	BASEPRI, r3
 8001454:	f3bf 8f6f 	isb	sy
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800145e:	bf00      	nop
 8001460:	e7fe      	b.n	8001460 <main+0x78>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001462:	f004 fbcf 	bl	8005c04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //1. basically get dht22 data
  while (1)
 8001466:	e7fe      	b.n	8001466 <main+0x7e>
 8001468:	20000394 	.word	0x20000394
 800146c:	08009f90 	.word	0x08009f90
 8001470:	0800198f 	.word	0x0800198f
 8001474:	2000092c 	.word	0x2000092c
 8001478:	20000930 	.word	0x20000930
 800147c:	08009f6c 	.word	0x08009f6c
 8001480:	08001959 	.word	0x08001959

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	2230      	movs	r2, #48	; 0x30
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f007 f944 	bl	8008720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <SystemClock_Config+0xd0>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <SystemClock_Config+0xd0>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b26      	ldr	r3, [pc, #152]	; (8001554 <SystemClock_Config+0xd0>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <SystemClock_Config+0xd4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <SystemClock_Config+0xd4>)
 80014ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <SystemClock_Config+0xd4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80014e0:	2309      	movs	r3, #9
 80014e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014fc:	23a8      	movs	r3, #168	; 0xa8
 80014fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001504:	2307      	movs	r3, #7
 8001506:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4618      	mov	r0, r3
 800150e:	f002 f9f5 	bl	80038fc <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001518:	f000 fa54 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001528:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800152e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001532:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2105      	movs	r1, #5
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fc56 	bl	8003dec <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001546:	f000 fa3d 	bl	80019c4 <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3750      	adds	r7, #80	; 0x50
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001560:	4b1f      	ldr	r3, [pc, #124]	; (80015e0 <MX_ETH_Init+0x84>)
 8001562:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <MX_ETH_Init+0x88>)
 8001564:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_ETH_Init+0x8c>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_ETH_Init+0x8c>)
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_ETH_Init+0x8c>)
 8001574:	22e1      	movs	r2, #225	; 0xe1
 8001576:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_ETH_Init+0x8c>)
 800157a:	2200      	movs	r2, #0
 800157c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_ETH_Init+0x8c>)
 8001580:	2200      	movs	r2, #0
 8001582:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_ETH_Init+0x8c>)
 8001586:	2200      	movs	r2, #0
 8001588:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <MX_ETH_Init+0x84>)
 800158c:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <MX_ETH_Init+0x8c>)
 800158e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_ETH_Init+0x84>)
 8001592:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001596:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_ETH_Init+0x84>)
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <MX_ETH_Init+0x90>)
 800159c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_ETH_Init+0x84>)
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <MX_ETH_Init+0x94>)
 80015a2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_ETH_Init+0x84>)
 80015a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015aa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_ETH_Init+0x84>)
 80015ae:	f000 fe97 	bl	80022e0 <HAL_ETH_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80015b8:	f000 fa04 	bl	80019c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80015bc:	2238      	movs	r2, #56	; 0x38
 80015be:	2100      	movs	r1, #0
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <MX_ETH_Init+0x98>)
 80015c2:	f007 f8ad 	bl	8008720 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MX_ETH_Init+0x98>)
 80015c8:	2221      	movs	r2, #33	; 0x21
 80015ca:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MX_ETH_Init+0x98>)
 80015ce:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80015d2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <MX_ETH_Init+0x98>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000270 	.word	0x20000270
 80015e4:	40028000 	.word	0x40028000
 80015e8:	20000934 	.word	0x20000934
 80015ec:	200001d0 	.word	0x200001d0
 80015f0:	20000130 	.word	0x20000130
 80015f4:	200000f8 	.word	0x200000f8

080015f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_I2C1_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_I2C1_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_I2C1_Init+0x74>)
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <MX_I2C1_Init+0x7c>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_I2C1_Init+0x74>)
 8001616:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_I2C1_Init+0x74>)
 8001636:	f001 fb7d 	bl	8002d34 <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001640:	f000 f9c0 	bl	80019c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001644:	2100      	movs	r1, #0
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <MX_I2C1_Init+0x74>)
 8001648:	f001 ffbf 	bl	80035ca <HAL_I2CEx_ConfigAnalogFilter>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001652:	f000 f9b7 	bl	80019c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_I2C1_Init+0x74>)
 800165a:	f001 fff2 	bl	8003642 <HAL_I2CEx_ConfigDigitalFilter>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001664:	f000 f9ae 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000320 	.word	0x20000320
 8001670:	40005400 	.word	0x40005400
 8001674:	000186a0 	.word	0x000186a0

08001678 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800167c:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_RTC_Init+0x44>)
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <MX_RTC_Init+0x48>)
 8001680:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <MX_RTC_Init+0x44>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <MX_RTC_Init+0x44>)
 800168a:	227f      	movs	r2, #127	; 0x7f
 800168c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <MX_RTC_Init+0x44>)
 8001690:	22ff      	movs	r2, #255	; 0xff
 8001692:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <MX_RTC_Init+0x44>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <MX_RTC_Init+0x44>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <MX_RTC_Init+0x44>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_RTC_Init+0x44>)
 80016a8:	f002 ffb2 	bl	8004610 <HAL_RTC_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80016b2:	f000 f987 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000374 	.word	0x20000374
 80016c0:	40002800 	.word	0x40002800

080016c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_TIM10_Init+0x40>)
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <MX_TIM10_Init+0x44>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <MX_TIM10_Init+0x40>)
 80016d0:	22a7      	movs	r2, #167	; 0xa7
 80016d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_TIM10_Init+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xffff-1;
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <MX_TIM10_Init+0x40>)
 80016dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_TIM10_Init+0x40>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_TIM10_Init+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_TIM10_Init+0x40>)
 80016f0:	f003 f951 	bl	8004996 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80016fa:	f000 f963 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000394 	.word	0x20000394
 8001708:	40014400 	.word	0x40014400

0800170c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART3_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001744:	f003 fc32 	bl	8004fac <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f000 f939 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200003dc 	.word	0x200003dc
 800175c:	40004800 	.word	0x40004800

08001760 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001764:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800176a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800176e:	2204      	movs	r2, #4
 8001770:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001774:	2202      	movs	r2, #2
 8001776:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001780:	2202      	movs	r2, #2
 8001782:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001786:	2201      	movs	r2, #1
 8001788:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001798:	2201      	movs	r2, #1
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a4:	f001 ff8c 	bl	80036c0 <HAL_PCD_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 f909 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000420 	.word	0x20000420

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	4b50      	ldr	r3, [pc, #320]	; (8001918 <MX_GPIO_Init+0x15c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a4f      	ldr	r2, [pc, #316]	; (8001918 <MX_GPIO_Init+0x15c>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <MX_GPIO_Init+0x15c>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	61bb      	str	r3, [r7, #24]
 80017ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	4b49      	ldr	r3, [pc, #292]	; (8001918 <MX_GPIO_Init+0x15c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a48      	ldr	r2, [pc, #288]	; (8001918 <MX_GPIO_Init+0x15c>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b46      	ldr	r3, [pc, #280]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b42      	ldr	r3, [pc, #264]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a41      	ldr	r2, [pc, #260]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <MX_GPIO_Init+0x15c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <MX_GPIO_Init+0x15c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a3a      	ldr	r2, [pc, #232]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a33      	ldr	r2, [pc, #204]	; (8001918 <MX_GPIO_Init+0x15c>)
 800184c:	f043 0308 	orr.w	r3, r3, #8
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_GPIO_Init+0x15c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001880:	4826      	ldr	r0, [pc, #152]	; (800191c <MX_GPIO_Init+0x160>)
 8001882:	f001 fa19 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2140      	movs	r1, #64	; 0x40
 800188a:	4825      	ldr	r0, [pc, #148]	; (8001920 <MX_GPIO_Init+0x164>)
 800188c:	f001 fa14 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	481f      	ldr	r0, [pc, #124]	; (8001924 <MX_GPIO_Init+0x168>)
 80018a8:	f001 f842 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80018ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4815      	ldr	r0, [pc, #84]	; (800191c <MX_GPIO_Init+0x160>)
 80018c6:	f001 f833 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018ca:	2340      	movs	r3, #64	; 0x40
 80018cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	4619      	mov	r1, r3
 80018e0:	480f      	ldr	r0, [pc, #60]	; (8001920 <MX_GPIO_Init+0x164>)
 80018e2:	f001 f825 	bl	8002930 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4809      	ldr	r0, [pc, #36]	; (8001920 <MX_GPIO_Init+0x164>)
 80018fa:	f001 f819 	bl	8002930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2106      	movs	r1, #6
 8001902:	2028      	movs	r0, #40	; 0x28
 8001904:	f000 fcc2 	bl	800228c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001908:	2028      	movs	r0, #40	; 0x28
 800190a:	f000 fcdb 	bl	80022c4 <HAL_NVIC_EnableIRQ>

}
 800190e:	bf00      	nop
 8001910:	3730      	adds	r7, #48	; 0x30
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800
 800191c:	40020400 	.word	0x40020400
 8001920:	40021800 	.word	0x40021800
 8001924:	40020800 	.word	0x40020800

08001928 <delay_us>:

/* USER CODE BEGIN 4 */

//us delay func
void delay_us(uint32_t number)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim10,0);
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <delay_us+0x2c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24

	while(__HAL_TIM_GET_COUNTER(&htim10) < number);
 8001938:	bf00      	nop
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <delay_us+0x2c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d8f9      	bhi.n	800193a <delay_us+0x12>
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	20000394 	.word	0x20000394

08001958 <dht_handler>:

//basically print dht data
void dht_handler(void *parameter)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//portENTER_CRITICAL();
		getTemp();
 8001960:	f7ff faa6 	bl	8000eb0 <getTemp>
		//portEXIT_CRITICAL();
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001968:	f005 f9ac 	bl	8006cc4 <vTaskDelay>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800196c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001970:	f005 f9a8 	bl	8006cc4 <vTaskDelay>
		lcd_display_clear();
 8001974:	f7ff fc65 	bl	8001242 <lcd_display_clear>
		getTemp();
 8001978:	e7f2      	b.n	8001960 <dht_handler+0x8>

0800197a <btn_rtc_print_interrupt>:
	}
}

//if press btn -> print current time/date
void btn_rtc_print_interrupt(void)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	af00      	add	r7, sp, #0
	print_rtc();
 800197e:	f7ff fbcf 	bl	8001120 <print_rtc>
	osDelay(pdMS_TO_TICKS(1000));
 8001982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001986:	f004 f9f5 	bl	8005d74 <osDelay>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}

0800198e <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001996:	2001      	movs	r0, #1
 8001998:	f004 f9ec 	bl	8005d74 <osDelay>
 800199c:	e7fb      	b.n	8001996 <StartDefaultTask+0x8>
	...

080019a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019b2:	f000 fb6f 	bl	8002094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40001000 	.word	0x40001000

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	e7fe      	b.n	80019cc <Error_Handler+0x8>
	...

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_MspInit+0x54>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_MspInit+0x54>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_MspInit+0x54>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_MspInit+0x54>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_MspInit+0x54>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_MspInit+0x54>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	210f      	movs	r1, #15
 8001a12:	f06f 0001 	mvn.w	r0, #1
 8001a16:	f000 fc39 	bl	800228c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08e      	sub	sp, #56	; 0x38
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_ETH_MspInit+0x174>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f040 80a4 	bne.w	8001b94 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a52      	ldr	r2, [pc, #328]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a80:	61fb      	str	r3, [r7, #28]
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b42      	ldr	r3, [pc, #264]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a3d      	ldr	r2, [pc, #244]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	4b37      	ldr	r3, [pc, #220]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4a36      	ldr	r2, [pc, #216]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6313      	str	r3, [r2, #48]	; 0x30
 8001acc:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	4a2f      	ldr	r2, [pc, #188]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001ae2:	f043 0302 	orr.w	r3, r3, #2
 8001ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_ETH_MspInit+0x178>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001b10:	2332      	movs	r3, #50	; 0x32
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b20:	230b      	movs	r3, #11
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	481e      	ldr	r0, [pc, #120]	; (8001ba4 <HAL_ETH_MspInit+0x17c>)
 8001b2c:	f000 ff00 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001b30:	2386      	movs	r3, #134	; 0x86
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b40:	230b      	movs	r3, #11
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <HAL_ETH_MspInit+0x180>)
 8001b4c:	f000 fef0 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b62:	230b      	movs	r3, #11
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <HAL_ETH_MspInit+0x184>)
 8001b6e:	f000 fedf 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b84:	230b      	movs	r3, #11
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <HAL_ETH_MspInit+0x188>)
 8001b90:	f000 fece 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b94:	bf00      	nop
 8001b96:	3738      	adds	r7, #56	; 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40028000 	.word	0x40028000
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40021800 	.word	0x40021800

08001bb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	; 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a19      	ldr	r2, [pc, #100]	; (8001c38 <HAL_I2C_MspInit+0x84>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d12c      	bne.n	8001c30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a17      	ldr	r2, [pc, #92]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001bf2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c04:	2304      	movs	r3, #4
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480c      	ldr	r0, [pc, #48]	; (8001c40 <HAL_I2C_MspInit+0x8c>)
 8001c10:	f000 fe8e 	bl	8002930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a07      	ldr	r2, [pc, #28]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_I2C_MspInit+0x88>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c30:	bf00      	nop
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40005400 	.word	0x40005400
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020400 	.word	0x40020400

08001c44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08e      	sub	sp, #56	; 0x38
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c4c:	f107 0308 	add.w	r3, r7, #8
 8001c50:	2230      	movs	r2, #48	; 0x30
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f006 fd63 	bl	8008720 <memset>
  if(hrtc->Instance==RTC)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a0c      	ldr	r2, [pc, #48]	; (8001c90 <HAL_RTC_MspInit+0x4c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c64:	2320      	movs	r3, #32
 8001c66:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 fb0c 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001c7e:	f7ff fea1 	bl	80019c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_RTC_MspInit+0x50>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c88:	bf00      	nop
 8001c8a:	3738      	adds	r7, #56	; 0x38
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40002800 	.word	0x40002800
 8001c94:	42470e3c 	.word	0x42470e3c

08001c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x40>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_TIM_Base_MspInit+0x40>)
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_TIM_Base_MspInit+0x40>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40014400 	.word	0x40014400
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12c      	bne.n	8001d58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_UART_MspInit+0x8c>)
 8001d54:	f000 fdec 	bl	8002930 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004800 	.word	0x40004800
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020c00 	.word	0x40020c00

08001d6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d8c:	d13f      	bne.n	8001e0e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001daa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db8:	2303      	movs	r3, #3
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001dbc:	230a      	movs	r3, #10
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4815      	ldr	r0, [pc, #84]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001dc8:	f000 fdb2 	bl	8002930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	480e      	ldr	r0, [pc, #56]	; (8001e1c <HAL_PCD_MspInit+0xb0>)
 8001de2:	f000 fda5 	bl	8002930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dea:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	6353      	str	r3, [r2, #52]	; 0x34
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_PCD_MspInit+0xac>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020000 	.word	0x40020000

08001e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	; 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <HAL_InitTick+0xe4>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	4a32      	ldr	r2, [pc, #200]	; (8001f04 <HAL_InitTick+0xe4>)
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_InitTick+0xe4>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e4c:	f107 0210 	add.w	r2, r7, #16
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 f9e8 	bl	800422c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e5c:	6a3b      	ldr	r3, [r7, #32]
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e66:	f002 f9b9 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8001e6a:	6378      	str	r0, [r7, #52]	; 0x34
 8001e6c:	e004      	b.n	8001e78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e6e:	f002 f9b5 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8001e72:	4603      	mov	r3, r0
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	4a23      	ldr	r2, [pc, #140]	; (8001f08 <HAL_InitTick+0xe8>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	0c9b      	lsrs	r3, r3, #18
 8001e82:	3b01      	subs	r3, #1
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e86:	4b21      	ldr	r3, [pc, #132]	; (8001f0c <HAL_InitTick+0xec>)
 8001e88:	4a21      	ldr	r2, [pc, #132]	; (8001f10 <HAL_InitTick+0xf0>)
 8001e8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_InitTick+0xec>)
 8001e8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e92:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_InitTick+0xec>)
 8001e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e98:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_InitTick+0xec>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_InitTick+0xec>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_InitTick+0xec>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001eac:	4817      	ldr	r0, [pc, #92]	; (8001f0c <HAL_InitTick+0xec>)
 8001eae:	f002 fd72 	bl	8004996 <HAL_TIM_Base_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ec0:	4812      	ldr	r0, [pc, #72]	; (8001f0c <HAL_InitTick+0xec>)
 8001ec2:	f002 fe1f 	bl	8004b04 <HAL_TIM_Base_Start_IT>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d111      	bne.n	8001ef8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ed4:	2036      	movs	r0, #54	; 0x36
 8001ed6:	f000 f9f5 	bl	80022c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d808      	bhi.n	8001ef2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	2036      	movs	r0, #54	; 0x36
 8001ee6:	f000 f9d1 	bl	800228c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_InitTick+0xf4>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e002      	b.n	8001ef8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ef8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3738      	adds	r7, #56	; 0x38
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	2000093c 	.word	0x2000093c
 8001f10:	40001000 	.word	0x40001000
 8001f14:	20000004 	.word	0x20000004

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <NMI_Handler+0x4>

08001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f22:	e7fe      	b.n	8001f22 <HardFault_Handler+0x4>

08001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f28:	e7fe      	b.n	8001f28 <MemManage_Handler+0x4>

08001f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f2e:	e7fe      	b.n	8001f2e <BusFault_Handler+0x4>

08001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <UsageFault_Handler+0x4>

08001f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	btn_rtc_print_interrupt();
 8001f48:	f7ff fd17 	bl	800197a <btn_rtc_print_interrupt>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001f4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f50:	f000 fecc 	bl	8002cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f5c:	4802      	ldr	r0, [pc, #8]	; (8001f68 <TIM6_DAC_IRQHandler+0x10>)
 8001f5e:	f002 fe41 	bl	8004be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	2000093c 	.word	0x2000093c

08001f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <_sbrk+0x5c>)
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <_sbrk+0x60>)
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <_sbrk+0x64>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <_sbrk+0x68>)
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4413      	add	r3, r2
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d207      	bcs.n	8001fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f9c:	f006 fb86 	bl	80086ac <__errno>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001faa:	e009      	b.n	8001fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <_sbrk+0x64>)
 8001fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20030000 	.word	0x20030000
 8001fcc:	00000400 	.word	0x00000400
 8001fd0:	20000984 	.word	0x20000984
 8001fd4:	200053b0 	.word	0x200053b0

08001fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <SystemInit+0x20>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <SystemInit+0x20>)
 8001fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002034 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002002:	490e      	ldr	r1, [pc, #56]	; (800203c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002004:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002018:	4c0b      	ldr	r4, [pc, #44]	; (8002048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002026:	f7ff ffd7 	bl	8001fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202a:	f006 fb45 	bl	80086b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202e:	f7ff f9db 	bl	80013e8 <main>
  bx  lr    
 8002032:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002034:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002040:	0800a0a0 	.word	0x0800a0a0
  ldr r2, =_sbss
 8002044:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002048:	200053ac 	.word	0x200053ac

0800204c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <HAL_Init+0x40>)
 800205a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_Init+0x40>)
 8002066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_Init+0x40>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 f8fc 	bl	8002276 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207e:	200f      	movs	r0, #15
 8002080:	f7ff fece 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002084:	f7ff fca4 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008
 80020b8:	20000988 	.word	0x20000988

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000988 	.word	0x20000988

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff ffee 	bl	80020bc <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_Delay+0x44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffde 	bl	80020bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008

0800211c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002138:	4013      	ands	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800214e:	4a04      	ldr	r2, [pc, #16]	; (8002160 <__NVIC_SetPriorityGrouping+0x44>)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	60d3      	str	r3, [r2, #12]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <__NVIC_GetPriorityGrouping+0x18>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 0307 	and.w	r3, r3, #7
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	2b00      	cmp	r3, #0
 8002190:	db0b      	blt.n	80021aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4907      	ldr	r1, [pc, #28]	; (80021b8 <__NVIC_EnableIRQ+0x38>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	2001      	movs	r0, #1
 80021a2:	fa00 f202 	lsl.w	r2, r0, r2
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000e100 	.word	0xe000e100

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ff4c 	bl	800211c <__NVIC_SetPriorityGrouping>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229e:	f7ff ff61 	bl	8002164 <__NVIC_GetPriorityGrouping>
 80022a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	6978      	ldr	r0, [r7, #20]
 80022aa:	f7ff ffb1 	bl	8002210 <NVIC_EncodePriority>
 80022ae:	4602      	mov	r2, r0
 80022b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff ff80 	bl	80021bc <__NVIC_SetPriority>
}
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff54 	bl	8002180 <__NVIC_EnableIRQ>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06c      	b.n	80023cc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2223      	movs	r2, #35	; 0x23
 8002300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fb8f 	bl	8001a28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <HAL_ETH_Init+0xf4>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a30      	ldr	r2, [pc, #192]	; (80023d4 <HAL_ETH_Init+0xf4>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <HAL_ETH_Init+0xf4>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002326:	4b2c      	ldr	r3, [pc, #176]	; (80023d8 <HAL_ETH_Init+0xf8>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	4a2b      	ldr	r2, [pc, #172]	; (80023d8 <HAL_ETH_Init+0xf8>)
 800232c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002330:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002332:	4b29      	ldr	r3, [pc, #164]	; (80023d8 <HAL_ETH_Init+0xf8>)
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4927      	ldr	r1, [pc, #156]	; (80023d8 <HAL_ETH_Init+0xf8>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002340:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_ETH_Init+0xf8>)
 8002342:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800235a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800235c:	f7ff feae 	bl	80020bc <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002362:	e011      	b.n	8002388 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002364:	f7ff feaa 	bl	80020bc <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002372:	d909      	bls.n	8002388 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2204      	movs	r2, #4
 8002378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	22e0      	movs	r2, #224	; 0xe0
 8002380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e021      	b.n	80023cc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1e4      	bne.n	8002364 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f958 	bl	8002650 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f9ff 	bl	80027a4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa55 	bl	8002856 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	461a      	mov	r2, r3
 80023b2:	2100      	movs	r1, #0
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f9bd 	bl	8002734 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2210      	movs	r2, #16
 80023c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800

080023dc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4b51      	ldr	r3, [pc, #324]	; (8002538 <ETH_SetMACConfig+0x15c>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7c1b      	ldrb	r3, [r3, #16]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <ETH_SetMACConfig+0x28>
 80023fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002402:	e000      	b.n	8002406 <ETH_SetMACConfig+0x2a>
 8002404:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	7c5b      	ldrb	r3, [r3, #17]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <ETH_SetMACConfig+0x38>
 800240e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002412:	e000      	b.n	8002416 <ETH_SetMACConfig+0x3a>
 8002414:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002416:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800241c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7fdb      	ldrb	r3, [r3, #31]
 8002422:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002424:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800242a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	7f92      	ldrb	r2, [r2, #30]
 8002430:	2a00      	cmp	r2, #0
 8002432:	d102      	bne.n	800243a <ETH_SetMACConfig+0x5e>
 8002434:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002438:	e000      	b.n	800243c <ETH_SetMACConfig+0x60>
 800243a:	2200      	movs	r2, #0
                        macconf->Speed |
 800243c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7f1b      	ldrb	r3, [r3, #28]
 8002442:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002444:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800244a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	791b      	ldrb	r3, [r3, #4]
 8002450:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002452:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	f892 2020 	ldrb.w	r2, [r2, #32]
 800245a:	2a00      	cmp	r2, #0
 800245c:	d102      	bne.n	8002464 <ETH_SetMACConfig+0x88>
 800245e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002462:	e000      	b.n	8002466 <ETH_SetMACConfig+0x8a>
 8002464:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002466:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	7bdb      	ldrb	r3, [r3, #15]
 800246c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800246e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002474:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800247c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800247e:	4313      	orrs	r3, r2
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002496:	2001      	movs	r0, #1
 8002498:	f7ff fe1c 	bl	80020d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024b2:	4013      	ands	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ba:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024c2:	2a00      	cmp	r2, #0
 80024c4:	d101      	bne.n	80024ca <ETH_SetMACConfig+0xee>
 80024c6:	2280      	movs	r2, #128	; 0x80
 80024c8:	e000      	b.n	80024cc <ETH_SetMACConfig+0xf0>
 80024ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024cc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024da:	2a01      	cmp	r2, #1
 80024dc:	d101      	bne.n	80024e2 <ETH_SetMACConfig+0x106>
 80024de:	2208      	movs	r2, #8
 80024e0:	e000      	b.n	80024e4 <ETH_SetMACConfig+0x108>
 80024e2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024e4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024ec:	2a01      	cmp	r2, #1
 80024ee:	d101      	bne.n	80024f4 <ETH_SetMACConfig+0x118>
 80024f0:	2204      	movs	r2, #4
 80024f2:	e000      	b.n	80024f6 <ETH_SetMACConfig+0x11a>
 80024f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024fe:	2a01      	cmp	r2, #1
 8002500:	d101      	bne.n	8002506 <ETH_SetMACConfig+0x12a>
 8002502:	2202      	movs	r2, #2
 8002504:	e000      	b.n	8002508 <ETH_SetMACConfig+0x12c>
 8002506:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002508:	4313      	orrs	r3, r2
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002520:	2001      	movs	r0, #1
 8002522:	f7ff fdd7 	bl	80020d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	ff20810f 	.word	0xff20810f

0800253c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <ETH_SetDMAConfig+0x110>)
 8002556:	4013      	ands	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	7b1b      	ldrb	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <ETH_SetDMAConfig+0x2c>
 8002562:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002566:	e000      	b.n	800256a <ETH_SetDMAConfig+0x2e>
 8002568:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	7b5b      	ldrb	r3, [r3, #13]
 800256e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002570:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	7f52      	ldrb	r2, [r2, #29]
 8002576:	2a00      	cmp	r2, #0
 8002578:	d102      	bne.n	8002580 <ETH_SetDMAConfig+0x44>
 800257a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800257e:	e000      	b.n	8002582 <ETH_SetDMAConfig+0x46>
 8002580:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002582:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7b9b      	ldrb	r3, [r3, #14]
 8002588:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800258a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002590:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	7f1b      	ldrb	r3, [r3, #28]
 8002596:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002598:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	7f9b      	ldrb	r3, [r3, #30]
 800259e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80025a0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80025a6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ae:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025b0:	4313      	orrs	r3, r2
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c0:	461a      	mov	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7ff fd7e 	bl	80020d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e0:	461a      	mov	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	791b      	ldrb	r3, [r3, #4]
 80025ea:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025f0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025f6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025fc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002604:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002606:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800260e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002614:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800261e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002622:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002630:	2001      	movs	r0, #1
 8002632:	f7ff fd4f 	bl	80020d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f8de3f23 	.word	0xf8de3f23

08002650 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0a6      	sub	sp, #152	; 0x98
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002664:	2300      	movs	r3, #0
 8002666:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800268c:	2300      	movs	r3, #0
 800268e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002696:	2300      	movs	r3, #0
 8002698:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026c8:	4619      	mov	r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fe86 	bl	80023dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002704:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800270a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800270c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002710:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002718:	2300      	movs	r3, #0
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800271c:	2300      	movs	r3, #0
 800271e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ff08 	bl	800253c <ETH_SetDMAConfig>
}
 800272c:	bf00      	nop
 800272e:	3798      	adds	r7, #152	; 0x98
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3305      	adds	r3, #5
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	3204      	adds	r2, #4
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <ETH_MACAddressConfig+0x68>)
 8002756:	4413      	add	r3, r2
 8002758:	461a      	mov	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3303      	adds	r3, #3
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	061a      	lsls	r2, r3, #24
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3302      	adds	r3, #2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3301      	adds	r3, #1
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	4313      	orrs	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	7812      	ldrb	r2, [r2, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <ETH_MACAddressConfig+0x6c>)
 8002786:	4413      	add	r3, r2
 8002788:	461a      	mov	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	6013      	str	r3, [r2, #0]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40028040 	.word	0x40028040
 80027a0:	40028044 	.word	0x40028044

080027a4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e03e      	b.n	8002830 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	440b      	add	r3, r1
 80027c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	3206      	adds	r2, #6
 80027e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d80c      	bhi.n	8002814 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68d9      	ldr	r1, [r3, #12]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	e004      	b.n	800281e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	461a      	mov	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d9bd      	bls.n	80027b2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	611a      	str	r2, [r3, #16]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002856:	b480      	push	{r7}
 8002858:	b085      	sub	sp, #20
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e046      	b.n	80028f2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6919      	ldr	r1, [r3, #16]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2200      	movs	r2, #0
 8002892:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80028a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80028a8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	3212      	adds	r2, #18
 80028be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d80c      	bhi.n	80028e2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6919      	ldr	r1, [r3, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	4613      	mov	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60da      	str	r2, [r3, #12]
 80028e0:	e004      	b.n	80028ec <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	461a      	mov	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3301      	adds	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d9b5      	bls.n	8002864 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002922:	60da      	str	r2, [r3, #12]
}
 8002924:	bf00      	nop
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	e177      	b.n	8002c3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	f040 8166 	bne.w	8002c36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0303 	and.w	r3, r3, #3
 8002972:	2b01      	cmp	r3, #1
 8002974:	d005      	beq.n	8002982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297e:	2b02      	cmp	r3, #2
 8002980:	d130      	bne.n	80029e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	2203      	movs	r2, #3
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 0201 	and.w	r2, r3, #1
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	d017      	beq.n	8002a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d123      	bne.n	8002a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	08da      	lsrs	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3208      	adds	r2, #8
 8002a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	08da      	lsrs	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3208      	adds	r2, #8
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80c0 	beq.w	8002c36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a65      	ldr	r2, [pc, #404]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_GPIO_Init+0x324>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad2:	4a61      	ldr	r2, [pc, #388]	; (8002c58 <HAL_GPIO_Init+0x328>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a58      	ldr	r2, [pc, #352]	; (8002c5c <HAL_GPIO_Init+0x32c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d037      	beq.n	8002b6e <HAL_GPIO_Init+0x23e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a57      	ldr	r2, [pc, #348]	; (8002c60 <HAL_GPIO_Init+0x330>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d031      	beq.n	8002b6a <HAL_GPIO_Init+0x23a>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a56      	ldr	r2, [pc, #344]	; (8002c64 <HAL_GPIO_Init+0x334>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d02b      	beq.n	8002b66 <HAL_GPIO_Init+0x236>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a55      	ldr	r2, [pc, #340]	; (8002c68 <HAL_GPIO_Init+0x338>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d025      	beq.n	8002b62 <HAL_GPIO_Init+0x232>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a54      	ldr	r2, [pc, #336]	; (8002c6c <HAL_GPIO_Init+0x33c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d01f      	beq.n	8002b5e <HAL_GPIO_Init+0x22e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a53      	ldr	r2, [pc, #332]	; (8002c70 <HAL_GPIO_Init+0x340>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x22a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a52      	ldr	r2, [pc, #328]	; (8002c74 <HAL_GPIO_Init+0x344>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x226>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a51      	ldr	r2, [pc, #324]	; (8002c78 <HAL_GPIO_Init+0x348>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x222>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a50      	ldr	r2, [pc, #320]	; (8002c7c <HAL_GPIO_Init+0x34c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x21e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4f      	ldr	r2, [pc, #316]	; (8002c80 <HAL_GPIO_Init+0x350>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x21a>
 8002b46:	2309      	movs	r3, #9
 8002b48:	e012      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b4a:	230a      	movs	r3, #10
 8002b4c:	e010      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	e00e      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b52:	2307      	movs	r3, #7
 8002b54:	e00c      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b56:	2306      	movs	r3, #6
 8002b58:	e00a      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b5a:	2305      	movs	r3, #5
 8002b5c:	e008      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b5e:	2304      	movs	r3, #4
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b62:	2303      	movs	r3, #3
 8002b64:	e004      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_Init+0x240>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	f002 0203 	and.w	r2, r2, #3
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b80:	4935      	ldr	r1, [pc, #212]	; (8002c58 <HAL_GPIO_Init+0x328>)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb2:	4a34      	ldr	r2, [pc, #208]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb8:	4b32      	ldr	r3, [pc, #200]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bdc:	4a29      	ldr	r2, [pc, #164]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c06:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c30:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_GPIO_Init+0x354>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	f67f ae84 	bls.w	800294c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3724      	adds	r7, #36	; 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40021400 	.word	0x40021400
 8002c74:	40021800 	.word	0x40021800
 8002c78:	40021c00 	.word	0x40021c00
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40022400 	.word	0x40022400
 8002c84:	40013c00 	.word	0x40013c00

08002c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	887b      	ldrh	r3, [r7, #2]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
 8002ca4:	e001      	b.n	8002caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd4:	e003      	b.n	8002cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	041a      	lsls	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	619a      	str	r2, [r3, #24]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d006      	beq.n	8002d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d08:	88fb      	ldrh	r3, [r7, #6]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f806 	bl	8002d1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40013c00 	.word	0x40013c00

08002d1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e12b      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7fe ff2a 	bl	8001bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2224      	movs	r2, #36	; 0x24
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d98:	f001 fa20 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a81      	ldr	r2, [pc, #516]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d807      	bhi.n	8002db8 <HAL_I2C_Init+0x84>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a80      	ldr	r2, [pc, #512]	; (8002fac <HAL_I2C_Init+0x278>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e006      	b.n	8002dc6 <HAL_I2C_Init+0x92>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4a7d      	ldr	r2, [pc, #500]	; (8002fb0 <HAL_I2C_Init+0x27c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bf94      	ite	ls
 8002dc0:	2301      	movls	r3, #1
 8002dc2:	2300      	movhi	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0e7      	b.n	8002f9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4a78      	ldr	r2, [pc, #480]	; (8002fb4 <HAL_I2C_Init+0x280>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a6a      	ldr	r2, [pc, #424]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d802      	bhi.n	8002e08 <HAL_I2C_Init+0xd4>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	3301      	adds	r3, #1
 8002e06:	e009      	b.n	8002e1c <HAL_I2C_Init+0xe8>
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_I2C_Init+0x284>)
 8002e14:	fba2 2303 	umull	r2, r3, r2, r3
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	495c      	ldr	r1, [pc, #368]	; (8002fa8 <HAL_I2C_Init+0x274>)
 8002e38:	428b      	cmp	r3, r1
 8002e3a:	d819      	bhi.n	8002e70 <HAL_I2C_Init+0x13c>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e59      	subs	r1, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e4a:	1c59      	adds	r1, r3, #1
 8002e4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e50:	400b      	ands	r3, r1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_I2C_Init+0x138>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e59      	subs	r1, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6a:	e051      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	e04f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d111      	bne.n	8002e9c <HAL_I2C_Init+0x168>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	bf0c      	ite	eq
 8002e94:	2301      	moveq	r3, #1
 8002e96:	2300      	movne	r3, #0
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e012      	b.n	8002ec2 <HAL_I2C_Init+0x18e>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e58      	subs	r0, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6859      	ldr	r1, [r3, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	0099      	lsls	r1, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_I2C_Init+0x196>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e022      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_I2C_Init+0x1bc>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1e58      	subs	r0, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eee:	e00f      	b.n	8002f10 <HAL_I2C_Init+0x1dc>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	0099      	lsls	r1, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f06:	3301      	adds	r3, #1
 8002f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	6809      	ldr	r1, [r1, #0]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6911      	ldr	r1, [r2, #16]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68d2      	ldr	r2, [r2, #12]
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	000186a0 	.word	0x000186a0
 8002fac:	001e847f 	.word	0x001e847f
 8002fb0:	003d08ff 	.word	0x003d08ff
 8002fb4:	431bde83 	.word	0x431bde83
 8002fb8:	10624dd3 	.word	0x10624dd3

08002fbc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af02      	add	r7, sp, #8
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	460b      	mov	r3, r1
 8002fca:	817b      	strh	r3, [r7, #10]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fd0:	f7ff f874 	bl	80020bc <HAL_GetTick>
 8002fd4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	f040 80e0 	bne.w	80031a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	4970      	ldr	r1, [pc, #448]	; (80031b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 f964 	bl	80032bc <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e0d3      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_I2C_Master_Transmit+0x50>
 8003008:	2302      	movs	r3, #2
 800300a:	e0cc      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b01      	cmp	r3, #1
 8003020:	d007      	beq.n	8003032 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0201 	orr.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003040:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2221      	movs	r2, #33	; 0x21
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2210      	movs	r2, #16
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	893a      	ldrh	r2, [r7, #8]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29a      	uxth	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4a50      	ldr	r2, [pc, #320]	; (80031b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6a3a      	ldr	r2, [r7, #32]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f89c 	bl	80031b8 <I2C_MasterRequestWrite>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e08d      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030a0:	e066      	b.n	8003170 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f9de 	bl	8003468 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00d      	beq.n	80030ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d107      	bne.n	80030ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06b      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b04      	cmp	r3, #4
 800310a:	d11b      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x188>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d017      	beq.n	8003144 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6a39      	ldr	r1, [r7, #32]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 f9ce 	bl	80034ea <I2C_WaitOnBTFFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00d      	beq.n	8003170 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	2b04      	cmp	r3, #4
 800315a:	d107      	bne.n	800316c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e01a      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d194      	bne.n	80030a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	00100002 	.word	0x00100002
 80031b4:	ffff0000 	.word	0xffff0000

080031b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	460b      	mov	r3, r1
 80031c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d006      	beq.n	80031e2 <I2C_MasterRequestWrite+0x2a>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d003      	beq.n	80031e2 <I2C_MasterRequestWrite+0x2a>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031e0:	d108      	bne.n	80031f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e00b      	b.n	800320c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f8:	2b12      	cmp	r3, #18
 80031fa:	d107      	bne.n	800320c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f84f 	bl	80032bc <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003232:	d103      	bne.n	800323c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e035      	b.n	80032ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003248:	d108      	bne.n	800325c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800324a:	897b      	ldrh	r3, [r7, #10]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003258:	611a      	str	r2, [r3, #16]
 800325a:	e01b      	b.n	8003294 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800325c:	897b      	ldrh	r3, [r7, #10]
 800325e:	11db      	asrs	r3, r3, #7
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 0306 	and.w	r3, r3, #6
 8003266:	b2db      	uxtb	r3, r3
 8003268:	f063 030f 	orn	r3, r3, #15
 800326c:	b2da      	uxtb	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	490e      	ldr	r1, [pc, #56]	; (80032b4 <I2C_MasterRequestWrite+0xfc>)
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f875 	bl	800336a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e010      	b.n	80032ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800328a:	897b      	ldrh	r3, [r7, #10]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4907      	ldr	r1, [pc, #28]	; (80032b8 <I2C_MasterRequestWrite+0x100>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f865 	bl	800336a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	00010008 	.word	0x00010008
 80032b8:	00010002 	.word	0x00010002

080032bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032cc:	e025      	b.n	800331a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d4:	d021      	beq.n	800331a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fe fef1 	bl	80020bc <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d116      	bne.n	800331a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f043 0220 	orr.w	r2, r3, #32
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e023      	b.n	8003362 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10d      	bne.n	8003340 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf0c      	ite	eq
 8003336:	2301      	moveq	r3, #1
 8003338:	2300      	movne	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	461a      	mov	r2, r3
 800333e:	e00c      	b.n	800335a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	43da      	mvns	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4013      	ands	r3, r2
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	79fb      	ldrb	r3, [r7, #7]
 800335c:	429a      	cmp	r2, r3
 800335e:	d0b6      	beq.n	80032ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003378:	e051      	b.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003388:	d123      	bne.n	80033d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003398:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f043 0204 	orr.w	r2, r3, #4
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e046      	b.n	8003460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d021      	beq.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7fe fe6f 	bl	80020bc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d116      	bne.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e020      	b.n	8003460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	0c1b      	lsrs	r3, r3, #16
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d10c      	bne.n	8003442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	4013      	ands	r3, r2
 8003434:	b29b      	uxth	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	e00b      	b.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	43da      	mvns	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d18d      	bne.n	800337a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003474:	e02d      	b.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f878 	bl	800356c <I2C_IsAcknowledgeFailed>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e02d      	b.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d021      	beq.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348e:	f7fe fe15 	bl	80020bc <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	d302      	bcc.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d116      	bne.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f043 0220 	orr.w	r2, r3, #32
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e007      	b.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b80      	cmp	r3, #128	; 0x80
 80034de:	d1ca      	bne.n	8003476 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034f6:	e02d      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f837 	bl	800356c <I2C_IsAcknowledgeFailed>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e02d      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d021      	beq.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003510:	f7fe fdd4 	bl	80020bc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d116      	bne.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e007      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d1ca      	bne.n	80034f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	d11b      	bne.n	80035bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800358c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d129      	bne.n	8003634 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0210 	bic.w	r2, r2, #16
 8003606:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003642:	b480      	push	{r7}
 8003644:	b085      	sub	sp, #20
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	d12a      	bne.n	80036b2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	; 0x24
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800367c:	89fb      	ldrh	r3, [r7, #14]
 800367e:	f023 030f 	bic.w	r3, r3, #15
 8003682:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b29a      	uxth	r2, r3
 8003688:	89fb      	ldrh	r3, [r7, #14]
 800368a:	4313      	orrs	r3, r2
 800368c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	89fa      	ldrh	r2, [r7, #14]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036ae:	2300      	movs	r3, #0
 80036b0:	e000      	b.n	80036b4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
  }
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c2:	b08f      	sub	sp, #60	; 0x3c
 80036c4:	af0a      	add	r7, sp, #40	; 0x28
 80036c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e10f      	b.n	80038f2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d106      	bne.n	80036f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7fe fb3d 	bl	8001d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2203      	movs	r2, #3
 80036f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d102      	bne.n	800370c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f001 ff6e 	bl	80055f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	687e      	ldr	r6, [r7, #4]
 800371e:	466d      	mov	r5, sp
 8003720:	f106 0410 	add.w	r4, r6, #16
 8003724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003726:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800372a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800372c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003730:	e885 0003 	stmia.w	r5, {r0, r1}
 8003734:	1d33      	adds	r3, r6, #4
 8003736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003738:	6838      	ldr	r0, [r7, #0]
 800373a:	f001 fef9 	bl	8005530 <USB_CoreInit>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0d0      	b.n	80038f2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2100      	movs	r1, #0
 8003756:	4618      	mov	r0, r3
 8003758:	f001 ff5c 	bl	8005614 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e04a      	b.n	80037f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	333d      	adds	r3, #61	; 0x3d
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	333c      	adds	r3, #60	; 0x3c
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	b298      	uxth	r0, r3
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3344      	adds	r3, #68	; 0x44
 800379e:	4602      	mov	r2, r0
 80037a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3340      	adds	r3, #64	; 0x40
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037b6:	7bfa      	ldrb	r2, [r7, #15]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3348      	adds	r3, #72	; 0x48
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037ca:	7bfa      	ldrb	r2, [r7, #15]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	334c      	adds	r3, #76	; 0x4c
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037de:	7bfa      	ldrb	r2, [r7, #15]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	3354      	adds	r3, #84	; 0x54
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	3301      	adds	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	7bfa      	ldrb	r2, [r7, #15]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d3af      	bcc.n	8003762 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003802:	2300      	movs	r3, #0
 8003804:	73fb      	strb	r3, [r7, #15]
 8003806:	e044      	b.n	8003892 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003808:	7bfa      	ldrb	r2, [r7, #15]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800381e:	7bfa      	ldrb	r2, [r7, #15]
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800384a:	7bfa      	ldrb	r2, [r7, #15]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003860:	7bfa      	ldrb	r2, [r7, #15]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003876:	7bfa      	ldrb	r2, [r7, #15]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	3301      	adds	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	7bfa      	ldrb	r2, [r7, #15]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d3b5      	bcc.n	8003808 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	687e      	ldr	r6, [r7, #4]
 80038a4:	466d      	mov	r5, sp
 80038a6:	f106 0410 	add.w	r4, r6, #16
 80038aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80038ba:	1d33      	adds	r3, r6, #4
 80038bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038be:	6838      	ldr	r0, [r7, #0]
 80038c0:	f001 fef4 	bl	80056ac <USB_DevInit>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00d      	b.n	80038f2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f002 f8bf 	bl	8005a6e <USB_DevDisconnect>

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080038fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e267      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d075      	beq.n	8003a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391a:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d00c      	beq.n	8003940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003926:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392e:	2b08      	cmp	r3, #8
 8003930:	d112      	bne.n	8003958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003932:	4b82      	ldr	r3, [pc, #520]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393e:	d10b      	bne.n	8003958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	4b7e      	ldr	r3, [pc, #504]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d05b      	beq.n	8003a04 <HAL_RCC_OscConfig+0x108>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d157      	bne.n	8003a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e242      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003960:	d106      	bne.n	8003970 <HAL_RCC_OscConfig+0x74>
 8003962:	4b76      	ldr	r3, [pc, #472]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a75      	ldr	r2, [pc, #468]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	e01d      	b.n	80039ac <HAL_RCC_OscConfig+0xb0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x98>
 800397a:	4b70      	ldr	r3, [pc, #448]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a6f      	ldr	r2, [pc, #444]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b6d      	ldr	r3, [pc, #436]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6c      	ldr	r2, [pc, #432]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0xb0>
 8003994:	4b69      	ldr	r3, [pc, #420]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a68      	ldr	r2, [pc, #416]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b66      	ldr	r3, [pc, #408]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a65      	ldr	r2, [pc, #404]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 80039a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fe fb82 	bl	80020bc <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fe fb7e 	bl	80020bc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e207      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b5b      	ldr	r3, [pc, #364]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0xc0>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fe fb6e 	bl	80020bc <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fe fb6a 	bl	80020bc <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e1f3      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f6:	4b51      	ldr	r3, [pc, #324]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0xe8>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d063      	beq.n	8003ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a12:	4b4a      	ldr	r3, [pc, #296]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1e:	4b47      	ldr	r3, [pc, #284]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d11c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b44      	ldr	r3, [pc, #272]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d116      	bne.n	8003a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a36:	4b41      	ldr	r3, [pc, #260]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_RCC_OscConfig+0x152>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d001      	beq.n	8003a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e1c7      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4e:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4937      	ldr	r1, [pc, #220]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	e03a      	b.n	8003ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d020      	beq.n	8003aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a6c:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <HAL_RCC_OscConfig+0x244>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fe fb23 	bl	80020bc <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a7a:	f7fe fb1f 	bl	80020bc <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e1a8      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8c:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a98:	4b28      	ldr	r3, [pc, #160]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4925      	ldr	r1, [pc, #148]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	600b      	str	r3, [r1, #0]
 8003aac:	e015      	b.n	8003ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x244>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fb02 	bl	80020bc <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003abc:	f7fe fafe 	bl	80020bc <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e187      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ace:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d036      	beq.n	8003b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_RCC_OscConfig+0x248>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fe fae2 	bl	80020bc <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afc:	f7fe fade 	bl	80020bc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e167      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_OscConfig+0x240>)
 8003b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0f0      	beq.n	8003afc <HAL_RCC_OscConfig+0x200>
 8003b1a:	e01b      	b.n	8003b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_RCC_OscConfig+0x248>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b22:	f7fe facb 	bl	80020bc <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b28:	e00e      	b.n	8003b48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b2a:	f7fe fac7 	bl	80020bc <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d907      	bls.n	8003b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e150      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	42470000 	.word	0x42470000
 8003b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1ea      	bne.n	8003b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 8097 	beq.w	8003c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b81      	ldr	r3, [pc, #516]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b7d      	ldr	r3, [pc, #500]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	4a7c      	ldr	r2, [pc, #496]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6413      	str	r3, [r2, #64]	; 0x40
 8003b82:	4b7a      	ldr	r3, [pc, #488]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b77      	ldr	r3, [pc, #476]	; (8003d70 <HAL_RCC_OscConfig+0x474>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d118      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9e:	4b74      	ldr	r3, [pc, #464]	; (8003d70 <HAL_RCC_OscConfig+0x474>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a73      	ldr	r2, [pc, #460]	; (8003d70 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003baa:	f7fe fa87 	bl	80020bc <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb2:	f7fe fa83 	bl	80020bc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e10c      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc4:	4b6a      	ldr	r3, [pc, #424]	; (8003d70 <HAL_RCC_OscConfig+0x474>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <HAL_RCC_OscConfig+0x2ea>
 8003bd8:	4b64      	ldr	r3, [pc, #400]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	4a63      	ldr	r2, [pc, #396]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003bde:	f043 0301 	orr.w	r3, r3, #1
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70
 8003be4:	e01c      	b.n	8003c20 <HAL_RCC_OscConfig+0x324>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x30c>
 8003bee:	4b5f      	ldr	r3, [pc, #380]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a5e      	ldr	r2, [pc, #376]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	4b5c      	ldr	r3, [pc, #368]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfe:	4a5b      	ldr	r2, [pc, #364]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6713      	str	r3, [r2, #112]	; 0x70
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0x324>
 8003c08:	4b58      	ldr	r3, [pc, #352]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a57      	ldr	r2, [pc, #348]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c0e:	f023 0301 	bic.w	r3, r3, #1
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
 8003c14:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	4a54      	ldr	r2, [pc, #336]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	f023 0304 	bic.w	r3, r3, #4
 8003c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d015      	beq.n	8003c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c28:	f7fe fa48 	bl	80020bc <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2e:	e00a      	b.n	8003c46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c30:	f7fe fa44 	bl	80020bc <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e0cb      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0ee      	beq.n	8003c30 <HAL_RCC_OscConfig+0x334>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c54:	f7fe fa32 	bl	80020bc <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fe fa2e 	bl	80020bc <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0b5      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c72:	4b3e      	ldr	r3, [pc, #248]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1ee      	bne.n	8003c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d105      	bne.n	8003c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c84:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	4a38      	ldr	r2, [pc, #224]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a1 	beq.w	8003ddc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9a:	4b34      	ldr	r3, [pc, #208]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d05c      	beq.n	8003d60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d141      	bne.n	8003d32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <HAL_RCC_OscConfig+0x478>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fe fa02 	bl	80020bc <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbc:	f7fe f9fe 	bl	80020bc <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e087      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cce:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	019b      	lsls	r3, r3, #6
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	491b      	ldr	r1, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x478>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f9d7 	bl	80020bc <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe f9d3 	bl	80020bc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e05c      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x416>
 8003d30:	e054      	b.n	8003ddc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b10      	ldr	r3, [pc, #64]	; (8003d74 <HAL_RCC_OscConfig+0x478>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe f9c0 	bl	80020bc <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe f9bc 	bl	80020bc <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e045      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_RCC_OscConfig+0x470>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x444>
 8003d5e:	e03d      	b.n	8003ddc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e038      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40007000 	.word	0x40007000
 8003d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCC_OscConfig+0x4ec>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d028      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d121      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d11a      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d111      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d001      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800

08003dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0cc      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e00:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d90c      	bls.n	8003e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b65      	ldr	r3, [pc, #404]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b63      	ldr	r3, [pc, #396]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0b8      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e40:	4b59      	ldr	r3, [pc, #356]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	4a58      	ldr	r2, [pc, #352]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e58:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e64:	4b50      	ldr	r3, [pc, #320]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	494d      	ldr	r1, [pc, #308]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d044      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d107      	bne.n	8003e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8a:	4b47      	ldr	r3, [pc, #284]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d119      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e07f      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d003      	beq.n	8003eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06f      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e067      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4934      	ldr	r1, [pc, #208]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003edc:	f7fe f8ee 	bl	80020bc <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fe f8ea 	bl	80020bc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e04f      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d20c      	bcs.n	8003f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e032      	b.n	8003f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	4916      	ldr	r1, [pc, #88]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5e:	4b12      	ldr	r3, [pc, #72]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	490e      	ldr	r1, [pc, #56]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f72:	f000 f821 	bl	8003fb8 <HAL_RCC_GetSysClockFreq>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	091b      	lsrs	r3, r3, #4
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	490a      	ldr	r1, [pc, #40]	; (8003fac <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	5ccb      	ldrb	r3, [r1, r3]
 8003f86:	fa22 f303 	lsr.w	r3, r2, r3
 8003f8a:	4a09      	ldr	r2, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fd ff44 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023c00 	.word	0x40023c00
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	08009fb4 	.word	0x08009fb4
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	20000004 	.word	0x20000004

08003fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fbc:	b094      	sub	sp, #80	; 0x50
 8003fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc8:	2300      	movs	r3, #0
 8003fca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fd0:	4b79      	ldr	r3, [pc, #484]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d00d      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	f200 80e1 	bhi.w	80041a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_RCC_GetSysClockFreq+0x34>
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fea:	e0db      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fec:	4b73      	ldr	r3, [pc, #460]	; (80041bc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ff0:	e0db      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ff2:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ff6:	e0d8      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff8:	4b6f      	ldr	r3, [pc, #444]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004002:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d063      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400e:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	2200      	movs	r2, #0
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38
 8004018:	63fa      	str	r2, [r7, #60]	; 0x3c
 800401a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
 8004022:	2300      	movs	r3, #0
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
 8004026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800402a:	4622      	mov	r2, r4
 800402c:	462b      	mov	r3, r5
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	0159      	lsls	r1, r3, #5
 8004038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800403c:	0150      	lsls	r0, r2, #5
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4621      	mov	r1, r4
 8004044:	1a51      	subs	r1, r2, r1
 8004046:	6139      	str	r1, [r7, #16]
 8004048:	4629      	mov	r1, r5
 800404a:	eb63 0301 	sbc.w	r3, r3, r1
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800405c:	4659      	mov	r1, fp
 800405e:	018b      	lsls	r3, r1, #6
 8004060:	4651      	mov	r1, sl
 8004062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004066:	4651      	mov	r1, sl
 8004068:	018a      	lsls	r2, r1, #6
 800406a:	4651      	mov	r1, sl
 800406c:	ebb2 0801 	subs.w	r8, r2, r1
 8004070:	4659      	mov	r1, fp
 8004072:	eb63 0901 	sbc.w	r9, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408a:	4690      	mov	r8, r2
 800408c:	4699      	mov	r9, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb18 0303 	adds.w	r3, r8, r3
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	462b      	mov	r3, r5
 8004098:	eb49 0303 	adc.w	r3, r9, r3
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040aa:	4629      	mov	r1, r5
 80040ac:	024b      	lsls	r3, r1, #9
 80040ae:	4621      	mov	r1, r4
 80040b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040b4:	4621      	mov	r1, r4
 80040b6:	024a      	lsls	r2, r1, #9
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040be:	2200      	movs	r2, #0
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c8:	f7fc fd6e 	bl	8000ba8 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040d4:	e058      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	2200      	movs	r2, #0
 80040de:	4618      	mov	r0, r3
 80040e0:	4611      	mov	r1, r2
 80040e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	f04f 0000 	mov.w	r0, #0
 80040f8:	f04f 0100 	mov.w	r1, #0
 80040fc:	0159      	lsls	r1, r3, #5
 80040fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004102:	0150      	lsls	r0, r2, #5
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4641      	mov	r1, r8
 800410a:	ebb2 0a01 	subs.w	sl, r2, r1
 800410e:	4649      	mov	r1, r9
 8004110:	eb63 0b01 	sbc.w	fp, r3, r1
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004128:	ebb2 040a 	subs.w	r4, r2, sl
 800412c:	eb63 050b 	sbc.w	r5, r3, fp
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	00eb      	lsls	r3, r5, #3
 800413a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800413e:	00e2      	lsls	r2, r4, #3
 8004140:	4614      	mov	r4, r2
 8004142:	461d      	mov	r5, r3
 8004144:	4643      	mov	r3, r8
 8004146:	18e3      	adds	r3, r4, r3
 8004148:	603b      	str	r3, [r7, #0]
 800414a:	464b      	mov	r3, r9
 800414c:	eb45 0303 	adc.w	r3, r5, r3
 8004150:	607b      	str	r3, [r7, #4]
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800415e:	4629      	mov	r1, r5
 8004160:	028b      	lsls	r3, r1, #10
 8004162:	4621      	mov	r1, r4
 8004164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004168:	4621      	mov	r1, r4
 800416a:	028a      	lsls	r2, r1, #10
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004172:	2200      	movs	r2, #0
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	61fa      	str	r2, [r7, #28]
 8004178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800417c:	f7fc fd14 	bl	8000ba8 <__aeabi_uldivmod>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4613      	mov	r3, r2
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f003 0303 	and.w	r3, r3, #3
 8004192:	3301      	adds	r3, #1
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800419a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a2:	e002      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetSysClockFreq+0x204>)
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3750      	adds	r7, #80	; 0x50
 80041b0:	46bd      	mov	sp, r7
 80041b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	007a1200 	.word	0x007a1200

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000000 	.word	0x20000000

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	08009fc4 	.word	0x08009fc4

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004208:	f7ff ffdc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0b5b      	lsrs	r3, r3, #13
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	08009fc4 	.word	0x08009fc4

0800422c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	220f      	movs	r2, #15
 800423a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800423c:	4b12      	ldr	r3, [pc, #72]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0203 	and.w	r2, r3, #3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_GetClockConfig+0x5c>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	08db      	lsrs	r3, r3, #3
 8004266:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800426e:	4b07      	ldr	r3, [pc, #28]	; (800428c <HAL_RCC_GetClockConfig+0x60>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 020f 	and.w	r2, r3, #15
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	601a      	str	r2, [r3, #0]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	40023c00 	.word	0x40023c00

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d075      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042c4:	4b91      	ldr	r3, [pc, #580]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ca:	f7fd fef7 	bl	80020bc <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042d2:	f7fd fef3 	bl	80020bc <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e189      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e4:	4b8a      	ldr	r3, [pc, #552]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	019a      	lsls	r2, r3, #6
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	071b      	lsls	r3, r3, #28
 8004308:	4981      	ldr	r1, [pc, #516]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800431c:	4b7c      	ldr	r3, [pc, #496]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004322:	0f1b      	lsrs	r3, r3, #28
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	019a      	lsls	r2, r3, #6
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	431a      	orrs	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	071b      	lsls	r3, r3, #28
 800433c:	4974      	ldr	r1, [pc, #464]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004344:	4b72      	ldr	r3, [pc, #456]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434a:	f023 021f 	bic.w	r2, r3, #31
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	3b01      	subs	r3, #1
 8004354:	496e      	ldr	r1, [pc, #440]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00d      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	019a      	lsls	r2, r3, #6
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	071b      	lsls	r3, r3, #28
 800437c:	4964      	ldr	r1, [pc, #400]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004384:	4b61      	ldr	r3, [pc, #388]	; (800450c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800438a:	f7fd fe97 	bl	80020bc <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004392:	f7fd fe93 	bl	80020bc <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e129      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a4:	4b5a      	ldr	r3, [pc, #360]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d105      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d079      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043c8:	4b52      	ldr	r3, [pc, #328]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ce:	f7fd fe75 	bl	80020bc <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80043d6:	f7fd fe71 	bl	80020bc <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e107      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e8:	4b49      	ldr	r3, [pc, #292]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f4:	d0ef      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004408:	0f1b      	lsrs	r3, r3, #28
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	019a      	lsls	r2, r3, #6
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	431a      	orrs	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	071b      	lsls	r3, r3, #28
 8004422:	493b      	ldr	r1, [pc, #236]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800442a:	4b39      	ldr	r3, [pc, #228]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800442c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	3b01      	subs	r3, #1
 800443a:	021b      	lsls	r3, r3, #8
 800443c:	4934      	ldr	r1, [pc, #208]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01e      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004450:	4b2f      	ldr	r3, [pc, #188]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	0e1b      	lsrs	r3, r3, #24
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	019a      	lsls	r2, r3, #6
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	061b      	lsls	r3, r3, #24
 8004468:	431a      	orrs	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	071b      	lsls	r3, r3, #28
 8004470:	4927      	ldr	r1, [pc, #156]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004478:	4b25      	ldr	r3, [pc, #148]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800447a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800447e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	4922      	ldr	r1, [pc, #136]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800448e:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004494:	f7fd fe12 	bl	80020bc <HAL_GetTick>
 8004498:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800449c:	f7fd fe0e 	bl	80020bc <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0a4      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ba:	d1ef      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 808b 	beq.w	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	4a0f      	ldr	r2, [pc, #60]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	; 0x40
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044f2:	f7fd fde3 	bl	80020bc <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f8:	e010      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fd fddf 	bl	80020bc <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d909      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e075      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800450c:	42470068 	.word	0x42470068
 8004510:	40023800 	.word	0x40023800
 8004514:	42470070 	.word	0x42470070
 8004518:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800451c:	4b38      	ldr	r3, [pc, #224]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0e8      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004528:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004530:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02f      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	429a      	cmp	r2, r3
 8004544:	d028      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004546:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004550:	4b2d      	ldr	r3, [pc, #180]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004556:	4b2c      	ldr	r3, [pc, #176]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800455c:	4a29      	ldr	r2, [pc, #164]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d114      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800456e:	f7fd fda5 	bl	80020bc <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	e00a      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7fd fda1 	bl	80020bc <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	; 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e035      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ee      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045a4:	d10d      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80045a6:	4b17      	ldr	r3, [pc, #92]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ba:	4912      	ldr	r1, [pc, #72]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]
 80045c0:	e005      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	4a0f      	ldr	r2, [pc, #60]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045c8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045cc:	6093      	str	r3, [r2, #8]
 80045ce:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045da:	490a      	ldr	r1, [pc, #40]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d004      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80045f4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40007000 	.word	0x40007000
 8004604:	40023800 	.word	0x40023800
 8004608:	42470e40 	.word	0x42470e40
 800460c:	424711e0 	.word	0x424711e0

08004610 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e066      	b.n	80046f4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	7f5b      	ldrb	r3, [r3, #29]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fd fb04 	bl	8001c44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	22ca      	movs	r2, #202	; 0xca
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2253      	movs	r2, #83	; 0x53
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f927 	bl	80048a6 <RTC_EnterInitMode>
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d12c      	bne.n	80046bc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004674:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6899      	ldr	r1, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	68d2      	ldr	r2, [r2, #12]
 800469c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6919      	ldr	r1, [r3, #16]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	041a      	lsls	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f92e 	bl	8004914 <RTC_ExitInitMode>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d113      	bne.n	80046ea <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699a      	ldr	r2, [r3, #24]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	22ff      	movs	r2, #255	; 0xff
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800472e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004732:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	0c1b      	lsrs	r3, r3, #16
 8004738:	b2db      	uxtb	r3, r3
 800473a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473e:	b2da      	uxtb	r2, r3
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	b2db      	uxtb	r3, r3
 800474a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474e:	b2da      	uxtb	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	0d9b      	lsrs	r3, r3, #22
 8004766:	b2db      	uxtb	r3, r3
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	b2da      	uxtb	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d11a      	bne.n	80047ae <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f8ee 	bl	800495e <RTC_Bcd2ToByte>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	785b      	ldrb	r3, [r3, #1]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 f8e5 	bl	800495e <RTC_Bcd2ToByte>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	789b      	ldrb	r3, [r3, #2]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f8dc 	bl	800495e <RTC_Bcd2ToByte>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80047d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	0c1b      	lsrs	r3, r3, #16
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	0a1b      	lsrs	r3, r3, #8
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	0b5b      	lsrs	r3, r3, #13
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11a      	bne.n	800484c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	78db      	ldrb	r3, [r3, #3]
 800481a:	4618      	mov	r0, r3
 800481c:	f000 f89f 	bl	800495e <RTC_Bcd2ToByte>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	4618      	mov	r0, r3
 800482e:	f000 f896 	bl	800495e <RTC_Bcd2ToByte>
 8004832:	4603      	mov	r3, r0
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	789b      	ldrb	r3, [r3, #2]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f88d 	bl	800495e <RTC_Bcd2ToByte>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004870:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004872:	f7fd fc23 	bl	80020bc <HAL_GetTick>
 8004876:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004878:	e009      	b.n	800488e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800487a:	f7fd fc1f 	bl	80020bc <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004888:	d901      	bls.n	800488e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e007      	b.n	800489e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ee      	beq.n	800487a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d122      	bne.n	800490a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048d4:	f7fd fbf2 	bl	80020bc <HAL_GetTick>
 80048d8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048da:	e00c      	b.n	80048f6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048dc:	f7fd fbee 	bl	80020bc <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ea:	d904      	bls.n	80048f6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2204      	movs	r2, #4
 80048f0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <RTC_EnterInitMode+0x64>
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d1e8      	bne.n	80048dc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800492e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff ff89 	bl	8004856 <HAL_RTC_WaitForSynchro>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2204      	movs	r2, #4
 800494e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004954:	7bfb      	ldrb	r3, [r7, #15]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	4603      	mov	r3, r0
 8004966:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	0092      	lsls	r2, r2, #2
 8004976:	4413      	add	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	b2da      	uxtb	r2, r3
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	4413      	add	r3, r2
 8004988:	b2db      	uxtb	r3, r3
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e041      	b.n	8004a2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fd f96b 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2202      	movs	r2, #2
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f000 fa35 	bl	8004e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d001      	beq.n	8004a4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e046      	b.n	8004ada <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a23      	ldr	r2, [pc, #140]	; (8004ae8 <HAL_TIM_Base_Start+0xb4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d022      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x70>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a66:	d01d      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x70>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <HAL_TIM_Base_Start+0xb8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d018      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x70>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <HAL_TIM_Base_Start+0xbc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d013      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x70>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <HAL_TIM_Base_Start+0xc0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00e      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x70>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <HAL_TIM_Base_Start+0xc4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d009      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x70>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a19      	ldr	r2, [pc, #100]	; (8004afc <HAL_TIM_Base_Start+0xc8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_TIM_Base_Start+0x70>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_TIM_Base_Start+0xcc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d111      	bne.n	8004ac8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d010      	beq.n	8004ad8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0201 	orr.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac6:	e007      	b.n	8004ad8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40000400 	.word	0x40000400
 8004af0:	40000800 	.word	0x40000800
 8004af4:	40000c00 	.word	0x40000c00
 8004af8:	40010400 	.word	0x40010400
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40001800 	.word	0x40001800

08004b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d001      	beq.n	8004b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e04e      	b.n	8004bba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2202      	movs	r2, #2
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a23      	ldr	r2, [pc, #140]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d022      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b46:	d01d      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d018      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1e      	ldr	r2, [pc, #120]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d013      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1c      	ldr	r2, [pc, #112]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00e      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d009      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d111      	bne.n	8004ba8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b06      	cmp	r3, #6
 8004b94:	d010      	beq.n	8004bb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0201 	orr.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba6:	e007      	b.n	8004bb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40000800 	.word	0x40000800
 8004bd4:	40000c00 	.word	0x40000c00
 8004bd8:	40010400 	.word	0x40010400
 8004bdc:	40014000 	.word	0x40014000
 8004be0:	40001800 	.word	0x40001800

08004be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d122      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11b      	bne.n	8004c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0202 	mvn.w	r2, #2
 8004c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f8ee 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8e0 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f8f1 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d122      	bne.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0204 	mvn.w	r2, #4
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f8c4 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f8b6 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8c7 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b08      	cmp	r3, #8
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0308 	and.w	r3, r3, #8
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0208 	mvn.w	r2, #8
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f89a 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f88c 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f89d 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
 8004d00:	2b10      	cmp	r3, #16
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0210 	mvn.w	r2, #16
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2208      	movs	r2, #8
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f870 	bl	8004e08 <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f862 	bl	8004df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f873 	bl	8004e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0201 	mvn.w	r2, #1
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc fe1c 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d10e      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d80:	2b80      	cmp	r3, #128	; 0x80
 8004d82:	d107      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f902 	bl	8004f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d10e      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dac:	2b40      	cmp	r3, #64	; 0x40
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f838 	bl	8004e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0320 	and.w	r3, r3, #32
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0220 	mvn.w	r2, #32
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8cc 	bl	8004f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a40      	ldr	r2, [pc, #256]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d013      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a3d      	ldr	r2, [pc, #244]	; (8004f5c <TIM_Base_SetConfig+0x118>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a3c      	ldr	r2, [pc, #240]	; (8004f60 <TIM_Base_SetConfig+0x11c>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a3b      	ldr	r2, [pc, #236]	; (8004f64 <TIM_Base_SetConfig+0x120>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3a      	ldr	r2, [pc, #232]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d02b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d027      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2c      	ldr	r2, [pc, #176]	; (8004f5c <TIM_Base_SetConfig+0x118>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d023      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2b      	ldr	r2, [pc, #172]	; (8004f60 <TIM_Base_SetConfig+0x11c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01f      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a2a      	ldr	r2, [pc, #168]	; (8004f64 <TIM_Base_SetConfig+0x120>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a29      	ldr	r2, [pc, #164]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d017      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a28      	ldr	r2, [pc, #160]	; (8004f6c <TIM_Base_SetConfig+0x128>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <TIM_Base_SetConfig+0x12c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00f      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a26      	ldr	r2, [pc, #152]	; (8004f74 <TIM_Base_SetConfig+0x130>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d00b      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a25      	ldr	r2, [pc, #148]	; (8004f78 <TIM_Base_SetConfig+0x134>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d007      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a24      	ldr	r2, [pc, #144]	; (8004f7c <TIM_Base_SetConfig+0x138>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d003      	beq.n	8004ef6 <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a23      	ldr	r2, [pc, #140]	; (8004f80 <TIM_Base_SetConfig+0x13c>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d108      	bne.n	8004f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <TIM_Base_SetConfig+0x114>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_Base_SetConfig+0xf8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <TIM_Base_SetConfig+0x124>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d103      	bne.n	8004f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	615a      	str	r2, [r3, #20]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40010000 	.word	0x40010000
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40010400 	.word	0x40010400
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400
 8004f74:	40014800 	.word	0x40014800
 8004f78:	40001800 	.word	0x40001800
 8004f7c:	40001c00 	.word	0x40001c00
 8004f80:	40002000 	.word	0x40002000

08004f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e03f      	b.n	800503e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fe82 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2224      	movs	r2, #36	; 0x24
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f829 	bl	8005048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800504c:	b0c0      	sub	sp, #256	; 0x100
 800504e:	af00      	add	r7, sp, #0
 8005050:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	68d9      	ldr	r1, [r3, #12]
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	ea40 0301 	orr.w	r3, r0, r1
 8005070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	431a      	orrs	r2, r3
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	431a      	orrs	r2, r3
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050a0:	f021 010c 	bic.w	r1, r1, #12
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050ae:	430b      	orrs	r3, r1
 80050b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c2:	6999      	ldr	r1, [r3, #24]
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	ea40 0301 	orr.w	r3, r0, r1
 80050ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b8f      	ldr	r3, [pc, #572]	; (8005314 <UART_SetConfig+0x2cc>)
 80050d8:	429a      	cmp	r2, r3
 80050da:	d005      	beq.n	80050e8 <UART_SetConfig+0xa0>
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	4b8d      	ldr	r3, [pc, #564]	; (8005318 <UART_SetConfig+0x2d0>)
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d104      	bne.n	80050f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e8:	f7ff f88c 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 80050ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050f0:	e003      	b.n	80050fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050f2:	f7ff f873 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 80050f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005104:	f040 810c 	bne.w	8005320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005112:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	1891      	adds	r1, r2, r2
 8005120:	65b9      	str	r1, [r7, #88]	; 0x58
 8005122:	415b      	adcs	r3, r3
 8005124:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800512a:	4621      	mov	r1, r4
 800512c:	eb12 0801 	adds.w	r8, r2, r1
 8005130:	4629      	mov	r1, r5
 8005132:	eb43 0901 	adc.w	r9, r3, r1
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800514a:	4690      	mov	r8, r2
 800514c:	4699      	mov	r9, r3
 800514e:	4623      	mov	r3, r4
 8005150:	eb18 0303 	adds.w	r3, r8, r3
 8005154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005158:	462b      	mov	r3, r5
 800515a:	eb49 0303 	adc.w	r3, r9, r3
 800515e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800516e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005176:	460b      	mov	r3, r1
 8005178:	18db      	adds	r3, r3, r3
 800517a:	653b      	str	r3, [r7, #80]	; 0x50
 800517c:	4613      	mov	r3, r2
 800517e:	eb42 0303 	adc.w	r3, r2, r3
 8005182:	657b      	str	r3, [r7, #84]	; 0x54
 8005184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800518c:	f7fb fd0c 	bl	8000ba8 <__aeabi_uldivmod>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4b61      	ldr	r3, [pc, #388]	; (800531c <UART_SetConfig+0x2d4>)
 8005196:	fba3 2302 	umull	r2, r3, r3, r2
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	011c      	lsls	r4, r3, #4
 800519e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	1891      	adds	r1, r2, r2
 80051b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80051b8:	415b      	adcs	r3, r3
 80051ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051c0:	4641      	mov	r1, r8
 80051c2:	eb12 0a01 	adds.w	sl, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb43 0b01 	adc.w	fp, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051e0:	4692      	mov	sl, r2
 80051e2:	469b      	mov	fp, r3
 80051e4:	4643      	mov	r3, r8
 80051e6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ee:	464b      	mov	r3, r9
 80051f0:	eb4b 0303 	adc.w	r3, fp, r3
 80051f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005204:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800520c:	460b      	mov	r3, r1
 800520e:	18db      	adds	r3, r3, r3
 8005210:	643b      	str	r3, [r7, #64]	; 0x40
 8005212:	4613      	mov	r3, r2
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
 800521a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800521e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005222:	f7fb fcc1 	bl	8000ba8 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4611      	mov	r1, r2
 800522c:	4b3b      	ldr	r3, [pc, #236]	; (800531c <UART_SetConfig+0x2d4>)
 800522e:	fba3 2301 	umull	r2, r3, r3, r1
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	2264      	movs	r2, #100	; 0x64
 8005236:	fb02 f303 	mul.w	r3, r2, r3
 800523a:	1acb      	subs	r3, r1, r3
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <UART_SetConfig+0x2d4>)
 8005244:	fba3 2302 	umull	r2, r3, r3, r2
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005250:	441c      	add	r4, r3
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800525c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005264:	4642      	mov	r2, r8
 8005266:	464b      	mov	r3, r9
 8005268:	1891      	adds	r1, r2, r2
 800526a:	63b9      	str	r1, [r7, #56]	; 0x38
 800526c:	415b      	adcs	r3, r3
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005274:	4641      	mov	r1, r8
 8005276:	1851      	adds	r1, r2, r1
 8005278:	6339      	str	r1, [r7, #48]	; 0x30
 800527a:	4649      	mov	r1, r9
 800527c:	414b      	adcs	r3, r1
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	f04f 0300 	mov.w	r3, #0
 8005288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800528c:	4659      	mov	r1, fp
 800528e:	00cb      	lsls	r3, r1, #3
 8005290:	4651      	mov	r1, sl
 8005292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005296:	4651      	mov	r1, sl
 8005298:	00ca      	lsls	r2, r1, #3
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	4642      	mov	r2, r8
 80052a2:	189b      	adds	r3, r3, r2
 80052a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052a8:	464b      	mov	r3, r9
 80052aa:	460a      	mov	r2, r1
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052c8:	460b      	mov	r3, r1
 80052ca:	18db      	adds	r3, r3, r3
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ce:	4613      	mov	r3, r2
 80052d0:	eb42 0303 	adc.w	r3, r2, r3
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052de:	f7fb fc63 	bl	8000ba8 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4b0d      	ldr	r3, [pc, #52]	; (800531c <UART_SetConfig+0x2d4>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	2164      	movs	r1, #100	; 0x64
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	3332      	adds	r3, #50	; 0x32
 80052fa:	4a08      	ldr	r2, [pc, #32]	; (800531c <UART_SetConfig+0x2d4>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	095b      	lsrs	r3, r3, #5
 8005302:	f003 0207 	and.w	r2, r3, #7
 8005306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4422      	add	r2, r4
 800530e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005310:	e105      	b.n	800551e <UART_SetConfig+0x4d6>
 8005312:	bf00      	nop
 8005314:	40011000 	.word	0x40011000
 8005318:	40011400 	.word	0x40011400
 800531c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800532a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800532e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005332:	4642      	mov	r2, r8
 8005334:	464b      	mov	r3, r9
 8005336:	1891      	adds	r1, r2, r2
 8005338:	6239      	str	r1, [r7, #32]
 800533a:	415b      	adcs	r3, r3
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
 800533e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005342:	4641      	mov	r1, r8
 8005344:	1854      	adds	r4, r2, r1
 8005346:	4649      	mov	r1, r9
 8005348:	eb43 0501 	adc.w	r5, r3, r1
 800534c:	f04f 0200 	mov.w	r2, #0
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	00eb      	lsls	r3, r5, #3
 8005356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800535a:	00e2      	lsls	r2, r4, #3
 800535c:	4614      	mov	r4, r2
 800535e:	461d      	mov	r5, r3
 8005360:	4643      	mov	r3, r8
 8005362:	18e3      	adds	r3, r4, r3
 8005364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005368:	464b      	mov	r3, r9
 800536a:	eb45 0303 	adc.w	r3, r5, r3
 800536e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800537e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800538e:	4629      	mov	r1, r5
 8005390:	008b      	lsls	r3, r1, #2
 8005392:	4621      	mov	r1, r4
 8005394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005398:	4621      	mov	r1, r4
 800539a:	008a      	lsls	r2, r1, #2
 800539c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053a0:	f7fb fc02 	bl	8000ba8 <__aeabi_uldivmod>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4b60      	ldr	r3, [pc, #384]	; (800552c <UART_SetConfig+0x4e4>)
 80053aa:	fba3 2302 	umull	r2, r3, r3, r2
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	011c      	lsls	r4, r3, #4
 80053b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	61b9      	str	r1, [r7, #24]
 80053cc:	415b      	adcs	r3, r3
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d4:	4641      	mov	r1, r8
 80053d6:	1851      	adds	r1, r2, r1
 80053d8:	6139      	str	r1, [r7, #16]
 80053da:	4649      	mov	r1, r9
 80053dc:	414b      	adcs	r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4651      	mov	r1, sl
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4642      	mov	r2, r8
 8005402:	189b      	adds	r3, r3, r2
 8005404:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005408:	464b      	mov	r3, r9
 800540a:	460a      	mov	r2, r1
 800540c:	eb42 0303 	adc.w	r3, r2, r3
 8005410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	67bb      	str	r3, [r7, #120]	; 0x78
 800541e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800542c:	4649      	mov	r1, r9
 800542e:	008b      	lsls	r3, r1, #2
 8005430:	4641      	mov	r1, r8
 8005432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005436:	4641      	mov	r1, r8
 8005438:	008a      	lsls	r2, r1, #2
 800543a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800543e:	f7fb fbb3 	bl	8000ba8 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4b39      	ldr	r3, [pc, #228]	; (800552c <UART_SetConfig+0x4e4>)
 8005448:	fba3 1302 	umull	r1, r3, r3, r2
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	2164      	movs	r1, #100	; 0x64
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	3332      	adds	r3, #50	; 0x32
 800545a:	4a34      	ldr	r2, [pc, #208]	; (800552c <UART_SetConfig+0x4e4>)
 800545c:	fba2 2303 	umull	r2, r3, r2, r3
 8005460:	095b      	lsrs	r3, r3, #5
 8005462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005466:	441c      	add	r4, r3
 8005468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800546c:	2200      	movs	r2, #0
 800546e:	673b      	str	r3, [r7, #112]	; 0x70
 8005470:	677a      	str	r2, [r7, #116]	; 0x74
 8005472:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005476:	4642      	mov	r2, r8
 8005478:	464b      	mov	r3, r9
 800547a:	1891      	adds	r1, r2, r2
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	415b      	adcs	r3, r3
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005486:	4641      	mov	r1, r8
 8005488:	1851      	adds	r1, r2, r1
 800548a:	6039      	str	r1, [r7, #0]
 800548c:	4649      	mov	r1, r9
 800548e:	414b      	adcs	r3, r1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800549e:	4659      	mov	r1, fp
 80054a0:	00cb      	lsls	r3, r1, #3
 80054a2:	4651      	mov	r1, sl
 80054a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054a8:	4651      	mov	r1, sl
 80054aa:	00ca      	lsls	r2, r1, #3
 80054ac:	4610      	mov	r0, r2
 80054ae:	4619      	mov	r1, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	4642      	mov	r2, r8
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b8:	464b      	mov	r3, r9
 80054ba:	460a      	mov	r2, r1
 80054bc:	eb42 0303 	adc.w	r3, r2, r3
 80054c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	663b      	str	r3, [r7, #96]	; 0x60
 80054cc:	667a      	str	r2, [r7, #100]	; 0x64
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054da:	4649      	mov	r1, r9
 80054dc:	008b      	lsls	r3, r1, #2
 80054de:	4641      	mov	r1, r8
 80054e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e4:	4641      	mov	r1, r8
 80054e6:	008a      	lsls	r2, r1, #2
 80054e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ec:	f7fb fb5c 	bl	8000ba8 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <UART_SetConfig+0x4e4>)
 80054f6:	fba3 1302 	umull	r1, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	2164      	movs	r1, #100	; 0x64
 80054fe:	fb01 f303 	mul.w	r3, r1, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	3332      	adds	r3, #50	; 0x32
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <UART_SetConfig+0x4e4>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4422      	add	r2, r4
 800551c:	609a      	str	r2, [r3, #8]
}
 800551e:	bf00      	nop
 8005520:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005524:	46bd      	mov	sp, r7
 8005526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800552a:	bf00      	nop
 800552c:	51eb851f 	.word	0x51eb851f

08005530 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005530:	b084      	sub	sp, #16
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	f107 001c 	add.w	r0, r7, #28
 800553e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	d122      	bne.n	800558e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800555c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d105      	bne.n	8005582 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 faa2 	bl	8005acc <USB_CoreReset>
 8005588:	4603      	mov	r3, r0
 800558a:	73fb      	strb	r3, [r7, #15]
 800558c:	e01a      	b.n	80055c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa96 	bl	8005acc <USB_CoreReset>
 80055a0:	4603      	mov	r3, r0
 80055a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	639a      	str	r2, [r3, #56]	; 0x38
 80055b6:	e005      	b.n	80055c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d10b      	bne.n	80055e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f043 0206 	orr.w	r2, r3, #6
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3710      	adds	r7, #16
 80055e8:	46bd      	mov	sp, r7
 80055ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ee:	b004      	add	sp, #16
 80055f0:	4770      	bx	lr

080055f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d115      	bne.n	8005662 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005642:	2001      	movs	r0, #1
 8005644:	f7fc fd46 	bl	80020d4 <HAL_Delay>
      ms++;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3301      	adds	r3, #1
 800564c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 fa2e 	bl	8005ab0 <USB_GetMode>
 8005654:	4603      	mov	r3, r0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d01e      	beq.n	8005698 <USB_SetCurrentMode+0x84>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b31      	cmp	r3, #49	; 0x31
 800565e:	d9f0      	bls.n	8005642 <USB_SetCurrentMode+0x2e>
 8005660:	e01a      	b.n	8005698 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d115      	bne.n	8005694 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005674:	2001      	movs	r0, #1
 8005676:	f7fc fd2d 	bl	80020d4 <HAL_Delay>
      ms++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fa15 	bl	8005ab0 <USB_GetMode>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <USB_SetCurrentMode+0x84>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b31      	cmp	r3, #49	; 0x31
 8005690:	d9f0      	bls.n	8005674 <USB_SetCurrentMode+0x60>
 8005692:	e001      	b.n	8005698 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e005      	b.n	80056a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2b32      	cmp	r3, #50	; 0x32
 800569c:	d101      	bne.n	80056a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056ac:	b084      	sub	sp, #16
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e009      	b.n	80056e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3340      	adds	r3, #64	; 0x40
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	2200      	movs	r2, #0
 80056d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	3301      	adds	r3, #1
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	2b0e      	cmp	r3, #14
 80056e4:	d9f2      	bls.n	80056cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11c      	bne.n	8005726 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fa:	f043 0302 	orr.w	r3, r3, #2
 80056fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
 8005724:	e00b      	b.n	800573e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005744:	461a      	mov	r2, r3
 8005746:	2300      	movs	r3, #0
 8005748:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	4619      	mov	r1, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	461a      	mov	r2, r3
 800575a:	680b      	ldr	r3, [r1, #0]
 800575c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	2b01      	cmp	r3, #1
 8005762:	d10c      	bne.n	800577e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800576a:	2100      	movs	r1, #0
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f965 	bl	8005a3c <USB_SetDevSpeed>
 8005772:	e008      	b.n	8005786 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005774:	2101      	movs	r1, #1
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f960 	bl	8005a3c <USB_SetDevSpeed>
 800577c:	e003      	b.n	8005786 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800577e:	2103      	movs	r1, #3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f95b 	bl	8005a3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005786:	2110      	movs	r1, #16
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f8f3 	bl	8005974 <USB_FlushTxFifo>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f91f 	bl	80059dc <USB_FlushRxFifo>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	461a      	mov	r2, r3
 80057c8:	2300      	movs	r3, #0
 80057ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057cc:	2300      	movs	r3, #0
 80057ce:	613b      	str	r3, [r7, #16]
 80057d0:	e043      	b.n	800585a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e8:	d118      	bne.n	800581c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fc:	461a      	mov	r2, r3
 80057fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e013      	b.n	800582e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	461a      	mov	r2, r3
 8005814:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005818:	6013      	str	r3, [r2, #0]
 800581a:	e008      	b.n	800582e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	461a      	mov	r2, r3
 800584e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005852:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3301      	adds	r3, #1
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3b7      	bcc.n	80057d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e043      	b.n	80058f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800587e:	d118      	bne.n	80058b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	461a      	mov	r2, r3
 8005894:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e013      	b.n	80058c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e008      	b.n	80058c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	461a      	mov	r2, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	461a      	mov	r2, r3
 80058e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3301      	adds	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3b7      	bcc.n	8005868 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005918:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	2b00      	cmp	r3, #0
 800591e:	d105      	bne.n	800592c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f043 0210 	orr.w	r2, r3, #16
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699a      	ldr	r2, [r3, #24]
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <USB_DevInit+0x2c4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f043 0208 	orr.w	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800594a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800596c:	b004      	add	sp, #16
 800596e:	4770      	bx	lr
 8005970:	803c3800 	.word	0x803c3800

08005974 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <USB_FlushTxFifo+0x64>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d901      	bls.n	8005994 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e01b      	b.n	80059cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	daf2      	bge.n	8005982 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800599c:	2300      	movs	r3, #0
 800599e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	019b      	lsls	r3, r3, #6
 80059a4:	f043 0220 	orr.w	r2, r3, #32
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3301      	adds	r3, #1
 80059b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4a08      	ldr	r2, [pc, #32]	; (80059d8 <USB_FlushTxFifo+0x64>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e006      	b.n	80059cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d0f0      	beq.n	80059ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	00030d40 	.word	0x00030d40

080059dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4a11      	ldr	r2, [pc, #68]	; (8005a38 <USB_FlushRxFifo+0x5c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e018      	b.n	8005a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	daf2      	bge.n	80059e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2210      	movs	r2, #16
 8005a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <USB_FlushRxFifo+0x5c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d901      	bls.n	8005a1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e006      	b.n	8005a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b10      	cmp	r3, #16
 8005a28:	d0f0      	beq.n	8005a0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	00030d40 	.word	0x00030d40

08005a3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	78fb      	ldrb	r3, [r7, #3]
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a88:	f023 0303 	bic.w	r3, r3, #3
 8005a8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9c:	f043 0302 	orr.w	r3, r3, #2
 8005aa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	f003 0301 	and.w	r3, r3, #1
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	3301      	adds	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <USB_CoreReset+0x64>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e01b      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	daf2      	bge.n	8005ad8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f043 0201 	orr.w	r2, r3, #1
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a09      	ldr	r2, [pc, #36]	; (8005b30 <USB_CoreReset+0x64>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e006      	b.n	8005b22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d0f0      	beq.n	8005b02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	00030d40 	.word	0x00030d40

08005b34 <__NVIC_SetPriority>:
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	6039      	str	r1, [r7, #0]
 8005b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	db0a      	blt.n	8005b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	490c      	ldr	r1, [pc, #48]	; (8005b80 <__NVIC_SetPriority+0x4c>)
 8005b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b52:	0112      	lsls	r2, r2, #4
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	440b      	add	r3, r1
 8005b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b5c:	e00a      	b.n	8005b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	4908      	ldr	r1, [pc, #32]	; (8005b84 <__NVIC_SetPriority+0x50>)
 8005b64:	79fb      	ldrb	r3, [r7, #7]
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	0112      	lsls	r2, r2, #4
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	440b      	add	r3, r1
 8005b72:	761a      	strb	r2, [r3, #24]
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	e000e100 	.word	0xe000e100
 8005b84:	e000ed00 	.word	0xe000ed00

08005b88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SysTick_Handler+0x1c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b90:	f001 fd28 	bl	80075e4 <xTaskGetSchedulerState>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d001      	beq.n	8005b9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b9a:	f002 fb0d 	bl	80081b8 <xPortSysTickHandler>
  }
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005bac:	2100      	movs	r1, #0
 8005bae:	f06f 0004 	mvn.w	r0, #4
 8005bb2:	f7ff ffbf 	bl	8005b34 <__NVIC_SetPriority>
#endif
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bc2:	f3ef 8305 	mrs	r3, IPSR
 8005bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8005bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005bce:	f06f 0305 	mvn.w	r3, #5
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	e00c      	b.n	8005bf0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <osKernelInitialize+0x44>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d105      	bne.n	8005bea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <osKernelInitialize+0x44>)
 8005be0:	2201      	movs	r2, #1
 8005be2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	607b      	str	r3, [r7, #4]
 8005be8:	e002      	b.n	8005bf0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
 8005bee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bf0:	687b      	ldr	r3, [r7, #4]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	2000098c 	.word	0x2000098c

08005c04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c0a:	f3ef 8305 	mrs	r3, IPSR
 8005c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005c16:	f06f 0305 	mvn.w	r3, #5
 8005c1a:	607b      	str	r3, [r7, #4]
 8005c1c:	e010      	b.n	8005c40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <osKernelStart+0x48>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d109      	bne.n	8005c3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c26:	f7ff ffbf 	bl	8005ba8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c2a:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <osKernelStart+0x48>)
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c30:	f001 f87c 	bl	8006d2c <vTaskStartScheduler>
      stat = osOK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	e002      	b.n	8005c40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c40:	687b      	ldr	r3, [r7, #4]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	2000098c 	.word	0x2000098c

08005c50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08e      	sub	sp, #56	; 0x38
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c60:	f3ef 8305 	mrs	r3, IPSR
 8005c64:	617b      	str	r3, [r7, #20]
  return(result);
 8005c66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d17e      	bne.n	8005d6a <osThreadNew+0x11a>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d07b      	beq.n	8005d6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c72:	2380      	movs	r3, #128	; 0x80
 8005c74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c76:	2318      	movs	r3, #24
 8005c78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d045      	beq.n	8005d16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <osThreadNew+0x48>
        name = attr->name;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d008      	beq.n	8005cbe <osThreadNew+0x6e>
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b38      	cmp	r3, #56	; 0x38
 8005cb0:	d805      	bhi.n	8005cbe <osThreadNew+0x6e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d001      	beq.n	8005cc2 <osThreadNew+0x72>
        return (NULL);
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	e054      	b.n	8005d6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00e      	beq.n	8005cf8 <osThreadNew+0xa8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	2bbb      	cmp	r3, #187	; 0xbb
 8005ce0:	d90a      	bls.n	8005cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d006      	beq.n	8005cf8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d002      	beq.n	8005cf8 <osThreadNew+0xa8>
        mem = 1;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	e010      	b.n	8005d1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10c      	bne.n	8005d1a <osThreadNew+0xca>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d108      	bne.n	8005d1a <osThreadNew+0xca>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d104      	bne.n	8005d1a <osThreadNew+0xca>
          mem = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	e001      	b.n	8005d1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d110      	bne.n	8005d42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d28:	9202      	str	r2, [sp, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6a3a      	ldr	r2, [r7, #32]
 8005d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fe0c 	bl	8006954 <xTaskCreateStatic>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	613b      	str	r3, [r7, #16]
 8005d40:	e013      	b.n	8005d6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d110      	bne.n	8005d6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	f107 0310 	add.w	r3, r7, #16
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 fe57 	bl	8006a0e <xTaskCreate>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d001      	beq.n	8005d6a <osThreadNew+0x11a>
            hTask = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d6a:	693b      	ldr	r3, [r7, #16]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3728      	adds	r7, #40	; 0x28
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7c:	f3ef 8305 	mrs	r3, IPSR
 8005d80:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <osDelay+0x1c>
    stat = osErrorISR;
 8005d88:	f06f 0305 	mvn.w	r3, #5
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e007      	b.n	8005da0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 ff92 	bl	8006cc4 <vTaskDelay>
    }
  }

  return (stat);
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005dbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4a06      	ldr	r2, [pc, #24]	; (8005ddc <vApplicationGetIdleTaskMemory+0x30>)
 8005dc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2280      	movs	r2, #128	; 0x80
 8005dc8:	601a      	str	r2, [r3, #0]
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	20000990 	.word	0x20000990
 8005ddc:	20000a4c 	.word	0x20000a4c

08005de0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <vApplicationGetTimerTaskMemory+0x2c>)
 8005df0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <vApplicationGetTimerTaskMemory+0x30>)
 8005df6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dfe:	601a      	str	r2, [r3, #0]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000c4c 	.word	0x20000c4c
 8005e10:	20000d08 	.word	0x20000d08

08005e14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f103 0208 	add.w	r2, r3, #8
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f103 0208 	add.w	r2, r3, #8
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f103 0208 	add.w	r2, r3, #8
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d103      	bne.n	8005ed6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e00c      	b.n	8005ef0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	3308      	adds	r3, #8
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	e002      	b.n	8005ee4 <vListInsert+0x2e>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d2f6      	bcs.n	8005ede <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	601a      	str	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6892      	ldr	r2, [r2, #8]
 8005f3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	6852      	ldr	r2, [r2, #4]
 8005f48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d103      	bne.n	8005f5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <xQueueGenericReset+0x2a>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	60bb      	str	r3, [r7, #8]
}
 8005fa2:	bf00      	nop
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fa6:	f002 f875 	bl	8008094 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	68f9      	ldr	r1, [r7, #12]
 8005fb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	441a      	add	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fdc:	fb01 f303 	mul.w	r3, r1, r3
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	22ff      	movs	r2, #255	; 0xff
 8005fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	22ff      	movs	r2, #255	; 0xff
 8005ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d114      	bne.n	8006026 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d01a      	beq.n	800603a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	3310      	adds	r3, #16
 8006008:	4618      	mov	r0, r3
 800600a:	f001 f929 	bl	8007260 <xTaskRemoveFromEventList>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d012      	beq.n	800603a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <xQueueGenericReset+0xcc>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	e009      	b.n	800603a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3310      	adds	r3, #16
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fef2 	bl	8005e14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3324      	adds	r3, #36	; 0x24
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff feed 	bl	8005e14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800603a:	f002 f85b 	bl	80080f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800603e:	2301      	movs	r3, #1
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	; 0x38
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10a      	bne.n	8006092 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <xQueueGenericCreateStatic+0x52>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <xQueueGenericCreateStatic+0x56>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <xQueueGenericCreateStatic+0x58>
 80060a2:	2300      	movs	r3, #0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	623b      	str	r3, [r7, #32]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <xQueueGenericCreateStatic+0x7e>
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <xQueueGenericCreateStatic+0x82>
 80060ca:	2301      	movs	r3, #1
 80060cc:	e000      	b.n	80060d0 <xQueueGenericCreateStatic+0x84>
 80060ce:	2300      	movs	r3, #0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	61fb      	str	r3, [r7, #28]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060ea:	2350      	movs	r3, #80	; 0x50
 80060ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b50      	cmp	r3, #80	; 0x50
 80060f2:	d00a      	beq.n	800610a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	61bb      	str	r3, [r7, #24]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800610a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800611e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	4613      	mov	r3, r2
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f805 	bl	800613c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006134:	4618      	mov	r0, r3
 8006136:	3730      	adds	r7, #48	; 0x30
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e002      	b.n	800615e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800616a:	2101      	movs	r1, #1
 800616c:	69b8      	ldr	r0, [r7, #24]
 800616e:	f7ff ff05 	bl	8005f7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	78fa      	ldrb	r2, [r7, #3]
 8006176:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08e      	sub	sp, #56	; 0x38
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
 8006190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006192:	2300      	movs	r3, #0
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <xQueueGenericSend+0x32>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d103      	bne.n	80061c4 <xQueueGenericSend+0x40>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <xQueueGenericSend+0x44>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <xQueueGenericSend+0x46>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <xQueueGenericSend+0x60>
	__asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d103      	bne.n	80061f2 <xQueueGenericSend+0x6e>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <xQueueGenericSend+0x72>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <xQueueGenericSend+0x74>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xQueueGenericSend+0x8e>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	623b      	str	r3, [r7, #32]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006212:	f001 f9e7 	bl	80075e4 <xTaskGetSchedulerState>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <xQueueGenericSend+0x9e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <xQueueGenericSend+0xa2>
 8006222:	2301      	movs	r3, #1
 8006224:	e000      	b.n	8006228 <xQueueGenericSend+0xa4>
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d10a      	bne.n	8006242 <xQueueGenericSend+0xbe>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	61fb      	str	r3, [r7, #28]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006242:	f001 ff27 	bl	8008094 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <xQueueGenericSend+0xd4>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d129      	bne.n	80062ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625e:	f000 fa0b 	bl	8006678 <prvCopyDataToQueue>
 8006262:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	3324      	adds	r3, #36	; 0x24
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fff5 	bl	8007260 <xTaskRemoveFromEventList>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d013      	beq.n	80062a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800627c:	4b3f      	ldr	r3, [pc, #252]	; (800637c <xQueueGenericSend+0x1f8>)
 800627e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	e00a      	b.n	80062a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006294:	4b39      	ldr	r3, [pc, #228]	; (800637c <xQueueGenericSend+0x1f8>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062a4:	f001 ff26 	bl	80080f4 <vPortExitCritical>
				return pdPASS;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e063      	b.n	8006374 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062b2:	f001 ff1f 	bl	80080f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e05c      	b.n	8006374 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062c0:	f107 0314 	add.w	r3, r7, #20
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 f82f 	bl	8007328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ce:	f001 ff11 	bl	80080f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062d2:	f000 fd9b 	bl	8006e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062d6:	f001 fedd 	bl	8008094 <vPortEnterCritical>
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d103      	bne.n	80062f0 <xQueueGenericSend+0x16c>
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d103      	bne.n	8006306 <xQueueGenericSend+0x182>
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006306:	f001 fef5 	bl	80080f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800630a:	1d3a      	adds	r2, r7, #4
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f81e 	bl	8007354 <xTaskCheckForTimeOut>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d124      	bne.n	8006368 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800631e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006320:	f000 faa2 	bl	8006868 <prvIsQueueFull>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d018      	beq.n	800635c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	3310      	adds	r3, #16
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f000 ff44 	bl	80071c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800633a:	f000 fa2d 	bl	8006798 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800633e:	f000 fd73 	bl	8006e28 <xTaskResumeAll>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	f47f af7c 	bne.w	8006242 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800634a:	4b0c      	ldr	r3, [pc, #48]	; (800637c <xQueueGenericSend+0x1f8>)
 800634c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	e772      	b.n	8006242 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800635c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800635e:	f000 fa1b 	bl	8006798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006362:	f000 fd61 	bl	8006e28 <xTaskResumeAll>
 8006366:	e76c      	b.n	8006242 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800636a:	f000 fa15 	bl	8006798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800636e:	f000 fd5b 	bl	8006e28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006372:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006374:	4618      	mov	r0, r3
 8006376:	3738      	adds	r7, #56	; 0x38
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	e000ed04 	.word	0xe000ed04

08006380 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b090      	sub	sp, #64	; 0x40
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063aa:	bf00      	nop
 80063ac:	e7fe      	b.n	80063ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <xQueueGenericSendFromISR+0x3c>
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <xQueueGenericSendFromISR+0x40>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <xQueueGenericSendFromISR+0x42>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d103      	bne.n	80063ea <xQueueGenericSendFromISR+0x6a>
 80063e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <xQueueGenericSendFromISR+0x6e>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e000      	b.n	80063f0 <xQueueGenericSendFromISR+0x70>
 80063ee:	2300      	movs	r3, #0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10a      	bne.n	800640a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	623b      	str	r3, [r7, #32]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800640a:	f001 ff25 	bl	8008258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800640e:	f3ef 8211 	mrs	r2, BASEPRI
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	61fa      	str	r2, [r7, #28]
 8006424:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006426:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <xQueueGenericSendFromISR+0xbc>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d12f      	bne.n	800649c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800643c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006452:	f000 f911 	bl	8006678 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006456:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800645a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800645e:	d112      	bne.n	8006486 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	2b00      	cmp	r3, #0
 8006466:	d016      	beq.n	8006496 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	3324      	adds	r3, #36	; 0x24
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fef7 	bl	8007260 <xTaskRemoveFromEventList>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00e      	beq.n	8006496 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e007      	b.n	8006496 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800648a:	3301      	adds	r3, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	b25a      	sxtb	r2, r3
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006496:	2301      	movs	r3, #1
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800649a:	e001      	b.n	80064a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800649c:	2300      	movs	r3, #0
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3740      	adds	r7, #64	; 0x40
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08c      	sub	sp, #48	; 0x30
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064c4:	2300      	movs	r3, #0
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xQueueReceive+0x30>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	623b      	str	r3, [r7, #32]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <xQueueReceive+0x3e>
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <xQueueReceive+0x42>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <xQueueReceive+0x44>
 80064fa:	2300      	movs	r3, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xQueueReceive+0x5e>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	61fb      	str	r3, [r7, #28]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006516:	f001 f865 	bl	80075e4 <xTaskGetSchedulerState>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <xQueueReceive+0x6e>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <xQueueReceive+0x72>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <xQueueReceive+0x74>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <xQueueReceive+0x8e>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	61bb      	str	r3, [r7, #24]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006546:	f001 fda5 	bl	8008094 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800654a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01f      	beq.n	8006596 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655a:	f000 f8f7 	bl	800674c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	1e5a      	subs	r2, r3, #1
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00f      	beq.n	800658e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	3310      	adds	r3, #16
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fe74 	bl	8007260 <xTaskRemoveFromEventList>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800657e:	4b3d      	ldr	r3, [pc, #244]	; (8006674 <xQueueReceive+0x1bc>)
 8006580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800658e:	f001 fdb1 	bl	80080f4 <vPortExitCritical>
				return pdPASS;
 8006592:	2301      	movs	r3, #1
 8006594:	e069      	b.n	800666a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800659c:	f001 fdaa 	bl	80080f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e062      	b.n	800666a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d106      	bne.n	80065b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065aa:	f107 0310 	add.w	r3, r7, #16
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 feba 	bl	8007328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065b8:	f001 fd9c 	bl	80080f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065bc:	f000 fc26 	bl	8006e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065c0:	f001 fd68 	bl	8008094 <vPortEnterCritical>
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065ca:	b25b      	sxtb	r3, r3
 80065cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d0:	d103      	bne.n	80065da <xQueueReceive+0x122>
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e0:	b25b      	sxtb	r3, r3
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d103      	bne.n	80065f0 <xQueueReceive+0x138>
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065f0:	f001 fd80 	bl	80080f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065f4:	1d3a      	adds	r2, r7, #4
 80065f6:	f107 0310 	add.w	r3, r7, #16
 80065fa:	4611      	mov	r1, r2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f000 fea9 	bl	8007354 <xTaskCheckForTimeOut>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d123      	bne.n	8006650 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660a:	f000 f917 	bl	800683c <prvIsQueueEmpty>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d017      	beq.n	8006644 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	3324      	adds	r3, #36	; 0x24
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fdcf 	bl	80071c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006624:	f000 f8b8 	bl	8006798 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006628:	f000 fbfe 	bl	8006e28 <xTaskResumeAll>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d189      	bne.n	8006546 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006632:	4b10      	ldr	r3, [pc, #64]	; (8006674 <xQueueReceive+0x1bc>)
 8006634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	e780      	b.n	8006546 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006646:	f000 f8a7 	bl	8006798 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800664a:	f000 fbed 	bl	8006e28 <xTaskResumeAll>
 800664e:	e77a      	b.n	8006546 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006652:	f000 f8a1 	bl	8006798 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006656:	f000 fbe7 	bl	8006e28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800665a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800665c:	f000 f8ee 	bl	800683c <prvIsQueueEmpty>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	f43f af6f 	beq.w	8006546 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006668:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800666a:	4618      	mov	r0, r3
 800666c:	3730      	adds	r7, #48	; 0x30
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	e000ed04 	.word	0xe000ed04

08006678 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10d      	bne.n	80066b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d14d      	bne.n	800673a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 ffbc 	bl	8007620 <xTaskPriorityDisinherit>
 80066a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	e043      	b.n	800673a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d119      	bne.n	80066ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6858      	ldr	r0, [r3, #4]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	461a      	mov	r2, r3
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	f002 f81e 	bl	8008704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	441a      	add	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d32b      	bcc.n	800673a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	e026      	b.n	800673a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	68d8      	ldr	r0, [r3, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f4:	461a      	mov	r2, r3
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	f002 f804 	bl	8008704 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006704:	425b      	negs	r3, r3
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d207      	bcs.n	8006728 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	425b      	negs	r3, r3
 8006722:	441a      	add	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b02      	cmp	r3, #2
 800672c:	d105      	bne.n	800673a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3b01      	subs	r3, #1
 8006738:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006742:	697b      	ldr	r3, [r7, #20]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d018      	beq.n	8006790 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	441a      	add	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68da      	ldr	r2, [r3, #12]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	429a      	cmp	r2, r3
 8006776:	d303      	bcc.n	8006780 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68d9      	ldr	r1, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	461a      	mov	r2, r3
 800678a:	6838      	ldr	r0, [r7, #0]
 800678c:	f001 ffba 	bl	8008704 <memcpy>
	}
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067a0:	f001 fc78 	bl	8008094 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ac:	e011      	b.n	80067d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d012      	beq.n	80067dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fd50 	bl	8007260 <xTaskRemoveFromEventList>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067c6:	f000 fe27 	bl	8007418 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	dce9      	bgt.n	80067ae <prvUnlockQueue+0x16>
 80067da:	e000      	b.n	80067de <prvUnlockQueue+0x46>
					break;
 80067dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	22ff      	movs	r2, #255	; 0xff
 80067e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067e6:	f001 fc85 	bl	80080f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067ea:	f001 fc53 	bl	8008094 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067f6:	e011      	b.n	800681c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d012      	beq.n	8006826 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3310      	adds	r3, #16
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fd2b 	bl	8007260 <xTaskRemoveFromEventList>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006810:	f000 fe02 	bl	8007418 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	3b01      	subs	r3, #1
 8006818:	b2db      	uxtb	r3, r3
 800681a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800681c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006820:	2b00      	cmp	r3, #0
 8006822:	dce9      	bgt.n	80067f8 <prvUnlockQueue+0x60>
 8006824:	e000      	b.n	8006828 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006826:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	22ff      	movs	r2, #255	; 0xff
 800682c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006830:	f001 fc60 	bl	80080f4 <vPortExitCritical>
}
 8006834:	bf00      	nop
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006844:	f001 fc26 	bl	8008094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d102      	bne.n	8006856 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006850:	2301      	movs	r3, #1
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	e001      	b.n	800685a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800685a:	f001 fc4b 	bl	80080f4 <vPortExitCritical>

	return xReturn;
 800685e:	68fb      	ldr	r3, [r7, #12]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006870:	f001 fc10 	bl	8008094 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	429a      	cmp	r2, r3
 800687e:	d102      	bne.n	8006886 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e001      	b.n	800688a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800688a:	f001 fc33 	bl	80080f4 <vPortExitCritical>

	return xReturn;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	e014      	b.n	80068d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068a8:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <vQueueAddToRegistry+0x50>)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10b      	bne.n	80068cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068b4:	490c      	ldr	r1, [pc, #48]	; (80068e8 <vQueueAddToRegistry+0x50>)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068be:	4a0a      	ldr	r2, [pc, #40]	; (80068e8 <vQueueAddToRegistry+0x50>)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068ca:	e006      	b.n	80068da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b07      	cmp	r3, #7
 80068d6:	d9e7      	bls.n	80068a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068d8:	bf00      	nop
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20001108 	.word	0x20001108

080068ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80068fc:	f001 fbca 	bl	8008094 <vPortEnterCritical>
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006906:	b25b      	sxtb	r3, r3
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d103      	bne.n	8006916 <vQueueWaitForMessageRestricted+0x2a>
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800691c:	b25b      	sxtb	r3, r3
 800691e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006922:	d103      	bne.n	800692c <vQueueWaitForMessageRestricted+0x40>
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800692c:	f001 fbe2 	bl	80080f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	3324      	adds	r3, #36	; 0x24
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	68b9      	ldr	r1, [r7, #8]
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fc61 	bl	8007208 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006946:	6978      	ldr	r0, [r7, #20]
 8006948:	f7ff ff26 	bl	8006798 <prvUnlockQueue>
	}
 800694c:	bf00      	nop
 800694e:	3718      	adds	r7, #24
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006954:	b580      	push	{r7, lr}
 8006956:	b08e      	sub	sp, #56	; 0x38
 8006958:	af04      	add	r7, sp, #16
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10a      	bne.n	800697e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	623b      	str	r3, [r7, #32]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800697e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xTaskCreateStatic+0x46>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	61fb      	str	r3, [r7, #28]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800699a:	23bc      	movs	r3, #188	; 0xbc
 800699c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2bbc      	cmp	r3, #188	; 0xbc
 80069a2:	d00a      	beq.n	80069ba <xTaskCreateStatic+0x66>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	61bb      	str	r3, [r7, #24]
}
 80069b6:	bf00      	nop
 80069b8:	e7fe      	b.n	80069b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01e      	beq.n	8006a00 <xTaskCreateStatic+0xac>
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01b      	beq.n	8006a00 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	2202      	movs	r2, #2
 80069d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069da:	2300      	movs	r3, #0
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	9302      	str	r3, [sp, #8]
 80069e2:	f107 0314 	add.w	r3, r7, #20
 80069e6:	9301      	str	r3, [sp, #4]
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f850 	bl	8006a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069fa:	f000 f8f3 	bl	8006be4 <prvAddNewTaskToReadyList>
 80069fe:	e001      	b.n	8006a04 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a04:	697b      	ldr	r3, [r7, #20]
	}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3728      	adds	r7, #40	; 0x28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08c      	sub	sp, #48	; 0x30
 8006a12:	af04      	add	r7, sp, #16
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 fc58 	bl	80082d8 <pvPortMalloc>
 8006a28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a30:	20bc      	movs	r0, #188	; 0xbc
 8006a32:	f001 fc51 	bl	80082d8 <pvPortMalloc>
 8006a36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30
 8006a44:	e005      	b.n	8006a52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a46:	6978      	ldr	r0, [r7, #20]
 8006a48:	f001 fd12 	bl	8008470 <vPortFree>
 8006a4c:	e001      	b.n	8006a52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d017      	beq.n	8006a88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a60:	88fa      	ldrh	r2, [r7, #6]
 8006a62:	2300      	movs	r3, #0
 8006a64:	9303      	str	r3, [sp, #12]
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f80e 	bl	8006a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a7c:	69f8      	ldr	r0, [r7, #28]
 8006a7e:	f000 f8b1 	bl	8006be4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a82:	2301      	movs	r3, #1
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e002      	b.n	8006a8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	461a      	mov	r2, r3
 8006ab0:	21a5      	movs	r1, #165	; 0xa5
 8006ab2:	f001 fe35 	bl	8008720 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f023 0307 	bic.w	r3, r3, #7
 8006ace:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	617b      	str	r3, [r7, #20]
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d01f      	beq.n	8006b36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
 8006afa:	e012      	b.n	8006b22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	7819      	ldrb	r1, [r3, #0]
 8006b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	3334      	adds	r3, #52	; 0x34
 8006b0c:	460a      	mov	r2, r1
 8006b0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	4413      	add	r3, r2
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d006      	beq.n	8006b2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	2b0f      	cmp	r3, #15
 8006b26:	d9e9      	bls.n	8006afc <prvInitialiseNewTask+0x64>
 8006b28:	e000      	b.n	8006b2c <prvInitialiseNewTask+0x94>
			{
				break;
 8006b2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b34:	e003      	b.n	8006b3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	2b37      	cmp	r3, #55	; 0x37
 8006b42:	d901      	bls.n	8006b48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b44:	2337      	movs	r3, #55	; 0x37
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b52:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b56:	2200      	movs	r2, #0
 8006b58:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	3304      	adds	r3, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff f978 	bl	8005e54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	3318      	adds	r3, #24
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7ff f973 	bl	8005e54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	3354      	adds	r3, #84	; 0x54
 8006b98:	2260      	movs	r2, #96	; 0x60
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 fdbf 	bl	8008720 <memset>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <prvInitialiseNewTask+0x140>)
 8006ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <prvInitialiseNewTask+0x144>)
 8006bac:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	4a0b      	ldr	r2, [pc, #44]	; (8006be0 <prvInitialiseNewTask+0x148>)
 8006bb2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	68f9      	ldr	r1, [r7, #12]
 8006bb8:	69b8      	ldr	r0, [r7, #24]
 8006bba:	f001 f941 	bl	8007e40 <pxPortInitialiseStack>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bd0:	bf00      	nop
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	08009fec 	.word	0x08009fec
 8006bdc:	0800a00c 	.word	0x0800a00c
 8006be0:	08009fcc 	.word	0x08009fcc

08006be4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bec:	f001 fa52 	bl	8008094 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bf0:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <prvAddNewTaskToReadyList+0xc4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	4a2c      	ldr	r2, [pc, #176]	; (8006ca8 <prvAddNewTaskToReadyList+0xc4>)
 8006bf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bfa:	4b2c      	ldr	r3, [pc, #176]	; (8006cac <prvAddNewTaskToReadyList+0xc8>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c02:	4a2a      	ldr	r2, [pc, #168]	; (8006cac <prvAddNewTaskToReadyList+0xc8>)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c08:	4b27      	ldr	r3, [pc, #156]	; (8006ca8 <prvAddNewTaskToReadyList+0xc4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d110      	bne.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c10:	f000 fc26 	bl	8007460 <prvInitialiseTaskLists>
 8006c14:	e00d      	b.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <prvAddNewTaskToReadyList+0xcc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d109      	bne.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c1e:	4b23      	ldr	r3, [pc, #140]	; (8006cac <prvAddNewTaskToReadyList+0xc8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d802      	bhi.n	8006c32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c2c:	4a1f      	ldr	r2, [pc, #124]	; (8006cac <prvAddNewTaskToReadyList+0xc8>)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c32:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <prvAddNewTaskToReadyList+0xd0>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <prvAddNewTaskToReadyList+0xd0>)
 8006c3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c3c:	4b1d      	ldr	r3, [pc, #116]	; (8006cb4 <prvAddNewTaskToReadyList+0xd0>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c48:	4b1b      	ldr	r3, [pc, #108]	; (8006cb8 <prvAddNewTaskToReadyList+0xd4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d903      	bls.n	8006c58 <prvAddNewTaskToReadyList+0x74>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c54:	4a18      	ldr	r2, [pc, #96]	; (8006cb8 <prvAddNewTaskToReadyList+0xd4>)
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <prvAddNewTaskToReadyList+0xd8>)
 8006c66:	441a      	add	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4610      	mov	r0, r2
 8006c70:	f7ff f8fd 	bl	8005e6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c74:	f001 fa3e 	bl	80080f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c78:	4b0d      	ldr	r3, [pc, #52]	; (8006cb0 <prvAddNewTaskToReadyList+0xcc>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00e      	beq.n	8006c9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <prvAddNewTaskToReadyList+0xc8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d207      	bcs.n	8006c9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <prvAddNewTaskToReadyList+0xdc>)
 8006c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9e:	bf00      	nop
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	2000161c 	.word	0x2000161c
 8006cac:	20001148 	.word	0x20001148
 8006cb0:	20001628 	.word	0x20001628
 8006cb4:	20001638 	.word	0x20001638
 8006cb8:	20001624 	.word	0x20001624
 8006cbc:	2000114c 	.word	0x2000114c
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d017      	beq.n	8006d06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cd6:	4b13      	ldr	r3, [pc, #76]	; (8006d24 <vTaskDelay+0x60>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <vTaskDelay+0x30>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60bb      	str	r3, [r7, #8]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cf4:	f000 f88a 	bl	8006e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fcfe 	bl	80076fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d00:	f000 f892 	bl	8006e28 <xTaskResumeAll>
 8006d04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <vTaskDelay+0x64>)
 8006d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d12:	601a      	str	r2, [r3, #0]
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d1c:	bf00      	nop
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20001644 	.word	0x20001644
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d3a:	463a      	mov	r2, r7
 8006d3c:	1d39      	adds	r1, r7, #4
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff f832 	bl	8005dac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	9202      	str	r2, [sp, #8]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	2300      	movs	r3, #0
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	2300      	movs	r3, #0
 8006d58:	460a      	mov	r2, r1
 8006d5a:	4924      	ldr	r1, [pc, #144]	; (8006dec <vTaskStartScheduler+0xc0>)
 8006d5c:	4824      	ldr	r0, [pc, #144]	; (8006df0 <vTaskStartScheduler+0xc4>)
 8006d5e:	f7ff fdf9 	bl	8006954 <xTaskCreateStatic>
 8006d62:	4603      	mov	r3, r0
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <vTaskStartScheduler+0xc8>)
 8006d66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d68:	4b22      	ldr	r3, [pc, #136]	; (8006df4 <vTaskStartScheduler+0xc8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d002      	beq.n	8006d76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d70:	2301      	movs	r3, #1
 8006d72:	617b      	str	r3, [r7, #20]
 8006d74:	e001      	b.n	8006d7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d102      	bne.n	8006d86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d80:	f000 fd10 	bl	80077a4 <xTimerCreateTimerTask>
 8006d84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d11b      	bne.n	8006dc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	613b      	str	r3, [r7, #16]
}
 8006d9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006da0:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <vTaskStartScheduler+0xcc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3354      	adds	r3, #84	; 0x54
 8006da6:	4a15      	ldr	r2, [pc, #84]	; (8006dfc <vTaskStartScheduler+0xd0>)
 8006da8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006daa:	4b15      	ldr	r3, [pc, #84]	; (8006e00 <vTaskStartScheduler+0xd4>)
 8006dac:	f04f 32ff 	mov.w	r2, #4294967295
 8006db0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006db2:	4b14      	ldr	r3, [pc, #80]	; (8006e04 <vTaskStartScheduler+0xd8>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <vTaskStartScheduler+0xdc>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dbe:	f001 f8c7 	bl	8007f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dc2:	e00e      	b.n	8006de2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	d10a      	bne.n	8006de2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	60fb      	str	r3, [r7, #12]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <vTaskStartScheduler+0xb4>
}
 8006de2:	bf00      	nop
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	08009f78 	.word	0x08009f78
 8006df0:	08007431 	.word	0x08007431
 8006df4:	20001640 	.word	0x20001640
 8006df8:	20001148 	.word	0x20001148
 8006dfc:	20000010 	.word	0x20000010
 8006e00:	2000163c 	.word	0x2000163c
 8006e04:	20001628 	.word	0x20001628
 8006e08:	20001620 	.word	0x20001620

08006e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <vTaskSuspendAll+0x18>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3301      	adds	r3, #1
 8006e16:	4a03      	ldr	r2, [pc, #12]	; (8006e24 <vTaskSuspendAll+0x18>)
 8006e18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e1a:	bf00      	nop
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	20001644 	.word	0x20001644

08006e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e36:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <xTaskResumeAll+0x118>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	603b      	str	r3, [r7, #0]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e54:	f001 f91e 	bl	8008094 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e58:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <xTaskResumeAll+0x118>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	4a38      	ldr	r2, [pc, #224]	; (8006f40 <xTaskResumeAll+0x118>)
 8006e60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e62:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <xTaskResumeAll+0x118>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d162      	bne.n	8006f30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e6a:	4b36      	ldr	r3, [pc, #216]	; (8006f44 <xTaskResumeAll+0x11c>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d05e      	beq.n	8006f30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e72:	e02f      	b.n	8006ed4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e74:	4b34      	ldr	r3, [pc, #208]	; (8006f48 <xTaskResumeAll+0x120>)
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3318      	adds	r3, #24
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff f851 	bl	8005f28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff f84c 	bl	8005f28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e94:	4b2d      	ldr	r3, [pc, #180]	; (8006f4c <xTaskResumeAll+0x124>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d903      	bls.n	8006ea4 <xTaskResumeAll+0x7c>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea0:	4a2a      	ldr	r2, [pc, #168]	; (8006f4c <xTaskResumeAll+0x124>)
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4a27      	ldr	r2, [pc, #156]	; (8006f50 <xTaskResumeAll+0x128>)
 8006eb2:	441a      	add	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4610      	mov	r0, r2
 8006ebc:	f7fe ffd7 	bl	8005e6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec4:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <xTaskResumeAll+0x12c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d302      	bcc.n	8006ed4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006ece:	4b22      	ldr	r3, [pc, #136]	; (8006f58 <xTaskResumeAll+0x130>)
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <xTaskResumeAll+0x120>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1cb      	bne.n	8006e74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ee2:	f000 fb5f 	bl	80075a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <xTaskResumeAll+0x134>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d010      	beq.n	8006f14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ef2:	f000 f847 	bl	8006f84 <xTaskIncrementTick>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006efc:	4b16      	ldr	r3, [pc, #88]	; (8006f58 <xTaskResumeAll+0x130>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f1      	bne.n	8006ef2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <xTaskResumeAll+0x134>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f14:	4b10      	ldr	r3, [pc, #64]	; (8006f58 <xTaskResumeAll+0x130>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d009      	beq.n	8006f30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f20:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <xTaskResumeAll+0x138>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f30:	f001 f8e0 	bl	80080f4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f34:	68bb      	ldr	r3, [r7, #8]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20001644 	.word	0x20001644
 8006f44:	2000161c 	.word	0x2000161c
 8006f48:	200015dc 	.word	0x200015dc
 8006f4c:	20001624 	.word	0x20001624
 8006f50:	2000114c 	.word	0x2000114c
 8006f54:	20001148 	.word	0x20001148
 8006f58:	20001630 	.word	0x20001630
 8006f5c:	2000162c 	.word	0x2000162c
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <xTaskGetTickCount+0x1c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f70:	687b      	ldr	r3, [r7, #4]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20001620 	.word	0x20001620

08006f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f8e:	4b4f      	ldr	r3, [pc, #316]	; (80070cc <xTaskIncrementTick+0x148>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 808f 	bne.w	80070b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f98:	4b4d      	ldr	r3, [pc, #308]	; (80070d0 <xTaskIncrementTick+0x14c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fa0:	4a4b      	ldr	r2, [pc, #300]	; (80070d0 <xTaskIncrementTick+0x14c>)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d120      	bne.n	8006fee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fac:	4b49      	ldr	r3, [pc, #292]	; (80070d4 <xTaskIncrementTick+0x150>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00a      	beq.n	8006fcc <xTaskIncrementTick+0x48>
	__asm volatile
 8006fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fba:	f383 8811 	msr	BASEPRI, r3
 8006fbe:	f3bf 8f6f 	isb	sy
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	603b      	str	r3, [r7, #0]
}
 8006fc8:	bf00      	nop
 8006fca:	e7fe      	b.n	8006fca <xTaskIncrementTick+0x46>
 8006fcc:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <xTaskIncrementTick+0x150>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <xTaskIncrementTick+0x154>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a3f      	ldr	r2, [pc, #252]	; (80070d4 <xTaskIncrementTick+0x150>)
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	4a3f      	ldr	r2, [pc, #252]	; (80070d8 <xTaskIncrementTick+0x154>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	4b3e      	ldr	r3, [pc, #248]	; (80070dc <xTaskIncrementTick+0x158>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	4a3d      	ldr	r2, [pc, #244]	; (80070dc <xTaskIncrementTick+0x158>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	f000 fadb 	bl	80075a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fee:	4b3c      	ldr	r3, [pc, #240]	; (80070e0 <xTaskIncrementTick+0x15c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d349      	bcc.n	800708c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ff8:	4b36      	ldr	r3, [pc, #216]	; (80070d4 <xTaskIncrementTick+0x150>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007002:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <xTaskIncrementTick+0x15c>)
 8007004:	f04f 32ff 	mov.w	r2, #4294967295
 8007008:	601a      	str	r2, [r3, #0]
					break;
 800700a:	e03f      	b.n	800708c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800700c:	4b31      	ldr	r3, [pc, #196]	; (80070d4 <xTaskIncrementTick+0x150>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d203      	bcs.n	800702c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007024:	4a2e      	ldr	r2, [pc, #184]	; (80070e0 <xTaskIncrementTick+0x15c>)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800702a:	e02f      	b.n	800708c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	3304      	adds	r3, #4
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe ff79 	bl	8005f28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703a:	2b00      	cmp	r3, #0
 800703c:	d004      	beq.n	8007048 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	3318      	adds	r3, #24
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe ff70 	bl	8005f28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704c:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <xTaskIncrementTick+0x160>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d903      	bls.n	800705c <xTaskIncrementTick+0xd8>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	4a22      	ldr	r2, [pc, #136]	; (80070e4 <xTaskIncrementTick+0x160>)
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007060:	4613      	mov	r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	4413      	add	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4a1f      	ldr	r2, [pc, #124]	; (80070e8 <xTaskIncrementTick+0x164>)
 800706a:	441a      	add	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f7fe fefb 	bl	8005e6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	4b1b      	ldr	r3, [pc, #108]	; (80070ec <xTaskIncrementTick+0x168>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007082:	429a      	cmp	r2, r3
 8007084:	d3b8      	bcc.n	8006ff8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007086:	2301      	movs	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800708a:	e7b5      	b.n	8006ff8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800708c:	4b17      	ldr	r3, [pc, #92]	; (80070ec <xTaskIncrementTick+0x168>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007092:	4915      	ldr	r1, [pc, #84]	; (80070e8 <xTaskIncrementTick+0x164>)
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d901      	bls.n	80070a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80070a8:	4b11      	ldr	r3, [pc, #68]	; (80070f0 <xTaskIncrementTick+0x16c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80070b0:	2301      	movs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e004      	b.n	80070c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80070b6:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <xTaskIncrementTick+0x170>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	4a0d      	ldr	r2, [pc, #52]	; (80070f4 <xTaskIncrementTick+0x170>)
 80070be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070c0:	697b      	ldr	r3, [r7, #20]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	20001644 	.word	0x20001644
 80070d0:	20001620 	.word	0x20001620
 80070d4:	200015d4 	.word	0x200015d4
 80070d8:	200015d8 	.word	0x200015d8
 80070dc:	20001634 	.word	0x20001634
 80070e0:	2000163c 	.word	0x2000163c
 80070e4:	20001624 	.word	0x20001624
 80070e8:	2000114c 	.word	0x2000114c
 80070ec:	20001148 	.word	0x20001148
 80070f0:	20001630 	.word	0x20001630
 80070f4:	2000162c 	.word	0x2000162c

080070f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070fe:	4b2a      	ldr	r3, [pc, #168]	; (80071a8 <vTaskSwitchContext+0xb0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d003      	beq.n	800710e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007106:	4b29      	ldr	r3, [pc, #164]	; (80071ac <vTaskSwitchContext+0xb4>)
 8007108:	2201      	movs	r2, #1
 800710a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800710c:	e046      	b.n	800719c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800710e:	4b27      	ldr	r3, [pc, #156]	; (80071ac <vTaskSwitchContext+0xb4>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007114:	4b26      	ldr	r3, [pc, #152]	; (80071b0 <vTaskSwitchContext+0xb8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e010      	b.n	800713e <vTaskSwitchContext+0x46>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <vTaskSwitchContext+0x40>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	607b      	str	r3, [r7, #4]
}
 8007134:	bf00      	nop
 8007136:	e7fe      	b.n	8007136 <vTaskSwitchContext+0x3e>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3b01      	subs	r3, #1
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	491d      	ldr	r1, [pc, #116]	; (80071b4 <vTaskSwitchContext+0xbc>)
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	440b      	add	r3, r1
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d0e4      	beq.n	800711c <vTaskSwitchContext+0x24>
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4613      	mov	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4a15      	ldr	r2, [pc, #84]	; (80071b4 <vTaskSwitchContext+0xbc>)
 800715e:	4413      	add	r3, r2
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	3308      	adds	r3, #8
 8007174:	429a      	cmp	r2, r3
 8007176:	d104      	bne.n	8007182 <vTaskSwitchContext+0x8a>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	4a0b      	ldr	r2, [pc, #44]	; (80071b8 <vTaskSwitchContext+0xc0>)
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <vTaskSwitchContext+0xb8>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007192:	4b09      	ldr	r3, [pc, #36]	; (80071b8 <vTaskSwitchContext+0xc0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3354      	adds	r3, #84	; 0x54
 8007198:	4a08      	ldr	r2, [pc, #32]	; (80071bc <vTaskSwitchContext+0xc4>)
 800719a:	6013      	str	r3, [r2, #0]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	20001644 	.word	0x20001644
 80071ac:	20001630 	.word	0x20001630
 80071b0:	20001624 	.word	0x20001624
 80071b4:	2000114c 	.word	0x2000114c
 80071b8:	20001148 	.word	0x20001148
 80071bc:	20000010 	.word	0x20000010

080071c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	60fb      	str	r3, [r7, #12]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071e6:	4b07      	ldr	r3, [pc, #28]	; (8007204 <vTaskPlaceOnEventList+0x44>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3318      	adds	r3, #24
 80071ec:	4619      	mov	r1, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f7fe fe61 	bl	8005eb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071f4:	2101      	movs	r1, #1
 80071f6:	6838      	ldr	r0, [r7, #0]
 80071f8:	f000 fa80 	bl	80076fc <prvAddCurrentTaskToDelayedList>
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	20001148 	.word	0x20001148

08007208 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800721a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	617b      	str	r3, [r7, #20]
}
 800722c:	bf00      	nop
 800722e:	e7fe      	b.n	800722e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007230:	4b0a      	ldr	r3, [pc, #40]	; (800725c <vTaskPlaceOnEventListRestricted+0x54>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3318      	adds	r3, #24
 8007236:	4619      	mov	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f7fe fe18 	bl	8005e6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007244:	f04f 33ff 	mov.w	r3, #4294967295
 8007248:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	68b8      	ldr	r0, [r7, #8]
 800724e:	f000 fa55 	bl	80076fc <prvAddCurrentTaskToDelayedList>
	}
 8007252:	bf00      	nop
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20001148 	.word	0x20001148

08007260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	60fb      	str	r3, [r7, #12]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	3318      	adds	r3, #24
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fe49 	bl	8005f28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007296:	4b1e      	ldr	r3, [pc, #120]	; (8007310 <xTaskRemoveFromEventList+0xb0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d11d      	bne.n	80072da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fe40 	bl	8005f28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ac:	4b19      	ldr	r3, [pc, #100]	; (8007314 <xTaskRemoveFromEventList+0xb4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d903      	bls.n	80072bc <xTaskRemoveFromEventList+0x5c>
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	4a16      	ldr	r2, [pc, #88]	; (8007314 <xTaskRemoveFromEventList+0xb4>)
 80072ba:	6013      	str	r3, [r2, #0]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a13      	ldr	r2, [pc, #76]	; (8007318 <xTaskRemoveFromEventList+0xb8>)
 80072ca:	441a      	add	r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f7fe fdcb 	bl	8005e6e <vListInsertEnd>
 80072d8:	e005      	b.n	80072e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	3318      	adds	r3, #24
 80072de:	4619      	mov	r1, r3
 80072e0:	480e      	ldr	r0, [pc, #56]	; (800731c <xTaskRemoveFromEventList+0xbc>)
 80072e2:	f7fe fdc4 	bl	8005e6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ea:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <xTaskRemoveFromEventList+0xc0>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d905      	bls.n	8007300 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072f4:	2301      	movs	r3, #1
 80072f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072f8:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <xTaskRemoveFromEventList+0xc4>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e001      	b.n	8007304 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007304:	697b      	ldr	r3, [r7, #20]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20001644 	.word	0x20001644
 8007314:	20001624 	.word	0x20001624
 8007318:	2000114c 	.word	0x2000114c
 800731c:	200015dc 	.word	0x200015dc
 8007320:	20001148 	.word	0x20001148
 8007324:	20001630 	.word	0x20001630

08007328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <vTaskInternalSetTimeOutState+0x24>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <vTaskInternalSetTimeOutState+0x28>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20001634 	.word	0x20001634
 8007350:	20001620 	.word	0x20001620

08007354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	613b      	str	r3, [r7, #16]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	60fb      	str	r3, [r7, #12]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007396:	f000 fe7d 	bl	8008094 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800739a:	4b1d      	ldr	r3, [pc, #116]	; (8007410 <xTaskCheckForTimeOut+0xbc>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b2:	d102      	bne.n	80073ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	e023      	b.n	8007402 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <xTaskCheckForTimeOut+0xc0>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d007      	beq.n	80073d6 <xTaskCheckForTimeOut+0x82>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d302      	bcc.n	80073d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	61fb      	str	r3, [r7, #28]
 80073d4:	e015      	b.n	8007402 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d20b      	bcs.n	80073f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	1ad2      	subs	r2, r2, r3
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff ff9b 	bl	8007328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	e004      	b.n	8007402 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073fe:	2301      	movs	r3, #1
 8007400:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007402:	f000 fe77 	bl	80080f4 <vPortExitCritical>

	return xReturn;
 8007406:	69fb      	ldr	r3, [r7, #28]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20001620 	.word	0x20001620
 8007414:	20001634 	.word	0x20001634

08007418 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800741c:	4b03      	ldr	r3, [pc, #12]	; (800742c <vTaskMissedYield+0x14>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]
}
 8007422:	bf00      	nop
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	20001630 	.word	0x20001630

08007430 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007438:	f000 f852 	bl	80074e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800743c:	4b06      	ldr	r3, [pc, #24]	; (8007458 <prvIdleTask+0x28>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d9f9      	bls.n	8007438 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007444:	4b05      	ldr	r3, [pc, #20]	; (800745c <prvIdleTask+0x2c>)
 8007446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007454:	e7f0      	b.n	8007438 <prvIdleTask+0x8>
 8007456:	bf00      	nop
 8007458:	2000114c 	.word	0x2000114c
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007466:	2300      	movs	r3, #0
 8007468:	607b      	str	r3, [r7, #4]
 800746a:	e00c      	b.n	8007486 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4613      	mov	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4413      	add	r3, r2
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4a12      	ldr	r2, [pc, #72]	; (80074c0 <prvInitialiseTaskLists+0x60>)
 8007478:	4413      	add	r3, r2
 800747a:	4618      	mov	r0, r3
 800747c:	f7fe fcca 	bl	8005e14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	3301      	adds	r3, #1
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b37      	cmp	r3, #55	; 0x37
 800748a:	d9ef      	bls.n	800746c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800748c:	480d      	ldr	r0, [pc, #52]	; (80074c4 <prvInitialiseTaskLists+0x64>)
 800748e:	f7fe fcc1 	bl	8005e14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007492:	480d      	ldr	r0, [pc, #52]	; (80074c8 <prvInitialiseTaskLists+0x68>)
 8007494:	f7fe fcbe 	bl	8005e14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007498:	480c      	ldr	r0, [pc, #48]	; (80074cc <prvInitialiseTaskLists+0x6c>)
 800749a:	f7fe fcbb 	bl	8005e14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800749e:	480c      	ldr	r0, [pc, #48]	; (80074d0 <prvInitialiseTaskLists+0x70>)
 80074a0:	f7fe fcb8 	bl	8005e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074a4:	480b      	ldr	r0, [pc, #44]	; (80074d4 <prvInitialiseTaskLists+0x74>)
 80074a6:	f7fe fcb5 	bl	8005e14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074aa:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <prvInitialiseTaskLists+0x78>)
 80074ac:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <prvInitialiseTaskLists+0x64>)
 80074ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <prvInitialiseTaskLists+0x7c>)
 80074b2:	4a05      	ldr	r2, [pc, #20]	; (80074c8 <prvInitialiseTaskLists+0x68>)
 80074b4:	601a      	str	r2, [r3, #0]
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	2000114c 	.word	0x2000114c
 80074c4:	200015ac 	.word	0x200015ac
 80074c8:	200015c0 	.word	0x200015c0
 80074cc:	200015dc 	.word	0x200015dc
 80074d0:	200015f0 	.word	0x200015f0
 80074d4:	20001608 	.word	0x20001608
 80074d8:	200015d4 	.word	0x200015d4
 80074dc:	200015d8 	.word	0x200015d8

080074e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074e6:	e019      	b.n	800751c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074e8:	f000 fdd4 	bl	8008094 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ec:	4b10      	ldr	r3, [pc, #64]	; (8007530 <prvCheckTasksWaitingTermination+0x50>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fd15 	bl	8005f28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074fe:	4b0d      	ldr	r3, [pc, #52]	; (8007534 <prvCheckTasksWaitingTermination+0x54>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3b01      	subs	r3, #1
 8007504:	4a0b      	ldr	r2, [pc, #44]	; (8007534 <prvCheckTasksWaitingTermination+0x54>)
 8007506:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007508:	4b0b      	ldr	r3, [pc, #44]	; (8007538 <prvCheckTasksWaitingTermination+0x58>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3b01      	subs	r3, #1
 800750e:	4a0a      	ldr	r2, [pc, #40]	; (8007538 <prvCheckTasksWaitingTermination+0x58>)
 8007510:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007512:	f000 fdef 	bl	80080f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f810 	bl	800753c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <prvCheckTasksWaitingTermination+0x58>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e1      	bne.n	80074e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	200015f0 	.word	0x200015f0
 8007534:	2000161c 	.word	0x2000161c
 8007538:	20001604 	.word	0x20001604

0800753c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3354      	adds	r3, #84	; 0x54
 8007548:	4618      	mov	r0, r3
 800754a:	f001 f993 	bl	8008874 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007554:	2b00      	cmp	r3, #0
 8007556:	d108      	bne.n	800756a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755c:	4618      	mov	r0, r3
 800755e:	f000 ff87 	bl	8008470 <vPortFree>
				vPortFree( pxTCB );
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 ff84 	bl	8008470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007568:	e018      	b.n	800759c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007570:	2b01      	cmp	r3, #1
 8007572:	d103      	bne.n	800757c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 ff7b 	bl	8008470 <vPortFree>
	}
 800757a:	e00f      	b.n	800759c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007582:	2b02      	cmp	r3, #2
 8007584:	d00a      	beq.n	800759c <prvDeleteTCB+0x60>
	__asm volatile
 8007586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758a:	f383 8811 	msr	BASEPRI, r3
 800758e:	f3bf 8f6f 	isb	sy
 8007592:	f3bf 8f4f 	dsb	sy
 8007596:	60fb      	str	r3, [r7, #12]
}
 8007598:	bf00      	nop
 800759a:	e7fe      	b.n	800759a <prvDeleteTCB+0x5e>
	}
 800759c:	bf00      	nop
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075aa:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <prvResetNextTaskUnblockTime+0x38>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075b4:	4b0a      	ldr	r3, [pc, #40]	; (80075e0 <prvResetNextTaskUnblockTime+0x3c>)
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075bc:	e008      	b.n	80075d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <prvResetNextTaskUnblockTime+0x38>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4a04      	ldr	r2, [pc, #16]	; (80075e0 <prvResetNextTaskUnblockTime+0x3c>)
 80075ce:	6013      	str	r3, [r2, #0]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	200015d4 	.word	0x200015d4
 80075e0:	2000163c 	.word	0x2000163c

080075e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ea:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <xTaskGetSchedulerState+0x34>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d102      	bne.n	80075f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075f2:	2301      	movs	r3, #1
 80075f4:	607b      	str	r3, [r7, #4]
 80075f6:	e008      	b.n	800760a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f8:	4b08      	ldr	r3, [pc, #32]	; (800761c <xTaskGetSchedulerState+0x38>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007600:	2302      	movs	r3, #2
 8007602:	607b      	str	r3, [r7, #4]
 8007604:	e001      	b.n	800760a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007606:	2300      	movs	r3, #0
 8007608:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800760a:	687b      	ldr	r3, [r7, #4]
	}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	20001628 	.word	0x20001628
 800761c:	20001644 	.word	0x20001644

08007620 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d056      	beq.n	80076e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007636:	4b2e      	ldr	r3, [pc, #184]	; (80076f0 <xTaskPriorityDisinherit+0xd0>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	429a      	cmp	r2, r3
 800763e:	d00a      	beq.n	8007656 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	60fb      	str	r3, [r7, #12]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	60bb      	str	r3, [r7, #8]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007678:	1e5a      	subs	r2, r3, #1
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007686:	429a      	cmp	r2, r3
 8007688:	d02c      	beq.n	80076e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	2b00      	cmp	r3, #0
 8007690:	d128      	bne.n	80076e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3304      	adds	r3, #4
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fc46 	bl	8005f28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	4b0f      	ldr	r3, [pc, #60]	; (80076f4 <xTaskPriorityDisinherit+0xd4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d903      	bls.n	80076c4 <xTaskPriorityDisinherit+0xa4>
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a0c      	ldr	r2, [pc, #48]	; (80076f4 <xTaskPriorityDisinherit+0xd4>)
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <xTaskPriorityDisinherit+0xd8>)
 80076d2:	441a      	add	r2, r3
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe fbc7 	bl	8005e6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076e4:	697b      	ldr	r3, [r7, #20]
	}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20001148 	.word	0x20001148
 80076f4:	20001624 	.word	0x20001624
 80076f8:	2000114c 	.word	0x2000114c

080076fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007706:	4b21      	ldr	r3, [pc, #132]	; (800778c <prvAddCurrentTaskToDelayedList+0x90>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770c:	4b20      	ldr	r3, [pc, #128]	; (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fc08 	bl	8005f28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d10a      	bne.n	8007736 <prvAddCurrentTaskToDelayedList+0x3a>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d007      	beq.n	8007736 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007726:	4b1a      	ldr	r3, [pc, #104]	; (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3304      	adds	r3, #4
 800772c:	4619      	mov	r1, r3
 800772e:	4819      	ldr	r0, [pc, #100]	; (8007794 <prvAddCurrentTaskToDelayedList+0x98>)
 8007730:	f7fe fb9d 	bl	8005e6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007734:	e026      	b.n	8007784 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4413      	add	r3, r2
 800773c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800773e:	4b14      	ldr	r3, [pc, #80]	; (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	429a      	cmp	r2, r3
 800774c:	d209      	bcs.n	8007762 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774e:	4b12      	ldr	r3, [pc, #72]	; (8007798 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3304      	adds	r3, #4
 8007758:	4619      	mov	r1, r3
 800775a:	4610      	mov	r0, r2
 800775c:	f7fe fbab 	bl	8005eb6 <vListInsert>
}
 8007760:	e010      	b.n	8007784 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007762:	4b0e      	ldr	r3, [pc, #56]	; (800779c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <prvAddCurrentTaskToDelayedList+0x94>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4610      	mov	r0, r2
 8007770:	f7fe fba1 	bl	8005eb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007774:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	429a      	cmp	r2, r3
 800777c:	d202      	bcs.n	8007784 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800777e:	4a08      	ldr	r2, [pc, #32]	; (80077a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6013      	str	r3, [r2, #0]
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20001620 	.word	0x20001620
 8007790:	20001148 	.word	0x20001148
 8007794:	20001608 	.word	0x20001608
 8007798:	200015d8 	.word	0x200015d8
 800779c:	200015d4 	.word	0x200015d4
 80077a0:	2000163c 	.word	0x2000163c

080077a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b08a      	sub	sp, #40	; 0x28
 80077a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077ae:	f000 fb07 	bl	8007dc0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077b2:	4b1c      	ldr	r3, [pc, #112]	; (8007824 <xTimerCreateTimerTask+0x80>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d021      	beq.n	80077fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077c2:	1d3a      	adds	r2, r7, #4
 80077c4:	f107 0108 	add.w	r1, r7, #8
 80077c8:	f107 030c 	add.w	r3, r7, #12
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe fb07 	bl	8005de0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	9202      	str	r2, [sp, #8]
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	2302      	movs	r3, #2
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	460a      	mov	r2, r1
 80077e4:	4910      	ldr	r1, [pc, #64]	; (8007828 <xTimerCreateTimerTask+0x84>)
 80077e6:	4811      	ldr	r0, [pc, #68]	; (800782c <xTimerCreateTimerTask+0x88>)
 80077e8:	f7ff f8b4 	bl	8006954 <xTaskCreateStatic>
 80077ec:	4603      	mov	r3, r0
 80077ee:	4a10      	ldr	r2, [pc, #64]	; (8007830 <xTimerCreateTimerTask+0x8c>)
 80077f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <xTimerCreateTimerTask+0x8c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077fa:	2301      	movs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10a      	bne.n	800781a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	613b      	str	r3, [r7, #16]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800781a:	697b      	ldr	r3, [r7, #20]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20001678 	.word	0x20001678
 8007828:	08009f80 	.word	0x08009f80
 800782c:	08007969 	.word	0x08007969
 8007830:	2000167c 	.word	0x2000167c

08007834 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08a      	sub	sp, #40	; 0x28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007842:	2300      	movs	r3, #0
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xTimerGenericCommand+0x2e>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	623b      	str	r3, [r7, #32]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007862:	4b1a      	ldr	r3, [pc, #104]	; (80078cc <xTimerGenericCommand+0x98>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d02a      	beq.n	80078c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b05      	cmp	r3, #5
 800787a:	dc18      	bgt.n	80078ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800787c:	f7ff feb2 	bl	80075e4 <xTaskGetSchedulerState>
 8007880:	4603      	mov	r3, r0
 8007882:	2b02      	cmp	r3, #2
 8007884:	d109      	bne.n	800789a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007886:	4b11      	ldr	r3, [pc, #68]	; (80078cc <xTimerGenericCommand+0x98>)
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f107 0110 	add.w	r1, r7, #16
 800788e:	2300      	movs	r3, #0
 8007890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007892:	f7fe fc77 	bl	8006184 <xQueueGenericSend>
 8007896:	6278      	str	r0, [r7, #36]	; 0x24
 8007898:	e012      	b.n	80078c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <xTimerGenericCommand+0x98>)
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	f107 0110 	add.w	r1, r7, #16
 80078a2:	2300      	movs	r3, #0
 80078a4:	2200      	movs	r2, #0
 80078a6:	f7fe fc6d 	bl	8006184 <xQueueGenericSend>
 80078aa:	6278      	str	r0, [r7, #36]	; 0x24
 80078ac:	e008      	b.n	80078c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078ae:	4b07      	ldr	r3, [pc, #28]	; (80078cc <xTimerGenericCommand+0x98>)
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f107 0110 	add.w	r1, r7, #16
 80078b6:	2300      	movs	r3, #0
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	f7fe fd61 	bl	8006380 <xQueueGenericSendFromISR>
 80078be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3728      	adds	r7, #40	; 0x28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20001678 	.word	0x20001678

080078d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b088      	sub	sp, #32
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078da:	4b22      	ldr	r3, [pc, #136]	; (8007964 <prvProcessExpiredTimer+0x94>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	3304      	adds	r3, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe fb1d 	bl	8005f28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d022      	beq.n	8007942 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	699a      	ldr	r2, [r3, #24]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	18d1      	adds	r1, r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	6978      	ldr	r0, [r7, #20]
 800790a:	f000 f8d1 	bl	8007ab0 <prvInsertTimerInActiveList>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01f      	beq.n	8007954 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007914:	2300      	movs	r3, #0
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	2300      	movs	r3, #0
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	2100      	movs	r1, #0
 800791e:	6978      	ldr	r0, [r7, #20]
 8007920:	f7ff ff88 	bl	8007834 <xTimerGenericCommand>
 8007924:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d113      	bne.n	8007954 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800792c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007930:	f383 8811 	msr	BASEPRI, r3
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	f3bf 8f4f 	dsb	sy
 800793c:	60fb      	str	r3, [r7, #12]
}
 800793e:	bf00      	nop
 8007940:	e7fe      	b.n	8007940 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	b2da      	uxtb	r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	6978      	ldr	r0, [r7, #20]
 800795a:	4798      	blx	r3
}
 800795c:	bf00      	nop
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20001670 	.word	0x20001670

08007968 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007970:	f107 0308 	add.w	r3, r7, #8
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f857 	bl	8007a28 <prvGetNextExpireTime>
 800797a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	4619      	mov	r1, r3
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f803 	bl	800798c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007986:	f000 f8d5 	bl	8007b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800798a:	e7f1      	b.n	8007970 <prvTimerTask+0x8>

0800798c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007996:	f7ff fa39 	bl	8006e0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f866 	bl	8007a70 <prvSampleTimeNow>
 80079a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d130      	bne.n	8007a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <prvProcessTimerOrBlockTask+0x3c>
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d806      	bhi.n	80079c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079ba:	f7ff fa35 	bl	8006e28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff ff85 	bl	80078d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079c6:	e024      	b.n	8007a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d008      	beq.n	80079e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079ce:	4b13      	ldr	r3, [pc, #76]	; (8007a1c <prvProcessTimerOrBlockTask+0x90>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <prvProcessTimerOrBlockTask+0x50>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <prvProcessTimerOrBlockTask+0x52>
 80079dc:	2300      	movs	r3, #0
 80079de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079e0:	4b0f      	ldr	r3, [pc, #60]	; (8007a20 <prvProcessTimerOrBlockTask+0x94>)
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	4619      	mov	r1, r3
 80079ee:	f7fe ff7d 	bl	80068ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079f2:	f7ff fa19 	bl	8006e28 <xTaskResumeAll>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079fc:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <prvProcessTimerOrBlockTask+0x98>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
}
 8007a0c:	e001      	b.n	8007a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a0e:	f7ff fa0b 	bl	8006e28 <xTaskResumeAll>
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20001674 	.word	0x20001674
 8007a20:	20001678 	.word	0x20001678
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a30:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <prvGetNextExpireTime+0x44>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <prvGetNextExpireTime+0x16>
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	e000      	b.n	8007a40 <prvGetNextExpireTime+0x18>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a4c:	4b07      	ldr	r3, [pc, #28]	; (8007a6c <prvGetNextExpireTime+0x44>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	e001      	b.n	8007a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	20001670 	.word	0x20001670

08007a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a78:	f7ff fa74 	bl	8006f64 <xTaskGetTickCount>
 8007a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <prvSampleTimeNow+0x3c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d205      	bcs.n	8007a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a88:	f000 f936 	bl	8007cf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e002      	b.n	8007a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a9a:	4a04      	ldr	r2, [pc, #16]	; (8007aac <prvSampleTimeNow+0x3c>)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20001680 	.word	0x20001680

08007ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d812      	bhi.n	8007afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d302      	bcc.n	8007aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e01b      	b.n	8007b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007aea:	4b10      	ldr	r3, [pc, #64]	; (8007b2c <prvInsertTimerInActiveList+0x7c>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7fe f9de 	bl	8005eb6 <vListInsert>
 8007afa:	e012      	b.n	8007b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d206      	bcs.n	8007b12 <prvInsertTimerInActiveList+0x62>
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d302      	bcc.n	8007b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e007      	b.n	8007b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b12:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <prvInsertTimerInActiveList+0x80>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7fe f9ca 	bl	8005eb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b22:	697b      	ldr	r3, [r7, #20]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20001674 	.word	0x20001674
 8007b30:	20001670 	.word	0x20001670

08007b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08e      	sub	sp, #56	; 0x38
 8007b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b3a:	e0ca      	b.n	8007cd2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da18      	bge.n	8007b74 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b42:	1d3b      	adds	r3, r7, #4
 8007b44:	3304      	adds	r3, #4
 8007b46:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	61fb      	str	r3, [r7, #28]
}
 8007b60:	bf00      	nop
 8007b62:	e7fe      	b.n	8007b62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b6a:	6850      	ldr	r0, [r2, #4]
 8007b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b6e:	6892      	ldr	r2, [r2, #8]
 8007b70:	4611      	mov	r1, r2
 8007b72:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	f2c0 80aa 	blt.w	8007cd0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe f9cb 	bl	8005f28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b92:	463b      	mov	r3, r7
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7ff ff6b 	bl	8007a70 <prvSampleTimeNow>
 8007b9a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b09      	cmp	r3, #9
 8007ba0:	f200 8097 	bhi.w	8007cd2 <prvProcessReceivedCommands+0x19e>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <prvProcessReceivedCommands+0x78>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bd5 	.word	0x08007bd5
 8007bb8:	08007c49 	.word	0x08007c49
 8007bbc:	08007c5d 	.word	0x08007c5d
 8007bc0:	08007ca7 	.word	0x08007ca7
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007bd5 	.word	0x08007bd5
 8007bcc:	08007c49 	.word	0x08007c49
 8007bd0:	08007c5d 	.word	0x08007c5d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	18d1      	adds	r1, r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf4:	f7ff ff5c 	bl	8007ab0 <prvInsertTimerInActiveList>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d069      	beq.n	8007cd2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d05e      	beq.n	8007cd2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c26:	f7ff fe05 	bl	8007834 <xTimerGenericCommand>
 8007c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d14f      	bne.n	8007cd2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	61bb      	str	r3, [r7, #24]
}
 8007c44:	bf00      	nop
 8007c46:	e7fe      	b.n	8007c46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007c5a:	e03a      	b.n	8007cd2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c62:	f043 0301 	orr.w	r3, r3, #1
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	617b      	str	r3, [r7, #20]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c94:	699a      	ldr	r2, [r3, #24]
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	18d1      	adds	r1, r2, r3
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca0:	f7ff ff06 	bl	8007ab0 <prvInsertTimerInActiveList>
					break;
 8007ca4:	e015      	b.n	8007cd2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d103      	bne.n	8007cbc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb6:	f000 fbdb 	bl	8008470 <vPortFree>
 8007cba:	e00a      	b.n	8007cd2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cce:	e000      	b.n	8007cd2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007cd0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <prvProcessReceivedCommands+0x1c0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	1d39      	adds	r1, r7, #4
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fbec 	bl	80064b8 <xQueueReceive>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f47f af2a 	bne.w	8007b3c <prvProcessReceivedCommands+0x8>
	}
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3730      	adds	r7, #48	; 0x30
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20001678 	.word	0x20001678

08007cf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cfe:	e048      	b.n	8007d92 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d00:	4b2d      	ldr	r3, [pc, #180]	; (8007db8 <prvSwitchTimerLists+0xc0>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0a:	4b2b      	ldr	r3, [pc, #172]	; (8007db8 <prvSwitchTimerLists+0xc0>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3304      	adds	r3, #4
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fe f905 	bl	8005f28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d02e      	beq.n	8007d92 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d90e      	bls.n	8007d64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d52:	4b19      	ldr	r3, [pc, #100]	; (8007db8 <prvSwitchTimerLists+0xc0>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7fe f8aa 	bl	8005eb6 <vListInsert>
 8007d62:	e016      	b.n	8007d92 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d64:	2300      	movs	r3, #0
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff fd60 	bl	8007834 <xTimerGenericCommand>
 8007d74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	603b      	str	r3, [r7, #0]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <prvSwitchTimerLists+0xc0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1b1      	bne.n	8007d00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <prvSwitchTimerLists+0xc0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <prvSwitchTimerLists+0xc4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a04      	ldr	r2, [pc, #16]	; (8007db8 <prvSwitchTimerLists+0xc0>)
 8007da8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007daa:	4a04      	ldr	r2, [pc, #16]	; (8007dbc <prvSwitchTimerLists+0xc4>)
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	6013      	str	r3, [r2, #0]
}
 8007db0:	bf00      	nop
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20001670 	.word	0x20001670
 8007dbc:	20001674 	.word	0x20001674

08007dc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dc6:	f000 f965 	bl	8008094 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007dca:	4b15      	ldr	r3, [pc, #84]	; (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d120      	bne.n	8007e14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dd2:	4814      	ldr	r0, [pc, #80]	; (8007e24 <prvCheckForValidListAndQueue+0x64>)
 8007dd4:	f7fe f81e 	bl	8005e14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007dd8:	4813      	ldr	r0, [pc, #76]	; (8007e28 <prvCheckForValidListAndQueue+0x68>)
 8007dda:	f7fe f81b 	bl	8005e14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dde:	4b13      	ldr	r3, [pc, #76]	; (8007e2c <prvCheckForValidListAndQueue+0x6c>)
 8007de0:	4a10      	ldr	r2, [pc, #64]	; (8007e24 <prvCheckForValidListAndQueue+0x64>)
 8007de2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007de4:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <prvCheckForValidListAndQueue+0x70>)
 8007de6:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <prvCheckForValidListAndQueue+0x68>)
 8007de8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dea:	2300      	movs	r3, #0
 8007dec:	9300      	str	r3, [sp, #0]
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <prvCheckForValidListAndQueue+0x74>)
 8007df0:	4a11      	ldr	r2, [pc, #68]	; (8007e38 <prvCheckForValidListAndQueue+0x78>)
 8007df2:	2110      	movs	r1, #16
 8007df4:	200a      	movs	r0, #10
 8007df6:	f7fe f929 	bl	800604c <xQueueGenericCreateStatic>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4a08      	ldr	r2, [pc, #32]	; (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007dfe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e00:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d005      	beq.n	8007e14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <prvCheckForValidListAndQueue+0x60>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	490b      	ldr	r1, [pc, #44]	; (8007e3c <prvCheckForValidListAndQueue+0x7c>)
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fd42 	bl	8006898 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e14:	f000 f96e 	bl	80080f4 <vPortExitCritical>
}
 8007e18:	bf00      	nop
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20001678 	.word	0x20001678
 8007e24:	20001648 	.word	0x20001648
 8007e28:	2000165c 	.word	0x2000165c
 8007e2c:	20001670 	.word	0x20001670
 8007e30:	20001674 	.word	0x20001674
 8007e34:	20001724 	.word	0x20001724
 8007e38:	20001684 	.word	0x20001684
 8007e3c:	08009f88 	.word	0x08009f88

08007e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3b04      	subs	r3, #4
 8007e50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	f023 0201 	bic.w	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3b04      	subs	r3, #4
 8007e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e70:	4a0c      	ldr	r2, [pc, #48]	; (8007ea4 <pxPortInitialiseStack+0x64>)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3b14      	subs	r3, #20
 8007e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f06f 0202 	mvn.w	r2, #2
 8007e8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3b20      	subs	r3, #32
 8007e94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e96:	68fb      	ldr	r3, [r7, #12]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	08007ea9 	.word	0x08007ea9

08007ea8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007eb2:	4b12      	ldr	r3, [pc, #72]	; (8007efc <prvTaskExitError+0x54>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d00a      	beq.n	8007ed2 <prvTaskExitError+0x2a>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	60fb      	str	r3, [r7, #12]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <prvTaskExitError+0x28>
	__asm volatile
 8007ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	60bb      	str	r3, [r7, #8]
}
 8007ee4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ee6:	bf00      	nop
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0fc      	beq.n	8007ee8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eee:	bf00      	nop
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	2000000c 	.word	0x2000000c

08007f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <pxCurrentTCBConst2>)
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	6808      	ldr	r0, [r1, #0]
 8007f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	f380 8809 	msr	PSP, r0
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8811 	msr	BASEPRI, r0
 8007f1a:	4770      	bx	lr
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst2>:
 8007f20:	20001148 	.word	0x20001148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f28:	4808      	ldr	r0, [pc, #32]	; (8007f4c <prvPortStartFirstTask+0x24>)
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f380 8808 	msr	MSP, r0
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8814 	msr	CONTROL, r0
 8007f3a:	b662      	cpsie	i
 8007f3c:	b661      	cpsie	f
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	df00      	svc	0
 8007f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f4a:	bf00      	nop
 8007f4c:	e000ed08 	.word	0xe000ed08

08007f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f56:	4b46      	ldr	r3, [pc, #280]	; (8008070 <xPortStartScheduler+0x120>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a46      	ldr	r2, [pc, #280]	; (8008074 <xPortStartScheduler+0x124>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d10a      	bne.n	8007f76 <xPortStartScheduler+0x26>
	__asm volatile
 8007f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f64:	f383 8811 	msr	BASEPRI, r3
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	f3bf 8f4f 	dsb	sy
 8007f70:	613b      	str	r3, [r7, #16]
}
 8007f72:	bf00      	nop
 8007f74:	e7fe      	b.n	8007f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f76:	4b3e      	ldr	r3, [pc, #248]	; (8008070 <xPortStartScheduler+0x120>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a3f      	ldr	r2, [pc, #252]	; (8008078 <xPortStartScheduler+0x128>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d10a      	bne.n	8007f96 <xPortStartScheduler+0x46>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f96:	4b39      	ldr	r3, [pc, #228]	; (800807c <xPortStartScheduler+0x12c>)
 8007f98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	22ff      	movs	r2, #255	; 0xff
 8007fa6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4b31      	ldr	r3, [pc, #196]	; (8008080 <xPortStartScheduler+0x130>)
 8007fbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fbe:	4b31      	ldr	r3, [pc, #196]	; (8008084 <xPortStartScheduler+0x134>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fc4:	e009      	b.n	8007fda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fc6:	4b2f      	ldr	r3, [pc, #188]	; (8008084 <xPortStartScheduler+0x134>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	4a2d      	ldr	r2, [pc, #180]	; (8008084 <xPortStartScheduler+0x134>)
 8007fce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	2b80      	cmp	r3, #128	; 0x80
 8007fe4:	d0ef      	beq.n	8007fc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fe6:	4b27      	ldr	r3, [pc, #156]	; (8008084 <xPortStartScheduler+0x134>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f1c3 0307 	rsb	r3, r3, #7
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d00a      	beq.n	8008008 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60bb      	str	r3, [r7, #8]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008008:	4b1e      	ldr	r3, [pc, #120]	; (8008084 <xPortStartScheduler+0x134>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	4a1d      	ldr	r2, [pc, #116]	; (8008084 <xPortStartScheduler+0x134>)
 8008010:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008012:	4b1c      	ldr	r3, [pc, #112]	; (8008084 <xPortStartScheduler+0x134>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800801a:	4a1a      	ldr	r2, [pc, #104]	; (8008084 <xPortStartScheduler+0x134>)
 800801c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	b2da      	uxtb	r2, r3
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <xPortStartScheduler+0x138>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a17      	ldr	r2, [pc, #92]	; (8008088 <xPortStartScheduler+0x138>)
 800802c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008030:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <xPortStartScheduler+0x138>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a14      	ldr	r2, [pc, #80]	; (8008088 <xPortStartScheduler+0x138>)
 8008038:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800803c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800803e:	f000 f8dd 	bl	80081fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <xPortStartScheduler+0x13c>)
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008048:	f000 f8fc 	bl	8008244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800804c:	4b10      	ldr	r3, [pc, #64]	; (8008090 <xPortStartScheduler+0x140>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0f      	ldr	r2, [pc, #60]	; (8008090 <xPortStartScheduler+0x140>)
 8008052:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008056:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008058:	f7ff ff66 	bl	8007f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800805c:	f7ff f84c 	bl	80070f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008060:	f7ff ff22 	bl	8007ea8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	e000ed00 	.word	0xe000ed00
 8008074:	410fc271 	.word	0x410fc271
 8008078:	410fc270 	.word	0x410fc270
 800807c:	e000e400 	.word	0xe000e400
 8008080:	20001774 	.word	0x20001774
 8008084:	20001778 	.word	0x20001778
 8008088:	e000ed20 	.word	0xe000ed20
 800808c:	2000000c 	.word	0x2000000c
 8008090:	e000ef34 	.word	0xe000ef34

08008094 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
	__asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	607b      	str	r3, [r7, #4]
}
 80080ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080ae:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <vPortEnterCritical+0x58>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3301      	adds	r3, #1
 80080b4:	4a0d      	ldr	r2, [pc, #52]	; (80080ec <vPortEnterCritical+0x58>)
 80080b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080b8:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <vPortEnterCritical+0x58>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d10f      	bne.n	80080e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080c0:	4b0b      	ldr	r3, [pc, #44]	; (80080f0 <vPortEnterCritical+0x5c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	603b      	str	r3, [r7, #0]
}
 80080dc:	bf00      	nop
 80080de:	e7fe      	b.n	80080de <vPortEnterCritical+0x4a>
	}
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	2000000c 	.word	0x2000000c
 80080f0:	e000ed04 	.word	0xe000ed04

080080f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080fa:	4b12      	ldr	r3, [pc, #72]	; (8008144 <vPortExitCritical+0x50>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10a      	bne.n	8008118 <vPortExitCritical+0x24>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	607b      	str	r3, [r7, #4]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <vPortExitCritical+0x50>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3b01      	subs	r3, #1
 800811e:	4a09      	ldr	r2, [pc, #36]	; (8008144 <vPortExitCritical+0x50>)
 8008120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008122:	4b08      	ldr	r3, [pc, #32]	; (8008144 <vPortExitCritical+0x50>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d105      	bne.n	8008136 <vPortExitCritical+0x42>
 800812a:	2300      	movs	r3, #0
 800812c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	f383 8811 	msr	BASEPRI, r3
}
 8008134:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008136:	bf00      	nop
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	2000000c 	.word	0x2000000c
	...

08008150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008150:	f3ef 8009 	mrs	r0, PSP
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	4b15      	ldr	r3, [pc, #84]	; (80081b0 <pxCurrentTCBConst>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f01e 0f10 	tst.w	lr, #16
 8008160:	bf08      	it	eq
 8008162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816a:	6010      	str	r0, [r2, #0]
 800816c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008174:	f380 8811 	msr	BASEPRI, r0
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f7fe ffba 	bl	80070f8 <vTaskSwitchContext>
 8008184:	f04f 0000 	mov.w	r0, #0
 8008188:	f380 8811 	msr	BASEPRI, r0
 800818c:	bc09      	pop	{r0, r3}
 800818e:	6819      	ldr	r1, [r3, #0]
 8008190:	6808      	ldr	r0, [r1, #0]
 8008192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008196:	f01e 0f10 	tst.w	lr, #16
 800819a:	bf08      	it	eq
 800819c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081a0:	f380 8809 	msr	PSP, r0
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	f3af 8000 	nop.w

080081b0 <pxCurrentTCBConst>:
 80081b0:	20001148 	.word	0x20001148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop

080081b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
	__asm volatile
 80081be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	607b      	str	r3, [r7, #4]
}
 80081d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081d2:	f7fe fed7 	bl	8006f84 <xTaskIncrementTick>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081dc:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <xPortSysTickHandler+0x40>)
 80081de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	2300      	movs	r3, #0
 80081e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	f383 8811 	msr	BASEPRI, r3
}
 80081ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081f0:	bf00      	nop
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008200:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <vPortSetupTimerInterrupt+0x38>)
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800820c:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <vPortSetupTimerInterrupt+0x3c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a0a      	ldr	r2, [pc, #40]	; (800823c <vPortSetupTimerInterrupt+0x40>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <vPortSetupTimerInterrupt+0x44>)
 800821a:	3b01      	subs	r3, #1
 800821c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800821e:	4b04      	ldr	r3, [pc, #16]	; (8008230 <vPortSetupTimerInterrupt+0x34>)
 8008220:	2207      	movs	r2, #7
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	e000e010 	.word	0xe000e010
 8008234:	e000e018 	.word	0xe000e018
 8008238:	20000000 	.word	0x20000000
 800823c:	10624dd3 	.word	0x10624dd3
 8008240:	e000e014 	.word	0xe000e014

08008244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008254 <vPortEnableVFP+0x10>
 8008248:	6801      	ldr	r1, [r0, #0]
 800824a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800824e:	6001      	str	r1, [r0, #0]
 8008250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008252:	bf00      	nop
 8008254:	e000ed88 	.word	0xe000ed88

08008258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800825e:	f3ef 8305 	mrs	r3, IPSR
 8008262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d914      	bls.n	8008294 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800826a:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <vPortValidateInterruptPriority+0x70>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008274:	4b15      	ldr	r3, [pc, #84]	; (80082cc <vPortValidateInterruptPriority+0x74>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	7afa      	ldrb	r2, [r7, #11]
 800827a:	429a      	cmp	r2, r3
 800827c:	d20a      	bcs.n	8008294 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
 8008292:	e7fe      	b.n	8008292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008294:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <vPortValidateInterruptPriority+0x78>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <vPortValidateInterruptPriority+0x7c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d90a      	bls.n	80082ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	603b      	str	r3, [r7, #0]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <vPortValidateInterruptPriority+0x60>
	}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	e000e3f0 	.word	0xe000e3f0
 80082cc:	20001774 	.word	0x20001774
 80082d0:	e000ed0c 	.word	0xe000ed0c
 80082d4:	20001778 	.word	0x20001778

080082d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08a      	sub	sp, #40	; 0x28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082e4:	f7fe fd92 	bl	8006e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082e8:	4b5b      	ldr	r3, [pc, #364]	; (8008458 <pvPortMalloc+0x180>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082f0:	f000 f920 	bl	8008534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082f4:	4b59      	ldr	r3, [pc, #356]	; (800845c <pvPortMalloc+0x184>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 8093 	bne.w	8008428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01d      	beq.n	8008344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008308:	2208      	movs	r2, #8
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4413      	add	r3, r2
 800830e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b00      	cmp	r3, #0
 8008318:	d014      	beq.n	8008344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f023 0307 	bic.w	r3, r3, #7
 8008320:	3308      	adds	r3, #8
 8008322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <pvPortMalloc+0x6c>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	617b      	str	r3, [r7, #20]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d06e      	beq.n	8008428 <pvPortMalloc+0x150>
 800834a:	4b45      	ldr	r3, [pc, #276]	; (8008460 <pvPortMalloc+0x188>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d869      	bhi.n	8008428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008354:	4b43      	ldr	r3, [pc, #268]	; (8008464 <pvPortMalloc+0x18c>)
 8008356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008358:	4b42      	ldr	r3, [pc, #264]	; (8008464 <pvPortMalloc+0x18c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800835e:	e004      	b.n	800836a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	429a      	cmp	r2, r3
 8008372:	d903      	bls.n	800837c <pvPortMalloc+0xa4>
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f1      	bne.n	8008360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800837c:	4b36      	ldr	r3, [pc, #216]	; (8008458 <pvPortMalloc+0x180>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008382:	429a      	cmp	r2, r3
 8008384:	d050      	beq.n	8008428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2208      	movs	r2, #8
 800838c:	4413      	add	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	1ad2      	subs	r2, r2, r3
 80083a0:	2308      	movs	r3, #8
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d91f      	bls.n	80083e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4413      	add	r3, r2
 80083ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00a      	beq.n	80083d0 <pvPortMalloc+0xf8>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	613b      	str	r3, [r7, #16]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083e2:	69b8      	ldr	r0, [r7, #24]
 80083e4:	f000 f908 	bl	80085f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083e8:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <pvPortMalloc+0x188>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	4a1b      	ldr	r2, [pc, #108]	; (8008460 <pvPortMalloc+0x188>)
 80083f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083f6:	4b1a      	ldr	r3, [pc, #104]	; (8008460 <pvPortMalloc+0x188>)
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	4b1b      	ldr	r3, [pc, #108]	; (8008468 <pvPortMalloc+0x190>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d203      	bcs.n	800840a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008402:	4b17      	ldr	r3, [pc, #92]	; (8008460 <pvPortMalloc+0x188>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a18      	ldr	r2, [pc, #96]	; (8008468 <pvPortMalloc+0x190>)
 8008408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	4b13      	ldr	r3, [pc, #76]	; (800845c <pvPortMalloc+0x184>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	431a      	orrs	r2, r3
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <pvPortMalloc+0x194>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	4a11      	ldr	r2, [pc, #68]	; (800846c <pvPortMalloc+0x194>)
 8008426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008428:	f7fe fcfe 	bl	8006e28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	f003 0307 	and.w	r3, r3, #7
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <pvPortMalloc+0x174>
	__asm volatile
 8008436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843a:	f383 8811 	msr	BASEPRI, r3
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	60fb      	str	r3, [r7, #12]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <pvPortMalloc+0x172>
	return pvReturn;
 800844c:	69fb      	ldr	r3, [r7, #28]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3728      	adds	r7, #40	; 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20005384 	.word	0x20005384
 800845c:	20005398 	.word	0x20005398
 8008460:	20005388 	.word	0x20005388
 8008464:	2000537c 	.word	0x2000537c
 8008468:	2000538c 	.word	0x2000538c
 800846c:	20005390 	.word	0x20005390

08008470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d04d      	beq.n	800851e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008482:	2308      	movs	r3, #8
 8008484:	425b      	negs	r3, r3
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	4413      	add	r3, r2
 800848a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	4b24      	ldr	r3, [pc, #144]	; (8008528 <vPortFree+0xb8>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4013      	ands	r3, r2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10a      	bne.n	80084b4 <vPortFree+0x44>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60fb      	str	r3, [r7, #12]
}
 80084b0:	bf00      	nop
 80084b2:	e7fe      	b.n	80084b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <vPortFree+0x62>
	__asm volatile
 80084bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c0:	f383 8811 	msr	BASEPRI, r3
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	f3bf 8f4f 	dsb	sy
 80084cc:	60bb      	str	r3, [r7, #8]
}
 80084ce:	bf00      	nop
 80084d0:	e7fe      	b.n	80084d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	4b14      	ldr	r3, [pc, #80]	; (8008528 <vPortFree+0xb8>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4013      	ands	r3, r2
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01e      	beq.n	800851e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d11a      	bne.n	800851e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	4b0e      	ldr	r3, [pc, #56]	; (8008528 <vPortFree+0xb8>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	43db      	mvns	r3, r3
 80084f2:	401a      	ands	r2, r3
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084f8:	f7fe fc88 	bl	8006e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	4b0a      	ldr	r3, [pc, #40]	; (800852c <vPortFree+0xbc>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4413      	add	r3, r2
 8008506:	4a09      	ldr	r2, [pc, #36]	; (800852c <vPortFree+0xbc>)
 8008508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800850a:	6938      	ldr	r0, [r7, #16]
 800850c:	f000 f874 	bl	80085f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <vPortFree+0xc0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	4a06      	ldr	r2, [pc, #24]	; (8008530 <vPortFree+0xc0>)
 8008518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800851a:	f7fe fc85 	bl	8006e28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	20005398 	.word	0x20005398
 800852c:	20005388 	.word	0x20005388
 8008530:	20005394 	.word	0x20005394

08008534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800853a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800853e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008540:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <prvHeapInit+0xac>)
 8008542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	4a1f      	ldr	r2, [pc, #124]	; (80085e0 <prvHeapInit+0xac>)
 8008564:	4413      	add	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800856c:	4a1d      	ldr	r2, [pc, #116]	; (80085e4 <prvHeapInit+0xb0>)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008572:	4b1c      	ldr	r3, [pc, #112]	; (80085e4 <prvHeapInit+0xb0>)
 8008574:	2200      	movs	r2, #0
 8008576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	4413      	add	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008580:	2208      	movs	r2, #8
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0307 	bic.w	r3, r3, #7
 800858e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <prvHeapInit+0xb4>)
 8008594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008596:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <prvHeapInit+0xb4>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800859e:	4b12      	ldr	r3, [pc, #72]	; (80085e8 <prvHeapInit+0xb4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	1ad2      	subs	r2, r2, r3
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085b4:	4b0c      	ldr	r3, [pc, #48]	; (80085e8 <prvHeapInit+0xb4>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a0a      	ldr	r2, [pc, #40]	; (80085ec <prvHeapInit+0xb8>)
 80085c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	4a09      	ldr	r2, [pc, #36]	; (80085f0 <prvHeapInit+0xbc>)
 80085ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085cc:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <prvHeapInit+0xc0>)
 80085ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085d2:	601a      	str	r2, [r3, #0]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	2000177c 	.word	0x2000177c
 80085e4:	2000537c 	.word	0x2000537c
 80085e8:	20005384 	.word	0x20005384
 80085ec:	2000538c 	.word	0x2000538c
 80085f0:	20005388 	.word	0x20005388
 80085f4:	20005398 	.word	0x20005398

080085f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008600:	4b28      	ldr	r3, [pc, #160]	; (80086a4 <prvInsertBlockIntoFreeList+0xac>)
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	e002      	b.n	800860c <prvInsertBlockIntoFreeList+0x14>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	429a      	cmp	r2, r3
 8008614:	d8f7      	bhi.n	8008606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	4413      	add	r3, r2
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d108      	bne.n	800863a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	441a      	add	r2, r3
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d118      	bne.n	8008680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	4b15      	ldr	r3, [pc, #84]	; (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d00d      	beq.n	8008676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	441a      	add	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e008      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e003      	b.n	8008688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	d002      	beq.n	8008696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	2000537c 	.word	0x2000537c
 80086a8:	20005384 	.word	0x20005384

080086ac <__errno>:
 80086ac:	4b01      	ldr	r3, [pc, #4]	; (80086b4 <__errno+0x8>)
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20000010 	.word	0x20000010

080086b8 <__libc_init_array>:
 80086b8:	b570      	push	{r4, r5, r6, lr}
 80086ba:	4d0d      	ldr	r5, [pc, #52]	; (80086f0 <__libc_init_array+0x38>)
 80086bc:	4c0d      	ldr	r4, [pc, #52]	; (80086f4 <__libc_init_array+0x3c>)
 80086be:	1b64      	subs	r4, r4, r5
 80086c0:	10a4      	asrs	r4, r4, #2
 80086c2:	2600      	movs	r6, #0
 80086c4:	42a6      	cmp	r6, r4
 80086c6:	d109      	bne.n	80086dc <__libc_init_array+0x24>
 80086c8:	4d0b      	ldr	r5, [pc, #44]	; (80086f8 <__libc_init_array+0x40>)
 80086ca:	4c0c      	ldr	r4, [pc, #48]	; (80086fc <__libc_init_array+0x44>)
 80086cc:	f001 fc12 	bl	8009ef4 <_init>
 80086d0:	1b64      	subs	r4, r4, r5
 80086d2:	10a4      	asrs	r4, r4, #2
 80086d4:	2600      	movs	r6, #0
 80086d6:	42a6      	cmp	r6, r4
 80086d8:	d105      	bne.n	80086e6 <__libc_init_array+0x2e>
 80086da:	bd70      	pop	{r4, r5, r6, pc}
 80086dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e0:	4798      	blx	r3
 80086e2:	3601      	adds	r6, #1
 80086e4:	e7ee      	b.n	80086c4 <__libc_init_array+0xc>
 80086e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ea:	4798      	blx	r3
 80086ec:	3601      	adds	r6, #1
 80086ee:	e7f2      	b.n	80086d6 <__libc_init_array+0x1e>
 80086f0:	0800a098 	.word	0x0800a098
 80086f4:	0800a098 	.word	0x0800a098
 80086f8:	0800a098 	.word	0x0800a098
 80086fc:	0800a09c 	.word	0x0800a09c

08008700 <__retarget_lock_acquire_recursive>:
 8008700:	4770      	bx	lr

08008702 <__retarget_lock_release_recursive>:
 8008702:	4770      	bx	lr

08008704 <memcpy>:
 8008704:	440a      	add	r2, r1
 8008706:	4291      	cmp	r1, r2
 8008708:	f100 33ff 	add.w	r3, r0, #4294967295
 800870c:	d100      	bne.n	8008710 <memcpy+0xc>
 800870e:	4770      	bx	lr
 8008710:	b510      	push	{r4, lr}
 8008712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800871a:	4291      	cmp	r1, r2
 800871c:	d1f9      	bne.n	8008712 <memcpy+0xe>
 800871e:	bd10      	pop	{r4, pc}

08008720 <memset>:
 8008720:	4402      	add	r2, r0
 8008722:	4603      	mov	r3, r0
 8008724:	4293      	cmp	r3, r2
 8008726:	d100      	bne.n	800872a <memset+0xa>
 8008728:	4770      	bx	lr
 800872a:	f803 1b01 	strb.w	r1, [r3], #1
 800872e:	e7f9      	b.n	8008724 <memset+0x4>

08008730 <sbrk_aligned>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	4e0e      	ldr	r6, [pc, #56]	; (800876c <sbrk_aligned+0x3c>)
 8008734:	460c      	mov	r4, r1
 8008736:	6831      	ldr	r1, [r6, #0]
 8008738:	4605      	mov	r5, r0
 800873a:	b911      	cbnz	r1, 8008742 <sbrk_aligned+0x12>
 800873c:	f000 f8f6 	bl	800892c <_sbrk_r>
 8008740:	6030      	str	r0, [r6, #0]
 8008742:	4621      	mov	r1, r4
 8008744:	4628      	mov	r0, r5
 8008746:	f000 f8f1 	bl	800892c <_sbrk_r>
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	d00a      	beq.n	8008764 <sbrk_aligned+0x34>
 800874e:	1cc4      	adds	r4, r0, #3
 8008750:	f024 0403 	bic.w	r4, r4, #3
 8008754:	42a0      	cmp	r0, r4
 8008756:	d007      	beq.n	8008768 <sbrk_aligned+0x38>
 8008758:	1a21      	subs	r1, r4, r0
 800875a:	4628      	mov	r0, r5
 800875c:	f000 f8e6 	bl	800892c <_sbrk_r>
 8008760:	3001      	adds	r0, #1
 8008762:	d101      	bne.n	8008768 <sbrk_aligned+0x38>
 8008764:	f04f 34ff 	mov.w	r4, #4294967295
 8008768:	4620      	mov	r0, r4
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	200053a4 	.word	0x200053a4

08008770 <_malloc_r>:
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	1ccd      	adds	r5, r1, #3
 8008776:	f025 0503 	bic.w	r5, r5, #3
 800877a:	3508      	adds	r5, #8
 800877c:	2d0c      	cmp	r5, #12
 800877e:	bf38      	it	cc
 8008780:	250c      	movcc	r5, #12
 8008782:	2d00      	cmp	r5, #0
 8008784:	4607      	mov	r7, r0
 8008786:	db01      	blt.n	800878c <_malloc_r+0x1c>
 8008788:	42a9      	cmp	r1, r5
 800878a:	d905      	bls.n	8008798 <_malloc_r+0x28>
 800878c:	230c      	movs	r3, #12
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	2600      	movs	r6, #0
 8008792:	4630      	mov	r0, r6
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	4e2e      	ldr	r6, [pc, #184]	; (8008854 <_malloc_r+0xe4>)
 800879a:	f000 f8f7 	bl	800898c <__malloc_lock>
 800879e:	6833      	ldr	r3, [r6, #0]
 80087a0:	461c      	mov	r4, r3
 80087a2:	bb34      	cbnz	r4, 80087f2 <_malloc_r+0x82>
 80087a4:	4629      	mov	r1, r5
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7ff ffc2 	bl	8008730 <sbrk_aligned>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	4604      	mov	r4, r0
 80087b0:	d14d      	bne.n	800884e <_malloc_r+0xde>
 80087b2:	6834      	ldr	r4, [r6, #0]
 80087b4:	4626      	mov	r6, r4
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	d140      	bne.n	800883c <_malloc_r+0xcc>
 80087ba:	6823      	ldr	r3, [r4, #0]
 80087bc:	4631      	mov	r1, r6
 80087be:	4638      	mov	r0, r7
 80087c0:	eb04 0803 	add.w	r8, r4, r3
 80087c4:	f000 f8b2 	bl	800892c <_sbrk_r>
 80087c8:	4580      	cmp	r8, r0
 80087ca:	d13a      	bne.n	8008842 <_malloc_r+0xd2>
 80087cc:	6821      	ldr	r1, [r4, #0]
 80087ce:	3503      	adds	r5, #3
 80087d0:	1a6d      	subs	r5, r5, r1
 80087d2:	f025 0503 	bic.w	r5, r5, #3
 80087d6:	3508      	adds	r5, #8
 80087d8:	2d0c      	cmp	r5, #12
 80087da:	bf38      	it	cc
 80087dc:	250c      	movcc	r5, #12
 80087de:	4629      	mov	r1, r5
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff ffa5 	bl	8008730 <sbrk_aligned>
 80087e6:	3001      	adds	r0, #1
 80087e8:	d02b      	beq.n	8008842 <_malloc_r+0xd2>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	442b      	add	r3, r5
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	e00e      	b.n	8008810 <_malloc_r+0xa0>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	1b52      	subs	r2, r2, r5
 80087f6:	d41e      	bmi.n	8008836 <_malloc_r+0xc6>
 80087f8:	2a0b      	cmp	r2, #11
 80087fa:	d916      	bls.n	800882a <_malloc_r+0xba>
 80087fc:	1961      	adds	r1, r4, r5
 80087fe:	42a3      	cmp	r3, r4
 8008800:	6025      	str	r5, [r4, #0]
 8008802:	bf18      	it	ne
 8008804:	6059      	strne	r1, [r3, #4]
 8008806:	6863      	ldr	r3, [r4, #4]
 8008808:	bf08      	it	eq
 800880a:	6031      	streq	r1, [r6, #0]
 800880c:	5162      	str	r2, [r4, r5]
 800880e:	604b      	str	r3, [r1, #4]
 8008810:	4638      	mov	r0, r7
 8008812:	f104 060b 	add.w	r6, r4, #11
 8008816:	f000 f8bf 	bl	8008998 <__malloc_unlock>
 800881a:	f026 0607 	bic.w	r6, r6, #7
 800881e:	1d23      	adds	r3, r4, #4
 8008820:	1af2      	subs	r2, r6, r3
 8008822:	d0b6      	beq.n	8008792 <_malloc_r+0x22>
 8008824:	1b9b      	subs	r3, r3, r6
 8008826:	50a3      	str	r3, [r4, r2]
 8008828:	e7b3      	b.n	8008792 <_malloc_r+0x22>
 800882a:	6862      	ldr	r2, [r4, #4]
 800882c:	42a3      	cmp	r3, r4
 800882e:	bf0c      	ite	eq
 8008830:	6032      	streq	r2, [r6, #0]
 8008832:	605a      	strne	r2, [r3, #4]
 8008834:	e7ec      	b.n	8008810 <_malloc_r+0xa0>
 8008836:	4623      	mov	r3, r4
 8008838:	6864      	ldr	r4, [r4, #4]
 800883a:	e7b2      	b.n	80087a2 <_malloc_r+0x32>
 800883c:	4634      	mov	r4, r6
 800883e:	6876      	ldr	r6, [r6, #4]
 8008840:	e7b9      	b.n	80087b6 <_malloc_r+0x46>
 8008842:	230c      	movs	r3, #12
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	4638      	mov	r0, r7
 8008848:	f000 f8a6 	bl	8008998 <__malloc_unlock>
 800884c:	e7a1      	b.n	8008792 <_malloc_r+0x22>
 800884e:	6025      	str	r5, [r4, #0]
 8008850:	e7de      	b.n	8008810 <_malloc_r+0xa0>
 8008852:	bf00      	nop
 8008854:	200053a0 	.word	0x200053a0

08008858 <cleanup_glue>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	460c      	mov	r4, r1
 800885c:	6809      	ldr	r1, [r1, #0]
 800885e:	4605      	mov	r5, r0
 8008860:	b109      	cbz	r1, 8008866 <cleanup_glue+0xe>
 8008862:	f7ff fff9 	bl	8008858 <cleanup_glue>
 8008866:	4621      	mov	r1, r4
 8008868:	4628      	mov	r0, r5
 800886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800886e:	f000 b899 	b.w	80089a4 <_free_r>
	...

08008874 <_reclaim_reent>:
 8008874:	4b2c      	ldr	r3, [pc, #176]	; (8008928 <_reclaim_reent+0xb4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4283      	cmp	r3, r0
 800887a:	b570      	push	{r4, r5, r6, lr}
 800887c:	4604      	mov	r4, r0
 800887e:	d051      	beq.n	8008924 <_reclaim_reent+0xb0>
 8008880:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008882:	b143      	cbz	r3, 8008896 <_reclaim_reent+0x22>
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d14a      	bne.n	8008920 <_reclaim_reent+0xac>
 800888a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800888c:	6819      	ldr	r1, [r3, #0]
 800888e:	b111      	cbz	r1, 8008896 <_reclaim_reent+0x22>
 8008890:	4620      	mov	r0, r4
 8008892:	f000 f887 	bl	80089a4 <_free_r>
 8008896:	6961      	ldr	r1, [r4, #20]
 8008898:	b111      	cbz	r1, 80088a0 <_reclaim_reent+0x2c>
 800889a:	4620      	mov	r0, r4
 800889c:	f000 f882 	bl	80089a4 <_free_r>
 80088a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80088a2:	b111      	cbz	r1, 80088aa <_reclaim_reent+0x36>
 80088a4:	4620      	mov	r0, r4
 80088a6:	f000 f87d 	bl	80089a4 <_free_r>
 80088aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80088ac:	b111      	cbz	r1, 80088b4 <_reclaim_reent+0x40>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f878 	bl	80089a4 <_free_r>
 80088b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80088b6:	b111      	cbz	r1, 80088be <_reclaim_reent+0x4a>
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 f873 	bl	80089a4 <_free_r>
 80088be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80088c0:	b111      	cbz	r1, 80088c8 <_reclaim_reent+0x54>
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f86e 	bl	80089a4 <_free_r>
 80088c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80088ca:	b111      	cbz	r1, 80088d2 <_reclaim_reent+0x5e>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 f869 	bl	80089a4 <_free_r>
 80088d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80088d4:	b111      	cbz	r1, 80088dc <_reclaim_reent+0x68>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f864 	bl	80089a4 <_free_r>
 80088dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088de:	b111      	cbz	r1, 80088e6 <_reclaim_reent+0x72>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 f85f 	bl	80089a4 <_free_r>
 80088e6:	69a3      	ldr	r3, [r4, #24]
 80088e8:	b1e3      	cbz	r3, 8008924 <_reclaim_reent+0xb0>
 80088ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80088ec:	4620      	mov	r0, r4
 80088ee:	4798      	blx	r3
 80088f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80088f2:	b1b9      	cbz	r1, 8008924 <_reclaim_reent+0xb0>
 80088f4:	4620      	mov	r0, r4
 80088f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088fa:	f7ff bfad 	b.w	8008858 <cleanup_glue>
 80088fe:	5949      	ldr	r1, [r1, r5]
 8008900:	b941      	cbnz	r1, 8008914 <_reclaim_reent+0xa0>
 8008902:	3504      	adds	r5, #4
 8008904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008906:	2d80      	cmp	r5, #128	; 0x80
 8008908:	68d9      	ldr	r1, [r3, #12]
 800890a:	d1f8      	bne.n	80088fe <_reclaim_reent+0x8a>
 800890c:	4620      	mov	r0, r4
 800890e:	f000 f849 	bl	80089a4 <_free_r>
 8008912:	e7ba      	b.n	800888a <_reclaim_reent+0x16>
 8008914:	680e      	ldr	r6, [r1, #0]
 8008916:	4620      	mov	r0, r4
 8008918:	f000 f844 	bl	80089a4 <_free_r>
 800891c:	4631      	mov	r1, r6
 800891e:	e7ef      	b.n	8008900 <_reclaim_reent+0x8c>
 8008920:	2500      	movs	r5, #0
 8008922:	e7ef      	b.n	8008904 <_reclaim_reent+0x90>
 8008924:	bd70      	pop	{r4, r5, r6, pc}
 8008926:	bf00      	nop
 8008928:	20000010 	.word	0x20000010

0800892c <_sbrk_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d06      	ldr	r5, [pc, #24]	; (8008948 <_sbrk_r+0x1c>)
 8008930:	2300      	movs	r3, #0
 8008932:	4604      	mov	r4, r0
 8008934:	4608      	mov	r0, r1
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	f7f9 fb18 	bl	8001f6c <_sbrk>
 800893c:	1c43      	adds	r3, r0, #1
 800893e:	d102      	bne.n	8008946 <_sbrk_r+0x1a>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	b103      	cbz	r3, 8008946 <_sbrk_r+0x1a>
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	200053a8 	.word	0x200053a8

0800894c <siprintf>:
 800894c:	b40e      	push	{r1, r2, r3}
 800894e:	b500      	push	{lr}
 8008950:	b09c      	sub	sp, #112	; 0x70
 8008952:	ab1d      	add	r3, sp, #116	; 0x74
 8008954:	9002      	str	r0, [sp, #8]
 8008956:	9006      	str	r0, [sp, #24]
 8008958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800895c:	4809      	ldr	r0, [pc, #36]	; (8008984 <siprintf+0x38>)
 800895e:	9107      	str	r1, [sp, #28]
 8008960:	9104      	str	r1, [sp, #16]
 8008962:	4909      	ldr	r1, [pc, #36]	; (8008988 <siprintf+0x3c>)
 8008964:	f853 2b04 	ldr.w	r2, [r3], #4
 8008968:	9105      	str	r1, [sp, #20]
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	a902      	add	r1, sp, #8
 8008970:	f000 f8c0 	bl	8008af4 <_svfiprintf_r>
 8008974:	9b02      	ldr	r3, [sp, #8]
 8008976:	2200      	movs	r2, #0
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	b01c      	add	sp, #112	; 0x70
 800897c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008980:	b003      	add	sp, #12
 8008982:	4770      	bx	lr
 8008984:	20000010 	.word	0x20000010
 8008988:	ffff0208 	.word	0xffff0208

0800898c <__malloc_lock>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__malloc_lock+0x8>)
 800898e:	f7ff beb7 	b.w	8008700 <__retarget_lock_acquire_recursive>
 8008992:	bf00      	nop
 8008994:	2000539c 	.word	0x2000539c

08008998 <__malloc_unlock>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__malloc_unlock+0x8>)
 800899a:	f7ff beb2 	b.w	8008702 <__retarget_lock_release_recursive>
 800899e:	bf00      	nop
 80089a0:	2000539c 	.word	0x2000539c

080089a4 <_free_r>:
 80089a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089a6:	2900      	cmp	r1, #0
 80089a8:	d044      	beq.n	8008a34 <_free_r+0x90>
 80089aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ae:	9001      	str	r0, [sp, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f1a1 0404 	sub.w	r4, r1, #4
 80089b6:	bfb8      	it	lt
 80089b8:	18e4      	addlt	r4, r4, r3
 80089ba:	f7ff ffe7 	bl	800898c <__malloc_lock>
 80089be:	4a1e      	ldr	r2, [pc, #120]	; (8008a38 <_free_r+0x94>)
 80089c0:	9801      	ldr	r0, [sp, #4]
 80089c2:	6813      	ldr	r3, [r2, #0]
 80089c4:	b933      	cbnz	r3, 80089d4 <_free_r+0x30>
 80089c6:	6063      	str	r3, [r4, #4]
 80089c8:	6014      	str	r4, [r2, #0]
 80089ca:	b003      	add	sp, #12
 80089cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089d0:	f7ff bfe2 	b.w	8008998 <__malloc_unlock>
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	d908      	bls.n	80089ea <_free_r+0x46>
 80089d8:	6825      	ldr	r5, [r4, #0]
 80089da:	1961      	adds	r1, r4, r5
 80089dc:	428b      	cmp	r3, r1
 80089de:	bf01      	itttt	eq
 80089e0:	6819      	ldreq	r1, [r3, #0]
 80089e2:	685b      	ldreq	r3, [r3, #4]
 80089e4:	1949      	addeq	r1, r1, r5
 80089e6:	6021      	streq	r1, [r4, #0]
 80089e8:	e7ed      	b.n	80089c6 <_free_r+0x22>
 80089ea:	461a      	mov	r2, r3
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	b10b      	cbz	r3, 80089f4 <_free_r+0x50>
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	d9fa      	bls.n	80089ea <_free_r+0x46>
 80089f4:	6811      	ldr	r1, [r2, #0]
 80089f6:	1855      	adds	r5, r2, r1
 80089f8:	42a5      	cmp	r5, r4
 80089fa:	d10b      	bne.n	8008a14 <_free_r+0x70>
 80089fc:	6824      	ldr	r4, [r4, #0]
 80089fe:	4421      	add	r1, r4
 8008a00:	1854      	adds	r4, r2, r1
 8008a02:	42a3      	cmp	r3, r4
 8008a04:	6011      	str	r1, [r2, #0]
 8008a06:	d1e0      	bne.n	80089ca <_free_r+0x26>
 8008a08:	681c      	ldr	r4, [r3, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	6053      	str	r3, [r2, #4]
 8008a0e:	4421      	add	r1, r4
 8008a10:	6011      	str	r1, [r2, #0]
 8008a12:	e7da      	b.n	80089ca <_free_r+0x26>
 8008a14:	d902      	bls.n	8008a1c <_free_r+0x78>
 8008a16:	230c      	movs	r3, #12
 8008a18:	6003      	str	r3, [r0, #0]
 8008a1a:	e7d6      	b.n	80089ca <_free_r+0x26>
 8008a1c:	6825      	ldr	r5, [r4, #0]
 8008a1e:	1961      	adds	r1, r4, r5
 8008a20:	428b      	cmp	r3, r1
 8008a22:	bf04      	itt	eq
 8008a24:	6819      	ldreq	r1, [r3, #0]
 8008a26:	685b      	ldreq	r3, [r3, #4]
 8008a28:	6063      	str	r3, [r4, #4]
 8008a2a:	bf04      	itt	eq
 8008a2c:	1949      	addeq	r1, r1, r5
 8008a2e:	6021      	streq	r1, [r4, #0]
 8008a30:	6054      	str	r4, [r2, #4]
 8008a32:	e7ca      	b.n	80089ca <_free_r+0x26>
 8008a34:	b003      	add	sp, #12
 8008a36:	bd30      	pop	{r4, r5, pc}
 8008a38:	200053a0 	.word	0x200053a0

08008a3c <__ssputs_r>:
 8008a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a40:	688e      	ldr	r6, [r1, #8]
 8008a42:	429e      	cmp	r6, r3
 8008a44:	4682      	mov	sl, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	4690      	mov	r8, r2
 8008a4a:	461f      	mov	r7, r3
 8008a4c:	d838      	bhi.n	8008ac0 <__ssputs_r+0x84>
 8008a4e:	898a      	ldrh	r2, [r1, #12]
 8008a50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a54:	d032      	beq.n	8008abc <__ssputs_r+0x80>
 8008a56:	6825      	ldr	r5, [r4, #0]
 8008a58:	6909      	ldr	r1, [r1, #16]
 8008a5a:	eba5 0901 	sub.w	r9, r5, r1
 8008a5e:	6965      	ldr	r5, [r4, #20]
 8008a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a68:	3301      	adds	r3, #1
 8008a6a:	444b      	add	r3, r9
 8008a6c:	106d      	asrs	r5, r5, #1
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	bf38      	it	cc
 8008a72:	461d      	movcc	r5, r3
 8008a74:	0553      	lsls	r3, r2, #21
 8008a76:	d531      	bpl.n	8008adc <__ssputs_r+0xa0>
 8008a78:	4629      	mov	r1, r5
 8008a7a:	f7ff fe79 	bl	8008770 <_malloc_r>
 8008a7e:	4606      	mov	r6, r0
 8008a80:	b950      	cbnz	r0, 8008a98 <__ssputs_r+0x5c>
 8008a82:	230c      	movs	r3, #12
 8008a84:	f8ca 3000 	str.w	r3, [sl]
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8e:	81a3      	strh	r3, [r4, #12]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295
 8008a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a98:	6921      	ldr	r1, [r4, #16]
 8008a9a:	464a      	mov	r2, r9
 8008a9c:	f7ff fe32 	bl	8008704 <memcpy>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	6126      	str	r6, [r4, #16]
 8008aae:	6165      	str	r5, [r4, #20]
 8008ab0:	444e      	add	r6, r9
 8008ab2:	eba5 0509 	sub.w	r5, r5, r9
 8008ab6:	6026      	str	r6, [r4, #0]
 8008ab8:	60a5      	str	r5, [r4, #8]
 8008aba:	463e      	mov	r6, r7
 8008abc:	42be      	cmp	r6, r7
 8008abe:	d900      	bls.n	8008ac2 <__ssputs_r+0x86>
 8008ac0:	463e      	mov	r6, r7
 8008ac2:	6820      	ldr	r0, [r4, #0]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	f000 faa8 	bl	800901c <memmove>
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	1b9b      	subs	r3, r3, r6
 8008ad0:	60a3      	str	r3, [r4, #8]
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	4433      	add	r3, r6
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e7db      	b.n	8008a94 <__ssputs_r+0x58>
 8008adc:	462a      	mov	r2, r5
 8008ade:	f000 fab7 	bl	8009050 <_realloc_r>
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d1e1      	bne.n	8008aac <__ssputs_r+0x70>
 8008ae8:	6921      	ldr	r1, [r4, #16]
 8008aea:	4650      	mov	r0, sl
 8008aec:	f7ff ff5a 	bl	80089a4 <_free_r>
 8008af0:	e7c7      	b.n	8008a82 <__ssputs_r+0x46>
	...

08008af4 <_svfiprintf_r>:
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	4698      	mov	r8, r3
 8008afa:	898b      	ldrh	r3, [r1, #12]
 8008afc:	061b      	lsls	r3, r3, #24
 8008afe:	b09d      	sub	sp, #116	; 0x74
 8008b00:	4607      	mov	r7, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	4614      	mov	r4, r2
 8008b06:	d50e      	bpl.n	8008b26 <_svfiprintf_r+0x32>
 8008b08:	690b      	ldr	r3, [r1, #16]
 8008b0a:	b963      	cbnz	r3, 8008b26 <_svfiprintf_r+0x32>
 8008b0c:	2140      	movs	r1, #64	; 0x40
 8008b0e:	f7ff fe2f 	bl	8008770 <_malloc_r>
 8008b12:	6028      	str	r0, [r5, #0]
 8008b14:	6128      	str	r0, [r5, #16]
 8008b16:	b920      	cbnz	r0, 8008b22 <_svfiprintf_r+0x2e>
 8008b18:	230c      	movs	r3, #12
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b20:	e0d1      	b.n	8008cc6 <_svfiprintf_r+0x1d2>
 8008b22:	2340      	movs	r3, #64	; 0x40
 8008b24:	616b      	str	r3, [r5, #20]
 8008b26:	2300      	movs	r3, #0
 8008b28:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2a:	2320      	movs	r3, #32
 8008b2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b30:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b34:	2330      	movs	r3, #48	; 0x30
 8008b36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ce0 <_svfiprintf_r+0x1ec>
 8008b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b3e:	f04f 0901 	mov.w	r9, #1
 8008b42:	4623      	mov	r3, r4
 8008b44:	469a      	mov	sl, r3
 8008b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b4a:	b10a      	cbz	r2, 8008b50 <_svfiprintf_r+0x5c>
 8008b4c:	2a25      	cmp	r2, #37	; 0x25
 8008b4e:	d1f9      	bne.n	8008b44 <_svfiprintf_r+0x50>
 8008b50:	ebba 0b04 	subs.w	fp, sl, r4
 8008b54:	d00b      	beq.n	8008b6e <_svfiprintf_r+0x7a>
 8008b56:	465b      	mov	r3, fp
 8008b58:	4622      	mov	r2, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ff6d 	bl	8008a3c <__ssputs_r>
 8008b62:	3001      	adds	r0, #1
 8008b64:	f000 80aa 	beq.w	8008cbc <_svfiprintf_r+0x1c8>
 8008b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b6a:	445a      	add	r2, fp
 8008b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f000 80a2 	beq.w	8008cbc <_svfiprintf_r+0x1c8>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b82:	f10a 0a01 	add.w	sl, sl, #1
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	9307      	str	r3, [sp, #28]
 8008b8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b8e:	931a      	str	r3, [sp, #104]	; 0x68
 8008b90:	4654      	mov	r4, sl
 8008b92:	2205      	movs	r2, #5
 8008b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b98:	4851      	ldr	r0, [pc, #324]	; (8008ce0 <_svfiprintf_r+0x1ec>)
 8008b9a:	f7f7 fb29 	bl	80001f0 <memchr>
 8008b9e:	9a04      	ldr	r2, [sp, #16]
 8008ba0:	b9d8      	cbnz	r0, 8008bda <_svfiprintf_r+0xe6>
 8008ba2:	06d0      	lsls	r0, r2, #27
 8008ba4:	bf44      	itt	mi
 8008ba6:	2320      	movmi	r3, #32
 8008ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bac:	0711      	lsls	r1, r2, #28
 8008bae:	bf44      	itt	mi
 8008bb0:	232b      	movmi	r3, #43	; 0x2b
 8008bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8008bba:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbc:	d015      	beq.n	8008bea <_svfiprintf_r+0xf6>
 8008bbe:	9a07      	ldr	r2, [sp, #28]
 8008bc0:	4654      	mov	r4, sl
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	f04f 0c0a 	mov.w	ip, #10
 8008bc8:	4621      	mov	r1, r4
 8008bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bce:	3b30      	subs	r3, #48	; 0x30
 8008bd0:	2b09      	cmp	r3, #9
 8008bd2:	d94e      	bls.n	8008c72 <_svfiprintf_r+0x17e>
 8008bd4:	b1b0      	cbz	r0, 8008c04 <_svfiprintf_r+0x110>
 8008bd6:	9207      	str	r2, [sp, #28]
 8008bd8:	e014      	b.n	8008c04 <_svfiprintf_r+0x110>
 8008bda:	eba0 0308 	sub.w	r3, r0, r8
 8008bde:	fa09 f303 	lsl.w	r3, r9, r3
 8008be2:	4313      	orrs	r3, r2
 8008be4:	9304      	str	r3, [sp, #16]
 8008be6:	46a2      	mov	sl, r4
 8008be8:	e7d2      	b.n	8008b90 <_svfiprintf_r+0x9c>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	1d19      	adds	r1, r3, #4
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	9103      	str	r1, [sp, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	bfbb      	ittet	lt
 8008bf6:	425b      	neglt	r3, r3
 8008bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8008bfc:	9307      	strge	r3, [sp, #28]
 8008bfe:	9307      	strlt	r3, [sp, #28]
 8008c00:	bfb8      	it	lt
 8008c02:	9204      	strlt	r2, [sp, #16]
 8008c04:	7823      	ldrb	r3, [r4, #0]
 8008c06:	2b2e      	cmp	r3, #46	; 0x2e
 8008c08:	d10c      	bne.n	8008c24 <_svfiprintf_r+0x130>
 8008c0a:	7863      	ldrb	r3, [r4, #1]
 8008c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0e:	d135      	bne.n	8008c7c <_svfiprintf_r+0x188>
 8008c10:	9b03      	ldr	r3, [sp, #12]
 8008c12:	1d1a      	adds	r2, r3, #4
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	9203      	str	r2, [sp, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	bfb8      	it	lt
 8008c1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c20:	3402      	adds	r4, #2
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cf0 <_svfiprintf_r+0x1fc>
 8008c28:	7821      	ldrb	r1, [r4, #0]
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	f7f7 fadf 	bl	80001f0 <memchr>
 8008c32:	b140      	cbz	r0, 8008c46 <_svfiprintf_r+0x152>
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	eba0 000a 	sub.w	r0, r0, sl
 8008c3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008c3e:	9b04      	ldr	r3, [sp, #16]
 8008c40:	4303      	orrs	r3, r0
 8008c42:	3401      	adds	r4, #1
 8008c44:	9304      	str	r3, [sp, #16]
 8008c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c4a:	4826      	ldr	r0, [pc, #152]	; (8008ce4 <_svfiprintf_r+0x1f0>)
 8008c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c50:	2206      	movs	r2, #6
 8008c52:	f7f7 facd 	bl	80001f0 <memchr>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d038      	beq.n	8008ccc <_svfiprintf_r+0x1d8>
 8008c5a:	4b23      	ldr	r3, [pc, #140]	; (8008ce8 <_svfiprintf_r+0x1f4>)
 8008c5c:	bb1b      	cbnz	r3, 8008ca6 <_svfiprintf_r+0x1b2>
 8008c5e:	9b03      	ldr	r3, [sp, #12]
 8008c60:	3307      	adds	r3, #7
 8008c62:	f023 0307 	bic.w	r3, r3, #7
 8008c66:	3308      	adds	r3, #8
 8008c68:	9303      	str	r3, [sp, #12]
 8008c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6c:	4433      	add	r3, r6
 8008c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c70:	e767      	b.n	8008b42 <_svfiprintf_r+0x4e>
 8008c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c76:	460c      	mov	r4, r1
 8008c78:	2001      	movs	r0, #1
 8008c7a:	e7a5      	b.n	8008bc8 <_svfiprintf_r+0xd4>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	3401      	adds	r4, #1
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	4619      	mov	r1, r3
 8008c84:	f04f 0c0a 	mov.w	ip, #10
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8e:	3a30      	subs	r2, #48	; 0x30
 8008c90:	2a09      	cmp	r2, #9
 8008c92:	d903      	bls.n	8008c9c <_svfiprintf_r+0x1a8>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0c5      	beq.n	8008c24 <_svfiprintf_r+0x130>
 8008c98:	9105      	str	r1, [sp, #20]
 8008c9a:	e7c3      	b.n	8008c24 <_svfiprintf_r+0x130>
 8008c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e7f0      	b.n	8008c88 <_svfiprintf_r+0x194>
 8008ca6:	ab03      	add	r3, sp, #12
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	462a      	mov	r2, r5
 8008cac:	4b0f      	ldr	r3, [pc, #60]	; (8008cec <_svfiprintf_r+0x1f8>)
 8008cae:	a904      	add	r1, sp, #16
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f3af 8000 	nop.w
 8008cb6:	1c42      	adds	r2, r0, #1
 8008cb8:	4606      	mov	r6, r0
 8008cba:	d1d6      	bne.n	8008c6a <_svfiprintf_r+0x176>
 8008cbc:	89ab      	ldrh	r3, [r5, #12]
 8008cbe:	065b      	lsls	r3, r3, #25
 8008cc0:	f53f af2c 	bmi.w	8008b1c <_svfiprintf_r+0x28>
 8008cc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc6:	b01d      	add	sp, #116	; 0x74
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <_svfiprintf_r+0x1f8>)
 8008cd4:	a904      	add	r1, sp, #16
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f000 f87a 	bl	8008dd0 <_printf_i>
 8008cdc:	e7eb      	b.n	8008cb6 <_svfiprintf_r+0x1c2>
 8008cde:	bf00      	nop
 8008ce0:	0800a02c 	.word	0x0800a02c
 8008ce4:	0800a036 	.word	0x0800a036
 8008ce8:	00000000 	.word	0x00000000
 8008cec:	08008a3d 	.word	0x08008a3d
 8008cf0:	0800a032 	.word	0x0800a032

08008cf4 <_printf_common>:
 8008cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	4699      	mov	r9, r3
 8008cfc:	688a      	ldr	r2, [r1, #8]
 8008cfe:	690b      	ldr	r3, [r1, #16]
 8008d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d04:	4293      	cmp	r3, r2
 8008d06:	bfb8      	it	lt
 8008d08:	4613      	movlt	r3, r2
 8008d0a:	6033      	str	r3, [r6, #0]
 8008d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d10:	4607      	mov	r7, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	b10a      	cbz	r2, 8008d1a <_printf_common+0x26>
 8008d16:	3301      	adds	r3, #1
 8008d18:	6033      	str	r3, [r6, #0]
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	0699      	lsls	r1, r3, #26
 8008d1e:	bf42      	ittt	mi
 8008d20:	6833      	ldrmi	r3, [r6, #0]
 8008d22:	3302      	addmi	r3, #2
 8008d24:	6033      	strmi	r3, [r6, #0]
 8008d26:	6825      	ldr	r5, [r4, #0]
 8008d28:	f015 0506 	ands.w	r5, r5, #6
 8008d2c:	d106      	bne.n	8008d3c <_printf_common+0x48>
 8008d2e:	f104 0a19 	add.w	sl, r4, #25
 8008d32:	68e3      	ldr	r3, [r4, #12]
 8008d34:	6832      	ldr	r2, [r6, #0]
 8008d36:	1a9b      	subs	r3, r3, r2
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dc26      	bgt.n	8008d8a <_printf_common+0x96>
 8008d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d40:	1e13      	subs	r3, r2, #0
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	bf18      	it	ne
 8008d46:	2301      	movne	r3, #1
 8008d48:	0692      	lsls	r2, r2, #26
 8008d4a:	d42b      	bmi.n	8008da4 <_printf_common+0xb0>
 8008d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d50:	4649      	mov	r1, r9
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d01e      	beq.n	8008d98 <_printf_common+0xa4>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	68e5      	ldr	r5, [r4, #12]
 8008d5e:	6832      	ldr	r2, [r6, #0]
 8008d60:	f003 0306 	and.w	r3, r3, #6
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	bf08      	it	eq
 8008d68:	1aad      	subeq	r5, r5, r2
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	6922      	ldr	r2, [r4, #16]
 8008d6e:	bf0c      	ite	eq
 8008d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d74:	2500      	movne	r5, #0
 8008d76:	4293      	cmp	r3, r2
 8008d78:	bfc4      	itt	gt
 8008d7a:	1a9b      	subgt	r3, r3, r2
 8008d7c:	18ed      	addgt	r5, r5, r3
 8008d7e:	2600      	movs	r6, #0
 8008d80:	341a      	adds	r4, #26
 8008d82:	42b5      	cmp	r5, r6
 8008d84:	d11a      	bne.n	8008dbc <_printf_common+0xc8>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e008      	b.n	8008d9c <_printf_common+0xa8>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4652      	mov	r2, sl
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4638      	mov	r0, r7
 8008d92:	47c0      	blx	r8
 8008d94:	3001      	adds	r0, #1
 8008d96:	d103      	bne.n	8008da0 <_printf_common+0xac>
 8008d98:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008da0:	3501      	adds	r5, #1
 8008da2:	e7c6      	b.n	8008d32 <_printf_common+0x3e>
 8008da4:	18e1      	adds	r1, r4, r3
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	2030      	movs	r0, #48	; 0x30
 8008daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dae:	4422      	add	r2, r4
 8008db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db8:	3302      	adds	r3, #2
 8008dba:	e7c7      	b.n	8008d4c <_printf_common+0x58>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4638      	mov	r0, r7
 8008dc4:	47c0      	blx	r8
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d0e6      	beq.n	8008d98 <_printf_common+0xa4>
 8008dca:	3601      	adds	r6, #1
 8008dcc:	e7d9      	b.n	8008d82 <_printf_common+0x8e>
	...

08008dd0 <_printf_i>:
 8008dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	7e0f      	ldrb	r7, [r1, #24]
 8008dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd8:	2f78      	cmp	r7, #120	; 0x78
 8008dda:	4691      	mov	r9, r2
 8008ddc:	4680      	mov	r8, r0
 8008dde:	460c      	mov	r4, r1
 8008de0:	469a      	mov	sl, r3
 8008de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de6:	d807      	bhi.n	8008df8 <_printf_i+0x28>
 8008de8:	2f62      	cmp	r7, #98	; 0x62
 8008dea:	d80a      	bhi.n	8008e02 <_printf_i+0x32>
 8008dec:	2f00      	cmp	r7, #0
 8008dee:	f000 80d8 	beq.w	8008fa2 <_printf_i+0x1d2>
 8008df2:	2f58      	cmp	r7, #88	; 0x58
 8008df4:	f000 80a3 	beq.w	8008f3e <_printf_i+0x16e>
 8008df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e00:	e03a      	b.n	8008e78 <_printf_i+0xa8>
 8008e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e06:	2b15      	cmp	r3, #21
 8008e08:	d8f6      	bhi.n	8008df8 <_printf_i+0x28>
 8008e0a:	a101      	add	r1, pc, #4	; (adr r1, 8008e10 <_printf_i+0x40>)
 8008e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	08008e7d 	.word	0x08008e7d
 8008e18:	08008df9 	.word	0x08008df9
 8008e1c:	08008df9 	.word	0x08008df9
 8008e20:	08008df9 	.word	0x08008df9
 8008e24:	08008df9 	.word	0x08008df9
 8008e28:	08008e7d 	.word	0x08008e7d
 8008e2c:	08008df9 	.word	0x08008df9
 8008e30:	08008df9 	.word	0x08008df9
 8008e34:	08008df9 	.word	0x08008df9
 8008e38:	08008df9 	.word	0x08008df9
 8008e3c:	08008f89 	.word	0x08008f89
 8008e40:	08008ead 	.word	0x08008ead
 8008e44:	08008f6b 	.word	0x08008f6b
 8008e48:	08008df9 	.word	0x08008df9
 8008e4c:	08008df9 	.word	0x08008df9
 8008e50:	08008fab 	.word	0x08008fab
 8008e54:	08008df9 	.word	0x08008df9
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08008df9 	.word	0x08008df9
 8008e60:	08008df9 	.word	0x08008df9
 8008e64:	08008f73 	.word	0x08008f73
 8008e68:	682b      	ldr	r3, [r5, #0]
 8008e6a:	1d1a      	adds	r2, r3, #4
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	602a      	str	r2, [r5, #0]
 8008e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e0a3      	b.n	8008fc4 <_printf_i+0x1f4>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	6829      	ldr	r1, [r5, #0]
 8008e80:	0606      	lsls	r6, r0, #24
 8008e82:	f101 0304 	add.w	r3, r1, #4
 8008e86:	d50a      	bpl.n	8008e9e <_printf_i+0xce>
 8008e88:	680e      	ldr	r6, [r1, #0]
 8008e8a:	602b      	str	r3, [r5, #0]
 8008e8c:	2e00      	cmp	r6, #0
 8008e8e:	da03      	bge.n	8008e98 <_printf_i+0xc8>
 8008e90:	232d      	movs	r3, #45	; 0x2d
 8008e92:	4276      	negs	r6, r6
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	485e      	ldr	r0, [pc, #376]	; (8009014 <_printf_i+0x244>)
 8008e9a:	230a      	movs	r3, #10
 8008e9c:	e019      	b.n	8008ed2 <_printf_i+0x102>
 8008e9e:	680e      	ldr	r6, [r1, #0]
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ea6:	bf18      	it	ne
 8008ea8:	b236      	sxthne	r6, r6
 8008eaa:	e7ef      	b.n	8008e8c <_printf_i+0xbc>
 8008eac:	682b      	ldr	r3, [r5, #0]
 8008eae:	6820      	ldr	r0, [r4, #0]
 8008eb0:	1d19      	adds	r1, r3, #4
 8008eb2:	6029      	str	r1, [r5, #0]
 8008eb4:	0601      	lsls	r1, r0, #24
 8008eb6:	d501      	bpl.n	8008ebc <_printf_i+0xec>
 8008eb8:	681e      	ldr	r6, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <_printf_i+0xf2>
 8008ebc:	0646      	lsls	r6, r0, #25
 8008ebe:	d5fb      	bpl.n	8008eb8 <_printf_i+0xe8>
 8008ec0:	881e      	ldrh	r6, [r3, #0]
 8008ec2:	4854      	ldr	r0, [pc, #336]	; (8009014 <_printf_i+0x244>)
 8008ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec6:	bf0c      	ite	eq
 8008ec8:	2308      	moveq	r3, #8
 8008eca:	230a      	movne	r3, #10
 8008ecc:	2100      	movs	r1, #0
 8008ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ed2:	6865      	ldr	r5, [r4, #4]
 8008ed4:	60a5      	str	r5, [r4, #8]
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	bfa2      	ittt	ge
 8008eda:	6821      	ldrge	r1, [r4, #0]
 8008edc:	f021 0104 	bicge.w	r1, r1, #4
 8008ee0:	6021      	strge	r1, [r4, #0]
 8008ee2:	b90e      	cbnz	r6, 8008ee8 <_printf_i+0x118>
 8008ee4:	2d00      	cmp	r5, #0
 8008ee6:	d04d      	beq.n	8008f84 <_printf_i+0x1b4>
 8008ee8:	4615      	mov	r5, r2
 8008eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eee:	fb03 6711 	mls	r7, r3, r1, r6
 8008ef2:	5dc7      	ldrb	r7, [r0, r7]
 8008ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef8:	4637      	mov	r7, r6
 8008efa:	42bb      	cmp	r3, r7
 8008efc:	460e      	mov	r6, r1
 8008efe:	d9f4      	bls.n	8008eea <_printf_i+0x11a>
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	d10b      	bne.n	8008f1c <_printf_i+0x14c>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	07de      	lsls	r6, r3, #31
 8008f08:	d508      	bpl.n	8008f1c <_printf_i+0x14c>
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	6861      	ldr	r1, [r4, #4]
 8008f0e:	4299      	cmp	r1, r3
 8008f10:	bfde      	ittt	le
 8008f12:	2330      	movle	r3, #48	; 0x30
 8008f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f1c:	1b52      	subs	r2, r2, r5
 8008f1e:	6122      	str	r2, [r4, #16]
 8008f20:	f8cd a000 	str.w	sl, [sp]
 8008f24:	464b      	mov	r3, r9
 8008f26:	aa03      	add	r2, sp, #12
 8008f28:	4621      	mov	r1, r4
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	f7ff fee2 	bl	8008cf4 <_printf_common>
 8008f30:	3001      	adds	r0, #1
 8008f32:	d14c      	bne.n	8008fce <_printf_i+0x1fe>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	b004      	add	sp, #16
 8008f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3e:	4835      	ldr	r0, [pc, #212]	; (8009014 <_printf_i+0x244>)
 8008f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f44:	6829      	ldr	r1, [r5, #0]
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f4c:	6029      	str	r1, [r5, #0]
 8008f4e:	061d      	lsls	r5, r3, #24
 8008f50:	d514      	bpl.n	8008f7c <_printf_i+0x1ac>
 8008f52:	07df      	lsls	r7, r3, #31
 8008f54:	bf44      	itt	mi
 8008f56:	f043 0320 	orrmi.w	r3, r3, #32
 8008f5a:	6023      	strmi	r3, [r4, #0]
 8008f5c:	b91e      	cbnz	r6, 8008f66 <_printf_i+0x196>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	f023 0320 	bic.w	r3, r3, #32
 8008f64:	6023      	str	r3, [r4, #0]
 8008f66:	2310      	movs	r3, #16
 8008f68:	e7b0      	b.n	8008ecc <_printf_i+0xfc>
 8008f6a:	6823      	ldr	r3, [r4, #0]
 8008f6c:	f043 0320 	orr.w	r3, r3, #32
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	2378      	movs	r3, #120	; 0x78
 8008f74:	4828      	ldr	r0, [pc, #160]	; (8009018 <_printf_i+0x248>)
 8008f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f7a:	e7e3      	b.n	8008f44 <_printf_i+0x174>
 8008f7c:	0659      	lsls	r1, r3, #25
 8008f7e:	bf48      	it	mi
 8008f80:	b2b6      	uxthmi	r6, r6
 8008f82:	e7e6      	b.n	8008f52 <_printf_i+0x182>
 8008f84:	4615      	mov	r5, r2
 8008f86:	e7bb      	b.n	8008f00 <_printf_i+0x130>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	6826      	ldr	r6, [r4, #0]
 8008f8c:	6961      	ldr	r1, [r4, #20]
 8008f8e:	1d18      	adds	r0, r3, #4
 8008f90:	6028      	str	r0, [r5, #0]
 8008f92:	0635      	lsls	r5, r6, #24
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	d501      	bpl.n	8008f9c <_printf_i+0x1cc>
 8008f98:	6019      	str	r1, [r3, #0]
 8008f9a:	e002      	b.n	8008fa2 <_printf_i+0x1d2>
 8008f9c:	0670      	lsls	r0, r6, #25
 8008f9e:	d5fb      	bpl.n	8008f98 <_printf_i+0x1c8>
 8008fa0:	8019      	strh	r1, [r3, #0]
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6123      	str	r3, [r4, #16]
 8008fa6:	4615      	mov	r5, r2
 8008fa8:	e7ba      	b.n	8008f20 <_printf_i+0x150>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	1d1a      	adds	r2, r3, #4
 8008fae:	602a      	str	r2, [r5, #0]
 8008fb0:	681d      	ldr	r5, [r3, #0]
 8008fb2:	6862      	ldr	r2, [r4, #4]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f7f7 f91a 	bl	80001f0 <memchr>
 8008fbc:	b108      	cbz	r0, 8008fc2 <_printf_i+0x1f2>
 8008fbe:	1b40      	subs	r0, r0, r5
 8008fc0:	6060      	str	r0, [r4, #4]
 8008fc2:	6863      	ldr	r3, [r4, #4]
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fcc:	e7a8      	b.n	8008f20 <_printf_i+0x150>
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	462a      	mov	r2, r5
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	47d0      	blx	sl
 8008fd8:	3001      	adds	r0, #1
 8008fda:	d0ab      	beq.n	8008f34 <_printf_i+0x164>
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	079b      	lsls	r3, r3, #30
 8008fe0:	d413      	bmi.n	800900a <_printf_i+0x23a>
 8008fe2:	68e0      	ldr	r0, [r4, #12]
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	4298      	cmp	r0, r3
 8008fe8:	bfb8      	it	lt
 8008fea:	4618      	movlt	r0, r3
 8008fec:	e7a4      	b.n	8008f38 <_printf_i+0x168>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4632      	mov	r2, r6
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	47d0      	blx	sl
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d09b      	beq.n	8008f34 <_printf_i+0x164>
 8008ffc:	3501      	adds	r5, #1
 8008ffe:	68e3      	ldr	r3, [r4, #12]
 8009000:	9903      	ldr	r1, [sp, #12]
 8009002:	1a5b      	subs	r3, r3, r1
 8009004:	42ab      	cmp	r3, r5
 8009006:	dcf2      	bgt.n	8008fee <_printf_i+0x21e>
 8009008:	e7eb      	b.n	8008fe2 <_printf_i+0x212>
 800900a:	2500      	movs	r5, #0
 800900c:	f104 0619 	add.w	r6, r4, #25
 8009010:	e7f5      	b.n	8008ffe <_printf_i+0x22e>
 8009012:	bf00      	nop
 8009014:	0800a03d 	.word	0x0800a03d
 8009018:	0800a04e 	.word	0x0800a04e

0800901c <memmove>:
 800901c:	4288      	cmp	r0, r1
 800901e:	b510      	push	{r4, lr}
 8009020:	eb01 0402 	add.w	r4, r1, r2
 8009024:	d902      	bls.n	800902c <memmove+0x10>
 8009026:	4284      	cmp	r4, r0
 8009028:	4623      	mov	r3, r4
 800902a:	d807      	bhi.n	800903c <memmove+0x20>
 800902c:	1e43      	subs	r3, r0, #1
 800902e:	42a1      	cmp	r1, r4
 8009030:	d008      	beq.n	8009044 <memmove+0x28>
 8009032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800903a:	e7f8      	b.n	800902e <memmove+0x12>
 800903c:	4402      	add	r2, r0
 800903e:	4601      	mov	r1, r0
 8009040:	428a      	cmp	r2, r1
 8009042:	d100      	bne.n	8009046 <memmove+0x2a>
 8009044:	bd10      	pop	{r4, pc}
 8009046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800904a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800904e:	e7f7      	b.n	8009040 <memmove+0x24>

08009050 <_realloc_r>:
 8009050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009054:	4680      	mov	r8, r0
 8009056:	4614      	mov	r4, r2
 8009058:	460e      	mov	r6, r1
 800905a:	b921      	cbnz	r1, 8009066 <_realloc_r+0x16>
 800905c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	4611      	mov	r1, r2
 8009062:	f7ff bb85 	b.w	8008770 <_malloc_r>
 8009066:	b92a      	cbnz	r2, 8009074 <_realloc_r+0x24>
 8009068:	f7ff fc9c 	bl	80089a4 <_free_r>
 800906c:	4625      	mov	r5, r4
 800906e:	4628      	mov	r0, r5
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009074:	f000 f81b 	bl	80090ae <_malloc_usable_size_r>
 8009078:	4284      	cmp	r4, r0
 800907a:	4607      	mov	r7, r0
 800907c:	d802      	bhi.n	8009084 <_realloc_r+0x34>
 800907e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009082:	d812      	bhi.n	80090aa <_realloc_r+0x5a>
 8009084:	4621      	mov	r1, r4
 8009086:	4640      	mov	r0, r8
 8009088:	f7ff fb72 	bl	8008770 <_malloc_r>
 800908c:	4605      	mov	r5, r0
 800908e:	2800      	cmp	r0, #0
 8009090:	d0ed      	beq.n	800906e <_realloc_r+0x1e>
 8009092:	42bc      	cmp	r4, r7
 8009094:	4622      	mov	r2, r4
 8009096:	4631      	mov	r1, r6
 8009098:	bf28      	it	cs
 800909a:	463a      	movcs	r2, r7
 800909c:	f7ff fb32 	bl	8008704 <memcpy>
 80090a0:	4631      	mov	r1, r6
 80090a2:	4640      	mov	r0, r8
 80090a4:	f7ff fc7e 	bl	80089a4 <_free_r>
 80090a8:	e7e1      	b.n	800906e <_realloc_r+0x1e>
 80090aa:	4635      	mov	r5, r6
 80090ac:	e7df      	b.n	800906e <_realloc_r+0x1e>

080090ae <_malloc_usable_size_r>:
 80090ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b2:	1f18      	subs	r0, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfbc      	itt	lt
 80090b8:	580b      	ldrlt	r3, [r1, r0]
 80090ba:	18c0      	addlt	r0, r0, r3
 80090bc:	4770      	bx	lr
	...

080090c0 <pow>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	ed2d 8b02 	vpush	{d8}
 80090c6:	eeb0 8a40 	vmov.f32	s16, s0
 80090ca:	eef0 8a60 	vmov.f32	s17, s1
 80090ce:	ec55 4b11 	vmov	r4, r5, d1
 80090d2:	f000 f865 	bl	80091a0 <__ieee754_pow>
 80090d6:	4622      	mov	r2, r4
 80090d8:	462b      	mov	r3, r5
 80090da:	4620      	mov	r0, r4
 80090dc:	4629      	mov	r1, r5
 80090de:	ec57 6b10 	vmov	r6, r7, d0
 80090e2:	f7f7 fd2b 	bl	8000b3c <__aeabi_dcmpun>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d13b      	bne.n	8009162 <pow+0xa2>
 80090ea:	ec51 0b18 	vmov	r0, r1, d8
 80090ee:	2200      	movs	r2, #0
 80090f0:	2300      	movs	r3, #0
 80090f2:	f7f7 fcf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80090f6:	b1b8      	cbz	r0, 8009128 <pow+0x68>
 80090f8:	2200      	movs	r2, #0
 80090fa:	2300      	movs	r3, #0
 80090fc:	4620      	mov	r0, r4
 80090fe:	4629      	mov	r1, r5
 8009100:	f7f7 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8009104:	2800      	cmp	r0, #0
 8009106:	d146      	bne.n	8009196 <pow+0xd6>
 8009108:	ec45 4b10 	vmov	d0, r4, r5
 800910c:	f000 fe61 	bl	8009dd2 <finite>
 8009110:	b338      	cbz	r0, 8009162 <pow+0xa2>
 8009112:	2200      	movs	r2, #0
 8009114:	2300      	movs	r3, #0
 8009116:	4620      	mov	r0, r4
 8009118:	4629      	mov	r1, r5
 800911a:	f7f7 fce7 	bl	8000aec <__aeabi_dcmplt>
 800911e:	b300      	cbz	r0, 8009162 <pow+0xa2>
 8009120:	f7ff fac4 	bl	80086ac <__errno>
 8009124:	2322      	movs	r3, #34	; 0x22
 8009126:	e01b      	b.n	8009160 <pow+0xa0>
 8009128:	ec47 6b10 	vmov	d0, r6, r7
 800912c:	f000 fe51 	bl	8009dd2 <finite>
 8009130:	b9e0      	cbnz	r0, 800916c <pow+0xac>
 8009132:	eeb0 0a48 	vmov.f32	s0, s16
 8009136:	eef0 0a68 	vmov.f32	s1, s17
 800913a:	f000 fe4a 	bl	8009dd2 <finite>
 800913e:	b1a8      	cbz	r0, 800916c <pow+0xac>
 8009140:	ec45 4b10 	vmov	d0, r4, r5
 8009144:	f000 fe45 	bl	8009dd2 <finite>
 8009148:	b180      	cbz	r0, 800916c <pow+0xac>
 800914a:	4632      	mov	r2, r6
 800914c:	463b      	mov	r3, r7
 800914e:	4630      	mov	r0, r6
 8009150:	4639      	mov	r1, r7
 8009152:	f7f7 fcf3 	bl	8000b3c <__aeabi_dcmpun>
 8009156:	2800      	cmp	r0, #0
 8009158:	d0e2      	beq.n	8009120 <pow+0x60>
 800915a:	f7ff faa7 	bl	80086ac <__errno>
 800915e:	2321      	movs	r3, #33	; 0x21
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	ecbd 8b02 	vpop	{d8}
 8009166:	ec47 6b10 	vmov	d0, r6, r7
 800916a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800916c:	2200      	movs	r2, #0
 800916e:	2300      	movs	r3, #0
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009178:	2800      	cmp	r0, #0
 800917a:	d0f2      	beq.n	8009162 <pow+0xa2>
 800917c:	eeb0 0a48 	vmov.f32	s0, s16
 8009180:	eef0 0a68 	vmov.f32	s1, s17
 8009184:	f000 fe25 	bl	8009dd2 <finite>
 8009188:	2800      	cmp	r0, #0
 800918a:	d0ea      	beq.n	8009162 <pow+0xa2>
 800918c:	ec45 4b10 	vmov	d0, r4, r5
 8009190:	f000 fe1f 	bl	8009dd2 <finite>
 8009194:	e7c3      	b.n	800911e <pow+0x5e>
 8009196:	4f01      	ldr	r7, [pc, #4]	; (800919c <pow+0xdc>)
 8009198:	2600      	movs	r6, #0
 800919a:	e7e2      	b.n	8009162 <pow+0xa2>
 800919c:	3ff00000 	.word	0x3ff00000

080091a0 <__ieee754_pow>:
 80091a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a4:	ed2d 8b06 	vpush	{d8-d10}
 80091a8:	b089      	sub	sp, #36	; 0x24
 80091aa:	ed8d 1b00 	vstr	d1, [sp]
 80091ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80091b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80091b6:	ea58 0102 	orrs.w	r1, r8, r2
 80091ba:	ec57 6b10 	vmov	r6, r7, d0
 80091be:	d115      	bne.n	80091ec <__ieee754_pow+0x4c>
 80091c0:	19b3      	adds	r3, r6, r6
 80091c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80091c6:	4152      	adcs	r2, r2
 80091c8:	4299      	cmp	r1, r3
 80091ca:	4b89      	ldr	r3, [pc, #548]	; (80093f0 <__ieee754_pow+0x250>)
 80091cc:	4193      	sbcs	r3, r2
 80091ce:	f080 84d2 	bcs.w	8009b76 <__ieee754_pow+0x9d6>
 80091d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091d6:	4630      	mov	r0, r6
 80091d8:	4639      	mov	r1, r7
 80091da:	f7f7 f85f 	bl	800029c <__adddf3>
 80091de:	ec41 0b10 	vmov	d0, r0, r1
 80091e2:	b009      	add	sp, #36	; 0x24
 80091e4:	ecbd 8b06 	vpop	{d8-d10}
 80091e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ec:	4b81      	ldr	r3, [pc, #516]	; (80093f4 <__ieee754_pow+0x254>)
 80091ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80091f2:	429c      	cmp	r4, r3
 80091f4:	ee10 aa10 	vmov	sl, s0
 80091f8:	463d      	mov	r5, r7
 80091fa:	dc06      	bgt.n	800920a <__ieee754_pow+0x6a>
 80091fc:	d101      	bne.n	8009202 <__ieee754_pow+0x62>
 80091fe:	2e00      	cmp	r6, #0
 8009200:	d1e7      	bne.n	80091d2 <__ieee754_pow+0x32>
 8009202:	4598      	cmp	r8, r3
 8009204:	dc01      	bgt.n	800920a <__ieee754_pow+0x6a>
 8009206:	d10f      	bne.n	8009228 <__ieee754_pow+0x88>
 8009208:	b172      	cbz	r2, 8009228 <__ieee754_pow+0x88>
 800920a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800920e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009212:	ea55 050a 	orrs.w	r5, r5, sl
 8009216:	d1dc      	bne.n	80091d2 <__ieee754_pow+0x32>
 8009218:	e9dd 3200 	ldrd	r3, r2, [sp]
 800921c:	18db      	adds	r3, r3, r3
 800921e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009222:	4152      	adcs	r2, r2
 8009224:	429d      	cmp	r5, r3
 8009226:	e7d0      	b.n	80091ca <__ieee754_pow+0x2a>
 8009228:	2d00      	cmp	r5, #0
 800922a:	da3b      	bge.n	80092a4 <__ieee754_pow+0x104>
 800922c:	4b72      	ldr	r3, [pc, #456]	; (80093f8 <__ieee754_pow+0x258>)
 800922e:	4598      	cmp	r8, r3
 8009230:	dc51      	bgt.n	80092d6 <__ieee754_pow+0x136>
 8009232:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009236:	4598      	cmp	r8, r3
 8009238:	f340 84ac 	ble.w	8009b94 <__ieee754_pow+0x9f4>
 800923c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009240:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009244:	2b14      	cmp	r3, #20
 8009246:	dd0f      	ble.n	8009268 <__ieee754_pow+0xc8>
 8009248:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800924c:	fa22 f103 	lsr.w	r1, r2, r3
 8009250:	fa01 f303 	lsl.w	r3, r1, r3
 8009254:	4293      	cmp	r3, r2
 8009256:	f040 849d 	bne.w	8009b94 <__ieee754_pow+0x9f4>
 800925a:	f001 0101 	and.w	r1, r1, #1
 800925e:	f1c1 0302 	rsb	r3, r1, #2
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	b182      	cbz	r2, 8009288 <__ieee754_pow+0xe8>
 8009266:	e05f      	b.n	8009328 <__ieee754_pow+0x188>
 8009268:	2a00      	cmp	r2, #0
 800926a:	d15b      	bne.n	8009324 <__ieee754_pow+0x184>
 800926c:	f1c3 0314 	rsb	r3, r3, #20
 8009270:	fa48 f103 	asr.w	r1, r8, r3
 8009274:	fa01 f303 	lsl.w	r3, r1, r3
 8009278:	4543      	cmp	r3, r8
 800927a:	f040 8488 	bne.w	8009b8e <__ieee754_pow+0x9ee>
 800927e:	f001 0101 	and.w	r1, r1, #1
 8009282:	f1c1 0302 	rsb	r3, r1, #2
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	4b5c      	ldr	r3, [pc, #368]	; (80093fc <__ieee754_pow+0x25c>)
 800928a:	4598      	cmp	r8, r3
 800928c:	d132      	bne.n	80092f4 <__ieee754_pow+0x154>
 800928e:	f1b9 0f00 	cmp.w	r9, #0
 8009292:	f280 8478 	bge.w	8009b86 <__ieee754_pow+0x9e6>
 8009296:	4959      	ldr	r1, [pc, #356]	; (80093fc <__ieee754_pow+0x25c>)
 8009298:	4632      	mov	r2, r6
 800929a:	463b      	mov	r3, r7
 800929c:	2000      	movs	r0, #0
 800929e:	f7f7 fadd 	bl	800085c <__aeabi_ddiv>
 80092a2:	e79c      	b.n	80091de <__ieee754_pow+0x3e>
 80092a4:	2300      	movs	r3, #0
 80092a6:	9304      	str	r3, [sp, #16]
 80092a8:	2a00      	cmp	r2, #0
 80092aa:	d13d      	bne.n	8009328 <__ieee754_pow+0x188>
 80092ac:	4b51      	ldr	r3, [pc, #324]	; (80093f4 <__ieee754_pow+0x254>)
 80092ae:	4598      	cmp	r8, r3
 80092b0:	d1ea      	bne.n	8009288 <__ieee754_pow+0xe8>
 80092b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80092b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80092ba:	ea53 030a 	orrs.w	r3, r3, sl
 80092be:	f000 845a 	beq.w	8009b76 <__ieee754_pow+0x9d6>
 80092c2:	4b4f      	ldr	r3, [pc, #316]	; (8009400 <__ieee754_pow+0x260>)
 80092c4:	429c      	cmp	r4, r3
 80092c6:	dd08      	ble.n	80092da <__ieee754_pow+0x13a>
 80092c8:	f1b9 0f00 	cmp.w	r9, #0
 80092cc:	f2c0 8457 	blt.w	8009b7e <__ieee754_pow+0x9de>
 80092d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092d4:	e783      	b.n	80091de <__ieee754_pow+0x3e>
 80092d6:	2302      	movs	r3, #2
 80092d8:	e7e5      	b.n	80092a6 <__ieee754_pow+0x106>
 80092da:	f1b9 0f00 	cmp.w	r9, #0
 80092de:	f04f 0000 	mov.w	r0, #0
 80092e2:	f04f 0100 	mov.w	r1, #0
 80092e6:	f6bf af7a 	bge.w	80091de <__ieee754_pow+0x3e>
 80092ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80092ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80092f2:	e774      	b.n	80091de <__ieee754_pow+0x3e>
 80092f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80092f8:	d106      	bne.n	8009308 <__ieee754_pow+0x168>
 80092fa:	4632      	mov	r2, r6
 80092fc:	463b      	mov	r3, r7
 80092fe:	4630      	mov	r0, r6
 8009300:	4639      	mov	r1, r7
 8009302:	f7f7 f981 	bl	8000608 <__aeabi_dmul>
 8009306:	e76a      	b.n	80091de <__ieee754_pow+0x3e>
 8009308:	4b3e      	ldr	r3, [pc, #248]	; (8009404 <__ieee754_pow+0x264>)
 800930a:	4599      	cmp	r9, r3
 800930c:	d10c      	bne.n	8009328 <__ieee754_pow+0x188>
 800930e:	2d00      	cmp	r5, #0
 8009310:	db0a      	blt.n	8009328 <__ieee754_pow+0x188>
 8009312:	ec47 6b10 	vmov	d0, r6, r7
 8009316:	b009      	add	sp, #36	; 0x24
 8009318:	ecbd 8b06 	vpop	{d8-d10}
 800931c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	f000 bc6c 	b.w	8009bfc <__ieee754_sqrt>
 8009324:	2300      	movs	r3, #0
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	ec47 6b10 	vmov	d0, r6, r7
 800932c:	f000 fd48 	bl	8009dc0 <fabs>
 8009330:	ec51 0b10 	vmov	r0, r1, d0
 8009334:	f1ba 0f00 	cmp.w	sl, #0
 8009338:	d129      	bne.n	800938e <__ieee754_pow+0x1ee>
 800933a:	b124      	cbz	r4, 8009346 <__ieee754_pow+0x1a6>
 800933c:	4b2f      	ldr	r3, [pc, #188]	; (80093fc <__ieee754_pow+0x25c>)
 800933e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009342:	429a      	cmp	r2, r3
 8009344:	d123      	bne.n	800938e <__ieee754_pow+0x1ee>
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	da05      	bge.n	8009358 <__ieee754_pow+0x1b8>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	2000      	movs	r0, #0
 8009352:	492a      	ldr	r1, [pc, #168]	; (80093fc <__ieee754_pow+0x25c>)
 8009354:	f7f7 fa82 	bl	800085c <__aeabi_ddiv>
 8009358:	2d00      	cmp	r5, #0
 800935a:	f6bf af40 	bge.w	80091de <__ieee754_pow+0x3e>
 800935e:	9b04      	ldr	r3, [sp, #16]
 8009360:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009364:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009368:	4323      	orrs	r3, r4
 800936a:	d108      	bne.n	800937e <__ieee754_pow+0x1de>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4610      	mov	r0, r2
 8009372:	4619      	mov	r1, r3
 8009374:	f7f6 ff90 	bl	8000298 <__aeabi_dsub>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	e78f      	b.n	800929e <__ieee754_pow+0xfe>
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	2b01      	cmp	r3, #1
 8009382:	f47f af2c 	bne.w	80091de <__ieee754_pow+0x3e>
 8009386:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800938a:	4619      	mov	r1, r3
 800938c:	e727      	b.n	80091de <__ieee754_pow+0x3e>
 800938e:	0feb      	lsrs	r3, r5, #31
 8009390:	3b01      	subs	r3, #1
 8009392:	9306      	str	r3, [sp, #24]
 8009394:	9a06      	ldr	r2, [sp, #24]
 8009396:	9b04      	ldr	r3, [sp, #16]
 8009398:	4313      	orrs	r3, r2
 800939a:	d102      	bne.n	80093a2 <__ieee754_pow+0x202>
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	e7e6      	b.n	8009370 <__ieee754_pow+0x1d0>
 80093a2:	4b19      	ldr	r3, [pc, #100]	; (8009408 <__ieee754_pow+0x268>)
 80093a4:	4598      	cmp	r8, r3
 80093a6:	f340 80fb 	ble.w	80095a0 <__ieee754_pow+0x400>
 80093aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80093ae:	4598      	cmp	r8, r3
 80093b0:	4b13      	ldr	r3, [pc, #76]	; (8009400 <__ieee754_pow+0x260>)
 80093b2:	dd0c      	ble.n	80093ce <__ieee754_pow+0x22e>
 80093b4:	429c      	cmp	r4, r3
 80093b6:	dc0f      	bgt.n	80093d8 <__ieee754_pow+0x238>
 80093b8:	f1b9 0f00 	cmp.w	r9, #0
 80093bc:	da0f      	bge.n	80093de <__ieee754_pow+0x23e>
 80093be:	2000      	movs	r0, #0
 80093c0:	b009      	add	sp, #36	; 0x24
 80093c2:	ecbd 8b06 	vpop	{d8-d10}
 80093c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	f000 bcf0 	b.w	8009dae <__math_oflow>
 80093ce:	429c      	cmp	r4, r3
 80093d0:	dbf2      	blt.n	80093b8 <__ieee754_pow+0x218>
 80093d2:	4b0a      	ldr	r3, [pc, #40]	; (80093fc <__ieee754_pow+0x25c>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	dd19      	ble.n	800940c <__ieee754_pow+0x26c>
 80093d8:	f1b9 0f00 	cmp.w	r9, #0
 80093dc:	dcef      	bgt.n	80093be <__ieee754_pow+0x21e>
 80093de:	2000      	movs	r0, #0
 80093e0:	b009      	add	sp, #36	; 0x24
 80093e2:	ecbd 8b06 	vpop	{d8-d10}
 80093e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ea:	f000 bcd7 	b.w	8009d9c <__math_uflow>
 80093ee:	bf00      	nop
 80093f0:	fff00000 	.word	0xfff00000
 80093f4:	7ff00000 	.word	0x7ff00000
 80093f8:	433fffff 	.word	0x433fffff
 80093fc:	3ff00000 	.word	0x3ff00000
 8009400:	3fefffff 	.word	0x3fefffff
 8009404:	3fe00000 	.word	0x3fe00000
 8009408:	41e00000 	.word	0x41e00000
 800940c:	4b60      	ldr	r3, [pc, #384]	; (8009590 <__ieee754_pow+0x3f0>)
 800940e:	2200      	movs	r2, #0
 8009410:	f7f6 ff42 	bl	8000298 <__aeabi_dsub>
 8009414:	a354      	add	r3, pc, #336	; (adr r3, 8009568 <__ieee754_pow+0x3c8>)
 8009416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941a:	4604      	mov	r4, r0
 800941c:	460d      	mov	r5, r1
 800941e:	f7f7 f8f3 	bl	8000608 <__aeabi_dmul>
 8009422:	a353      	add	r3, pc, #332	; (adr r3, 8009570 <__ieee754_pow+0x3d0>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	4606      	mov	r6, r0
 800942a:	460f      	mov	r7, r1
 800942c:	4620      	mov	r0, r4
 800942e:	4629      	mov	r1, r5
 8009430:	f7f7 f8ea 	bl	8000608 <__aeabi_dmul>
 8009434:	4b57      	ldr	r3, [pc, #348]	; (8009594 <__ieee754_pow+0x3f4>)
 8009436:	4682      	mov	sl, r0
 8009438:	468b      	mov	fp, r1
 800943a:	2200      	movs	r2, #0
 800943c:	4620      	mov	r0, r4
 800943e:	4629      	mov	r1, r5
 8009440:	f7f7 f8e2 	bl	8000608 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	a14b      	add	r1, pc, #300	; (adr r1, 8009578 <__ieee754_pow+0x3d8>)
 800944a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800944e:	f7f6 ff23 	bl	8000298 <__aeabi_dsub>
 8009452:	4622      	mov	r2, r4
 8009454:	462b      	mov	r3, r5
 8009456:	f7f7 f8d7 	bl	8000608 <__aeabi_dmul>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	2000      	movs	r0, #0
 8009460:	494d      	ldr	r1, [pc, #308]	; (8009598 <__ieee754_pow+0x3f8>)
 8009462:	f7f6 ff19 	bl	8000298 <__aeabi_dsub>
 8009466:	4622      	mov	r2, r4
 8009468:	4680      	mov	r8, r0
 800946a:	4689      	mov	r9, r1
 800946c:	462b      	mov	r3, r5
 800946e:	4620      	mov	r0, r4
 8009470:	4629      	mov	r1, r5
 8009472:	f7f7 f8c9 	bl	8000608 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f7 f8c3 	bl	8000608 <__aeabi_dmul>
 8009482:	a33f      	add	r3, pc, #252	; (adr r3, 8009580 <__ieee754_pow+0x3e0>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f7f7 f8be 	bl	8000608 <__aeabi_dmul>
 800948c:	4602      	mov	r2, r0
 800948e:	460b      	mov	r3, r1
 8009490:	4650      	mov	r0, sl
 8009492:	4659      	mov	r1, fp
 8009494:	f7f6 ff00 	bl	8000298 <__aeabi_dsub>
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	4680      	mov	r8, r0
 800949e:	4689      	mov	r9, r1
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f6 fefa 	bl	800029c <__adddf3>
 80094a8:	2000      	movs	r0, #0
 80094aa:	4632      	mov	r2, r6
 80094ac:	463b      	mov	r3, r7
 80094ae:	4604      	mov	r4, r0
 80094b0:	460d      	mov	r5, r1
 80094b2:	f7f6 fef1 	bl	8000298 <__aeabi_dsub>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	4640      	mov	r0, r8
 80094bc:	4649      	mov	r1, r9
 80094be:	f7f6 feeb 	bl	8000298 <__aeabi_dsub>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	9a06      	ldr	r2, [sp, #24]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4313      	orrs	r3, r2
 80094ca:	4682      	mov	sl, r0
 80094cc:	468b      	mov	fp, r1
 80094ce:	f040 81e7 	bne.w	80098a0 <__ieee754_pow+0x700>
 80094d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009588 <__ieee754_pow+0x3e8>
 80094d6:	eeb0 8a47 	vmov.f32	s16, s14
 80094da:	eef0 8a67 	vmov.f32	s17, s15
 80094de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094e2:	2600      	movs	r6, #0
 80094e4:	4632      	mov	r2, r6
 80094e6:	463b      	mov	r3, r7
 80094e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ec:	f7f6 fed4 	bl	8000298 <__aeabi_dsub>
 80094f0:	4622      	mov	r2, r4
 80094f2:	462b      	mov	r3, r5
 80094f4:	f7f7 f888 	bl	8000608 <__aeabi_dmul>
 80094f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094fc:	4680      	mov	r8, r0
 80094fe:	4689      	mov	r9, r1
 8009500:	4650      	mov	r0, sl
 8009502:	4659      	mov	r1, fp
 8009504:	f7f7 f880 	bl	8000608 <__aeabi_dmul>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4640      	mov	r0, r8
 800950e:	4649      	mov	r1, r9
 8009510:	f7f6 fec4 	bl	800029c <__adddf3>
 8009514:	4632      	mov	r2, r6
 8009516:	463b      	mov	r3, r7
 8009518:	4680      	mov	r8, r0
 800951a:	4689      	mov	r9, r1
 800951c:	4620      	mov	r0, r4
 800951e:	4629      	mov	r1, r5
 8009520:	f7f7 f872 	bl	8000608 <__aeabi_dmul>
 8009524:	460b      	mov	r3, r1
 8009526:	4604      	mov	r4, r0
 8009528:	460d      	mov	r5, r1
 800952a:	4602      	mov	r2, r0
 800952c:	4649      	mov	r1, r9
 800952e:	4640      	mov	r0, r8
 8009530:	f7f6 feb4 	bl	800029c <__adddf3>
 8009534:	4b19      	ldr	r3, [pc, #100]	; (800959c <__ieee754_pow+0x3fc>)
 8009536:	4299      	cmp	r1, r3
 8009538:	ec45 4b19 	vmov	d9, r4, r5
 800953c:	4606      	mov	r6, r0
 800953e:	460f      	mov	r7, r1
 8009540:	468b      	mov	fp, r1
 8009542:	f340 82f1 	ble.w	8009b28 <__ieee754_pow+0x988>
 8009546:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800954a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800954e:	4303      	orrs	r3, r0
 8009550:	f000 81e4 	beq.w	800991c <__ieee754_pow+0x77c>
 8009554:	ec51 0b18 	vmov	r0, r1, d8
 8009558:	2200      	movs	r2, #0
 800955a:	2300      	movs	r3, #0
 800955c:	f7f7 fac6 	bl	8000aec <__aeabi_dcmplt>
 8009560:	3800      	subs	r0, #0
 8009562:	bf18      	it	ne
 8009564:	2001      	movne	r0, #1
 8009566:	e72b      	b.n	80093c0 <__ieee754_pow+0x220>
 8009568:	60000000 	.word	0x60000000
 800956c:	3ff71547 	.word	0x3ff71547
 8009570:	f85ddf44 	.word	0xf85ddf44
 8009574:	3e54ae0b 	.word	0x3e54ae0b
 8009578:	55555555 	.word	0x55555555
 800957c:	3fd55555 	.word	0x3fd55555
 8009580:	652b82fe 	.word	0x652b82fe
 8009584:	3ff71547 	.word	0x3ff71547
 8009588:	00000000 	.word	0x00000000
 800958c:	bff00000 	.word	0xbff00000
 8009590:	3ff00000 	.word	0x3ff00000
 8009594:	3fd00000 	.word	0x3fd00000
 8009598:	3fe00000 	.word	0x3fe00000
 800959c:	408fffff 	.word	0x408fffff
 80095a0:	4bd5      	ldr	r3, [pc, #852]	; (80098f8 <__ieee754_pow+0x758>)
 80095a2:	402b      	ands	r3, r5
 80095a4:	2200      	movs	r2, #0
 80095a6:	b92b      	cbnz	r3, 80095b4 <__ieee754_pow+0x414>
 80095a8:	4bd4      	ldr	r3, [pc, #848]	; (80098fc <__ieee754_pow+0x75c>)
 80095aa:	f7f7 f82d 	bl	8000608 <__aeabi_dmul>
 80095ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80095b2:	460c      	mov	r4, r1
 80095b4:	1523      	asrs	r3, r4, #20
 80095b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80095ba:	4413      	add	r3, r2
 80095bc:	9305      	str	r3, [sp, #20]
 80095be:	4bd0      	ldr	r3, [pc, #832]	; (8009900 <__ieee754_pow+0x760>)
 80095c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80095c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80095c8:	429c      	cmp	r4, r3
 80095ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80095ce:	dd08      	ble.n	80095e2 <__ieee754_pow+0x442>
 80095d0:	4bcc      	ldr	r3, [pc, #816]	; (8009904 <__ieee754_pow+0x764>)
 80095d2:	429c      	cmp	r4, r3
 80095d4:	f340 8162 	ble.w	800989c <__ieee754_pow+0x6fc>
 80095d8:	9b05      	ldr	r3, [sp, #20]
 80095da:	3301      	adds	r3, #1
 80095dc:	9305      	str	r3, [sp, #20]
 80095de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80095e2:	2400      	movs	r4, #0
 80095e4:	00e3      	lsls	r3, r4, #3
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	4bc7      	ldr	r3, [pc, #796]	; (8009908 <__ieee754_pow+0x768>)
 80095ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095ee:	ed93 7b00 	vldr	d7, [r3]
 80095f2:	4629      	mov	r1, r5
 80095f4:	ec53 2b17 	vmov	r2, r3, d7
 80095f8:	eeb0 9a47 	vmov.f32	s18, s14
 80095fc:	eef0 9a67 	vmov.f32	s19, s15
 8009600:	4682      	mov	sl, r0
 8009602:	f7f6 fe49 	bl	8000298 <__aeabi_dsub>
 8009606:	4652      	mov	r2, sl
 8009608:	4606      	mov	r6, r0
 800960a:	460f      	mov	r7, r1
 800960c:	462b      	mov	r3, r5
 800960e:	ec51 0b19 	vmov	r0, r1, d9
 8009612:	f7f6 fe43 	bl	800029c <__adddf3>
 8009616:	4602      	mov	r2, r0
 8009618:	460b      	mov	r3, r1
 800961a:	2000      	movs	r0, #0
 800961c:	49bb      	ldr	r1, [pc, #748]	; (800990c <__ieee754_pow+0x76c>)
 800961e:	f7f7 f91d 	bl	800085c <__aeabi_ddiv>
 8009622:	ec41 0b1a 	vmov	d10, r0, r1
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4630      	mov	r0, r6
 800962c:	4639      	mov	r1, r7
 800962e:	f7f6 ffeb 	bl	8000608 <__aeabi_dmul>
 8009632:	2300      	movs	r3, #0
 8009634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009638:	9302      	str	r3, [sp, #8]
 800963a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800963e:	46ab      	mov	fp, r5
 8009640:	106d      	asrs	r5, r5, #1
 8009642:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009646:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800964a:	ec41 0b18 	vmov	d8, r0, r1
 800964e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009652:	2200      	movs	r2, #0
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	4614      	mov	r4, r2
 800965a:	461d      	mov	r5, r3
 800965c:	f7f6 ffd4 	bl	8000608 <__aeabi_dmul>
 8009660:	4602      	mov	r2, r0
 8009662:	460b      	mov	r3, r1
 8009664:	4630      	mov	r0, r6
 8009666:	4639      	mov	r1, r7
 8009668:	f7f6 fe16 	bl	8000298 <__aeabi_dsub>
 800966c:	ec53 2b19 	vmov	r2, r3, d9
 8009670:	4606      	mov	r6, r0
 8009672:	460f      	mov	r7, r1
 8009674:	4620      	mov	r0, r4
 8009676:	4629      	mov	r1, r5
 8009678:	f7f6 fe0e 	bl	8000298 <__aeabi_dsub>
 800967c:	4602      	mov	r2, r0
 800967e:	460b      	mov	r3, r1
 8009680:	4650      	mov	r0, sl
 8009682:	4659      	mov	r1, fp
 8009684:	f7f6 fe08 	bl	8000298 <__aeabi_dsub>
 8009688:	4642      	mov	r2, r8
 800968a:	464b      	mov	r3, r9
 800968c:	f7f6 ffbc 	bl	8000608 <__aeabi_dmul>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4630      	mov	r0, r6
 8009696:	4639      	mov	r1, r7
 8009698:	f7f6 fdfe 	bl	8000298 <__aeabi_dsub>
 800969c:	ec53 2b1a 	vmov	r2, r3, d10
 80096a0:	f7f6 ffb2 	bl	8000608 <__aeabi_dmul>
 80096a4:	ec53 2b18 	vmov	r2, r3, d8
 80096a8:	ec41 0b19 	vmov	d9, r0, r1
 80096ac:	ec51 0b18 	vmov	r0, r1, d8
 80096b0:	f7f6 ffaa 	bl	8000608 <__aeabi_dmul>
 80096b4:	a37c      	add	r3, pc, #496	; (adr r3, 80098a8 <__ieee754_pow+0x708>)
 80096b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ba:	4604      	mov	r4, r0
 80096bc:	460d      	mov	r5, r1
 80096be:	f7f6 ffa3 	bl	8000608 <__aeabi_dmul>
 80096c2:	a37b      	add	r3, pc, #492	; (adr r3, 80098b0 <__ieee754_pow+0x710>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 fde8 	bl	800029c <__adddf3>
 80096cc:	4622      	mov	r2, r4
 80096ce:	462b      	mov	r3, r5
 80096d0:	f7f6 ff9a 	bl	8000608 <__aeabi_dmul>
 80096d4:	a378      	add	r3, pc, #480	; (adr r3, 80098b8 <__ieee754_pow+0x718>)
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	f7f6 fddf 	bl	800029c <__adddf3>
 80096de:	4622      	mov	r2, r4
 80096e0:	462b      	mov	r3, r5
 80096e2:	f7f6 ff91 	bl	8000608 <__aeabi_dmul>
 80096e6:	a376      	add	r3, pc, #472	; (adr r3, 80098c0 <__ieee754_pow+0x720>)
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f7f6 fdd6 	bl	800029c <__adddf3>
 80096f0:	4622      	mov	r2, r4
 80096f2:	462b      	mov	r3, r5
 80096f4:	f7f6 ff88 	bl	8000608 <__aeabi_dmul>
 80096f8:	a373      	add	r3, pc, #460	; (adr r3, 80098c8 <__ieee754_pow+0x728>)
 80096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fe:	f7f6 fdcd 	bl	800029c <__adddf3>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	f7f6 ff7f 	bl	8000608 <__aeabi_dmul>
 800970a:	a371      	add	r3, pc, #452	; (adr r3, 80098d0 <__ieee754_pow+0x730>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	f7f6 fdc4 	bl	800029c <__adddf3>
 8009714:	4622      	mov	r2, r4
 8009716:	4606      	mov	r6, r0
 8009718:	460f      	mov	r7, r1
 800971a:	462b      	mov	r3, r5
 800971c:	4620      	mov	r0, r4
 800971e:	4629      	mov	r1, r5
 8009720:	f7f6 ff72 	bl	8000608 <__aeabi_dmul>
 8009724:	4602      	mov	r2, r0
 8009726:	460b      	mov	r3, r1
 8009728:	4630      	mov	r0, r6
 800972a:	4639      	mov	r1, r7
 800972c:	f7f6 ff6c 	bl	8000608 <__aeabi_dmul>
 8009730:	4642      	mov	r2, r8
 8009732:	4604      	mov	r4, r0
 8009734:	460d      	mov	r5, r1
 8009736:	464b      	mov	r3, r9
 8009738:	ec51 0b18 	vmov	r0, r1, d8
 800973c:	f7f6 fdae 	bl	800029c <__adddf3>
 8009740:	ec53 2b19 	vmov	r2, r3, d9
 8009744:	f7f6 ff60 	bl	8000608 <__aeabi_dmul>
 8009748:	4622      	mov	r2, r4
 800974a:	462b      	mov	r3, r5
 800974c:	f7f6 fda6 	bl	800029c <__adddf3>
 8009750:	4642      	mov	r2, r8
 8009752:	4682      	mov	sl, r0
 8009754:	468b      	mov	fp, r1
 8009756:	464b      	mov	r3, r9
 8009758:	4640      	mov	r0, r8
 800975a:	4649      	mov	r1, r9
 800975c:	f7f6 ff54 	bl	8000608 <__aeabi_dmul>
 8009760:	4b6b      	ldr	r3, [pc, #428]	; (8009910 <__ieee754_pow+0x770>)
 8009762:	2200      	movs	r2, #0
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	f7f6 fd98 	bl	800029c <__adddf3>
 800976c:	4652      	mov	r2, sl
 800976e:	465b      	mov	r3, fp
 8009770:	f7f6 fd94 	bl	800029c <__adddf3>
 8009774:	2000      	movs	r0, #0
 8009776:	4604      	mov	r4, r0
 8009778:	460d      	mov	r5, r1
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	4640      	mov	r0, r8
 8009780:	4649      	mov	r1, r9
 8009782:	f7f6 ff41 	bl	8000608 <__aeabi_dmul>
 8009786:	4b62      	ldr	r3, [pc, #392]	; (8009910 <__ieee754_pow+0x770>)
 8009788:	4680      	mov	r8, r0
 800978a:	4689      	mov	r9, r1
 800978c:	2200      	movs	r2, #0
 800978e:	4620      	mov	r0, r4
 8009790:	4629      	mov	r1, r5
 8009792:	f7f6 fd81 	bl	8000298 <__aeabi_dsub>
 8009796:	4632      	mov	r2, r6
 8009798:	463b      	mov	r3, r7
 800979a:	f7f6 fd7d 	bl	8000298 <__aeabi_dsub>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4650      	mov	r0, sl
 80097a4:	4659      	mov	r1, fp
 80097a6:	f7f6 fd77 	bl	8000298 <__aeabi_dsub>
 80097aa:	ec53 2b18 	vmov	r2, r3, d8
 80097ae:	f7f6 ff2b 	bl	8000608 <__aeabi_dmul>
 80097b2:	4622      	mov	r2, r4
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	462b      	mov	r3, r5
 80097ba:	ec51 0b19 	vmov	r0, r1, d9
 80097be:	f7f6 ff23 	bl	8000608 <__aeabi_dmul>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	4630      	mov	r0, r6
 80097c8:	4639      	mov	r1, r7
 80097ca:	f7f6 fd67 	bl	800029c <__adddf3>
 80097ce:	4606      	mov	r6, r0
 80097d0:	460f      	mov	r7, r1
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4640      	mov	r0, r8
 80097d8:	4649      	mov	r1, r9
 80097da:	f7f6 fd5f 	bl	800029c <__adddf3>
 80097de:	a33e      	add	r3, pc, #248	; (adr r3, 80098d8 <__ieee754_pow+0x738>)
 80097e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e4:	2000      	movs	r0, #0
 80097e6:	4604      	mov	r4, r0
 80097e8:	460d      	mov	r5, r1
 80097ea:	f7f6 ff0d 	bl	8000608 <__aeabi_dmul>
 80097ee:	4642      	mov	r2, r8
 80097f0:	ec41 0b18 	vmov	d8, r0, r1
 80097f4:	464b      	mov	r3, r9
 80097f6:	4620      	mov	r0, r4
 80097f8:	4629      	mov	r1, r5
 80097fa:	f7f6 fd4d 	bl	8000298 <__aeabi_dsub>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4630      	mov	r0, r6
 8009804:	4639      	mov	r1, r7
 8009806:	f7f6 fd47 	bl	8000298 <__aeabi_dsub>
 800980a:	a335      	add	r3, pc, #212	; (adr r3, 80098e0 <__ieee754_pow+0x740>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	f7f6 fefa 	bl	8000608 <__aeabi_dmul>
 8009814:	a334      	add	r3, pc, #208	; (adr r3, 80098e8 <__ieee754_pow+0x748>)
 8009816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800981a:	4606      	mov	r6, r0
 800981c:	460f      	mov	r7, r1
 800981e:	4620      	mov	r0, r4
 8009820:	4629      	mov	r1, r5
 8009822:	f7f6 fef1 	bl	8000608 <__aeabi_dmul>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4630      	mov	r0, r6
 800982c:	4639      	mov	r1, r7
 800982e:	f7f6 fd35 	bl	800029c <__adddf3>
 8009832:	9a07      	ldr	r2, [sp, #28]
 8009834:	4b37      	ldr	r3, [pc, #220]	; (8009914 <__ieee754_pow+0x774>)
 8009836:	4413      	add	r3, r2
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f7f6 fd2e 	bl	800029c <__adddf3>
 8009840:	4682      	mov	sl, r0
 8009842:	9805      	ldr	r0, [sp, #20]
 8009844:	468b      	mov	fp, r1
 8009846:	f7f6 fe75 	bl	8000534 <__aeabi_i2d>
 800984a:	9a07      	ldr	r2, [sp, #28]
 800984c:	4b32      	ldr	r3, [pc, #200]	; (8009918 <__ieee754_pow+0x778>)
 800984e:	4413      	add	r3, r2
 8009850:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009854:	4606      	mov	r6, r0
 8009856:	460f      	mov	r7, r1
 8009858:	4652      	mov	r2, sl
 800985a:	465b      	mov	r3, fp
 800985c:	ec51 0b18 	vmov	r0, r1, d8
 8009860:	f7f6 fd1c 	bl	800029c <__adddf3>
 8009864:	4642      	mov	r2, r8
 8009866:	464b      	mov	r3, r9
 8009868:	f7f6 fd18 	bl	800029c <__adddf3>
 800986c:	4632      	mov	r2, r6
 800986e:	463b      	mov	r3, r7
 8009870:	f7f6 fd14 	bl	800029c <__adddf3>
 8009874:	2000      	movs	r0, #0
 8009876:	4632      	mov	r2, r6
 8009878:	463b      	mov	r3, r7
 800987a:	4604      	mov	r4, r0
 800987c:	460d      	mov	r5, r1
 800987e:	f7f6 fd0b 	bl	8000298 <__aeabi_dsub>
 8009882:	4642      	mov	r2, r8
 8009884:	464b      	mov	r3, r9
 8009886:	f7f6 fd07 	bl	8000298 <__aeabi_dsub>
 800988a:	ec53 2b18 	vmov	r2, r3, d8
 800988e:	f7f6 fd03 	bl	8000298 <__aeabi_dsub>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	4650      	mov	r0, sl
 8009898:	4659      	mov	r1, fp
 800989a:	e610      	b.n	80094be <__ieee754_pow+0x31e>
 800989c:	2401      	movs	r4, #1
 800989e:	e6a1      	b.n	80095e4 <__ieee754_pow+0x444>
 80098a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80098f0 <__ieee754_pow+0x750>
 80098a4:	e617      	b.n	80094d6 <__ieee754_pow+0x336>
 80098a6:	bf00      	nop
 80098a8:	4a454eef 	.word	0x4a454eef
 80098ac:	3fca7e28 	.word	0x3fca7e28
 80098b0:	93c9db65 	.word	0x93c9db65
 80098b4:	3fcd864a 	.word	0x3fcd864a
 80098b8:	a91d4101 	.word	0xa91d4101
 80098bc:	3fd17460 	.word	0x3fd17460
 80098c0:	518f264d 	.word	0x518f264d
 80098c4:	3fd55555 	.word	0x3fd55555
 80098c8:	db6fabff 	.word	0xdb6fabff
 80098cc:	3fdb6db6 	.word	0x3fdb6db6
 80098d0:	33333303 	.word	0x33333303
 80098d4:	3fe33333 	.word	0x3fe33333
 80098d8:	e0000000 	.word	0xe0000000
 80098dc:	3feec709 	.word	0x3feec709
 80098e0:	dc3a03fd 	.word	0xdc3a03fd
 80098e4:	3feec709 	.word	0x3feec709
 80098e8:	145b01f5 	.word	0x145b01f5
 80098ec:	be3e2fe0 	.word	0xbe3e2fe0
 80098f0:	00000000 	.word	0x00000000
 80098f4:	3ff00000 	.word	0x3ff00000
 80098f8:	7ff00000 	.word	0x7ff00000
 80098fc:	43400000 	.word	0x43400000
 8009900:	0003988e 	.word	0x0003988e
 8009904:	000bb679 	.word	0x000bb679
 8009908:	0800a060 	.word	0x0800a060
 800990c:	3ff00000 	.word	0x3ff00000
 8009910:	40080000 	.word	0x40080000
 8009914:	0800a080 	.word	0x0800a080
 8009918:	0800a070 	.word	0x0800a070
 800991c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009bf4 <__ieee754_pow+0xa54>)
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	4640      	mov	r0, r8
 8009924:	4649      	mov	r1, r9
 8009926:	f7f6 fcb9 	bl	800029c <__adddf3>
 800992a:	4622      	mov	r2, r4
 800992c:	ec41 0b1a 	vmov	d10, r0, r1
 8009930:	462b      	mov	r3, r5
 8009932:	4630      	mov	r0, r6
 8009934:	4639      	mov	r1, r7
 8009936:	f7f6 fcaf 	bl	8000298 <__aeabi_dsub>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	ec51 0b1a 	vmov	r0, r1, d10
 8009942:	f7f7 f8f1 	bl	8000b28 <__aeabi_dcmpgt>
 8009946:	2800      	cmp	r0, #0
 8009948:	f47f ae04 	bne.w	8009554 <__ieee754_pow+0x3b4>
 800994c:	4aa4      	ldr	r2, [pc, #656]	; (8009be0 <__ieee754_pow+0xa40>)
 800994e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009952:	4293      	cmp	r3, r2
 8009954:	f340 8108 	ble.w	8009b68 <__ieee754_pow+0x9c8>
 8009958:	151b      	asrs	r3, r3, #20
 800995a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800995e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009962:	fa4a f303 	asr.w	r3, sl, r3
 8009966:	445b      	add	r3, fp
 8009968:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800996c:	4e9d      	ldr	r6, [pc, #628]	; (8009be4 <__ieee754_pow+0xa44>)
 800996e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009972:	4116      	asrs	r6, r2
 8009974:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009978:	2000      	movs	r0, #0
 800997a:	ea23 0106 	bic.w	r1, r3, r6
 800997e:	f1c2 0214 	rsb	r2, r2, #20
 8009982:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009986:	fa4a fa02 	asr.w	sl, sl, r2
 800998a:	f1bb 0f00 	cmp.w	fp, #0
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	bfb8      	it	lt
 8009998:	f1ca 0a00 	rsblt	sl, sl, #0
 800999c:	f7f6 fc7c 	bl	8000298 <__aeabi_dsub>
 80099a0:	ec41 0b19 	vmov	d9, r0, r1
 80099a4:	4642      	mov	r2, r8
 80099a6:	464b      	mov	r3, r9
 80099a8:	ec51 0b19 	vmov	r0, r1, d9
 80099ac:	f7f6 fc76 	bl	800029c <__adddf3>
 80099b0:	a37b      	add	r3, pc, #492	; (adr r3, 8009ba0 <__ieee754_pow+0xa00>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	2000      	movs	r0, #0
 80099b8:	4604      	mov	r4, r0
 80099ba:	460d      	mov	r5, r1
 80099bc:	f7f6 fe24 	bl	8000608 <__aeabi_dmul>
 80099c0:	ec53 2b19 	vmov	r2, r3, d9
 80099c4:	4606      	mov	r6, r0
 80099c6:	460f      	mov	r7, r1
 80099c8:	4620      	mov	r0, r4
 80099ca:	4629      	mov	r1, r5
 80099cc:	f7f6 fc64 	bl	8000298 <__aeabi_dsub>
 80099d0:	4602      	mov	r2, r0
 80099d2:	460b      	mov	r3, r1
 80099d4:	4640      	mov	r0, r8
 80099d6:	4649      	mov	r1, r9
 80099d8:	f7f6 fc5e 	bl	8000298 <__aeabi_dsub>
 80099dc:	a372      	add	r3, pc, #456	; (adr r3, 8009ba8 <__ieee754_pow+0xa08>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7f6 fe11 	bl	8000608 <__aeabi_dmul>
 80099e6:	a372      	add	r3, pc, #456	; (adr r3, 8009bb0 <__ieee754_pow+0xa10>)
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	4680      	mov	r8, r0
 80099ee:	4689      	mov	r9, r1
 80099f0:	4620      	mov	r0, r4
 80099f2:	4629      	mov	r1, r5
 80099f4:	f7f6 fe08 	bl	8000608 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fc4c 	bl	800029c <__adddf3>
 8009a04:	4604      	mov	r4, r0
 8009a06:	460d      	mov	r5, r1
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	4639      	mov	r1, r7
 8009a10:	f7f6 fc44 	bl	800029c <__adddf3>
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	4680      	mov	r8, r0
 8009a1a:	4689      	mov	r9, r1
 8009a1c:	f7f6 fc3c 	bl	8000298 <__aeabi_dsub>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4620      	mov	r0, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fc36 	bl	8000298 <__aeabi_dsub>
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	4606      	mov	r6, r0
 8009a30:	460f      	mov	r7, r1
 8009a32:	464b      	mov	r3, r9
 8009a34:	4640      	mov	r0, r8
 8009a36:	4649      	mov	r1, r9
 8009a38:	f7f6 fde6 	bl	8000608 <__aeabi_dmul>
 8009a3c:	a35e      	add	r3, pc, #376	; (adr r3, 8009bb8 <__ieee754_pow+0xa18>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	4604      	mov	r4, r0
 8009a44:	460d      	mov	r5, r1
 8009a46:	f7f6 fddf 	bl	8000608 <__aeabi_dmul>
 8009a4a:	a35d      	add	r3, pc, #372	; (adr r3, 8009bc0 <__ieee754_pow+0xa20>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	f7f6 fc22 	bl	8000298 <__aeabi_dsub>
 8009a54:	4622      	mov	r2, r4
 8009a56:	462b      	mov	r3, r5
 8009a58:	f7f6 fdd6 	bl	8000608 <__aeabi_dmul>
 8009a5c:	a35a      	add	r3, pc, #360	; (adr r3, 8009bc8 <__ieee754_pow+0xa28>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	f7f6 fc1b 	bl	800029c <__adddf3>
 8009a66:	4622      	mov	r2, r4
 8009a68:	462b      	mov	r3, r5
 8009a6a:	f7f6 fdcd 	bl	8000608 <__aeabi_dmul>
 8009a6e:	a358      	add	r3, pc, #352	; (adr r3, 8009bd0 <__ieee754_pow+0xa30>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f7f6 fc10 	bl	8000298 <__aeabi_dsub>
 8009a78:	4622      	mov	r2, r4
 8009a7a:	462b      	mov	r3, r5
 8009a7c:	f7f6 fdc4 	bl	8000608 <__aeabi_dmul>
 8009a80:	a355      	add	r3, pc, #340	; (adr r3, 8009bd8 <__ieee754_pow+0xa38>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	f7f6 fc09 	bl	800029c <__adddf3>
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	462b      	mov	r3, r5
 8009a8e:	f7f6 fdbb 	bl	8000608 <__aeabi_dmul>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f6 fbfd 	bl	8000298 <__aeabi_dsub>
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	f7f6 fdad 	bl	8000608 <__aeabi_dmul>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	ec41 0b19 	vmov	d9, r0, r1
 8009ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ab8:	4620      	mov	r0, r4
 8009aba:	4629      	mov	r1, r5
 8009abc:	f7f6 fbec 	bl	8000298 <__aeabi_dsub>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	ec51 0b19 	vmov	r0, r1, d9
 8009ac8:	f7f6 fec8 	bl	800085c <__aeabi_ddiv>
 8009acc:	4632      	mov	r2, r6
 8009ace:	4604      	mov	r4, r0
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	f7f6 fd96 	bl	8000608 <__aeabi_dmul>
 8009adc:	4632      	mov	r2, r6
 8009ade:	463b      	mov	r3, r7
 8009ae0:	f7f6 fbdc 	bl	800029c <__adddf3>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4620      	mov	r0, r4
 8009aea:	4629      	mov	r1, r5
 8009aec:	f7f6 fbd4 	bl	8000298 <__aeabi_dsub>
 8009af0:	4642      	mov	r2, r8
 8009af2:	464b      	mov	r3, r9
 8009af4:	f7f6 fbd0 	bl	8000298 <__aeabi_dsub>
 8009af8:	460b      	mov	r3, r1
 8009afa:	4602      	mov	r2, r0
 8009afc:	493a      	ldr	r1, [pc, #232]	; (8009be8 <__ieee754_pow+0xa48>)
 8009afe:	2000      	movs	r0, #0
 8009b00:	f7f6 fbca 	bl	8000298 <__aeabi_dsub>
 8009b04:	ec41 0b10 	vmov	d0, r0, r1
 8009b08:	ee10 3a90 	vmov	r3, s1
 8009b0c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009b10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b14:	da2b      	bge.n	8009b6e <__ieee754_pow+0x9ce>
 8009b16:	4650      	mov	r0, sl
 8009b18:	f000 f966 	bl	8009de8 <scalbn>
 8009b1c:	ec51 0b10 	vmov	r0, r1, d0
 8009b20:	ec53 2b18 	vmov	r2, r3, d8
 8009b24:	f7ff bbed 	b.w	8009302 <__ieee754_pow+0x162>
 8009b28:	4b30      	ldr	r3, [pc, #192]	; (8009bec <__ieee754_pow+0xa4c>)
 8009b2a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009b2e:	429e      	cmp	r6, r3
 8009b30:	f77f af0c 	ble.w	800994c <__ieee754_pow+0x7ac>
 8009b34:	4b2e      	ldr	r3, [pc, #184]	; (8009bf0 <__ieee754_pow+0xa50>)
 8009b36:	440b      	add	r3, r1
 8009b38:	4303      	orrs	r3, r0
 8009b3a:	d009      	beq.n	8009b50 <__ieee754_pow+0x9b0>
 8009b3c:	ec51 0b18 	vmov	r0, r1, d8
 8009b40:	2200      	movs	r2, #0
 8009b42:	2300      	movs	r3, #0
 8009b44:	f7f6 ffd2 	bl	8000aec <__aeabi_dcmplt>
 8009b48:	3800      	subs	r0, #0
 8009b4a:	bf18      	it	ne
 8009b4c:	2001      	movne	r0, #1
 8009b4e:	e447      	b.n	80093e0 <__ieee754_pow+0x240>
 8009b50:	4622      	mov	r2, r4
 8009b52:	462b      	mov	r3, r5
 8009b54:	f7f6 fba0 	bl	8000298 <__aeabi_dsub>
 8009b58:	4642      	mov	r2, r8
 8009b5a:	464b      	mov	r3, r9
 8009b5c:	f7f6 ffda 	bl	8000b14 <__aeabi_dcmpge>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	f43f aef3 	beq.w	800994c <__ieee754_pow+0x7ac>
 8009b66:	e7e9      	b.n	8009b3c <__ieee754_pow+0x99c>
 8009b68:	f04f 0a00 	mov.w	sl, #0
 8009b6c:	e71a      	b.n	80099a4 <__ieee754_pow+0x804>
 8009b6e:	ec51 0b10 	vmov	r0, r1, d0
 8009b72:	4619      	mov	r1, r3
 8009b74:	e7d4      	b.n	8009b20 <__ieee754_pow+0x980>
 8009b76:	491c      	ldr	r1, [pc, #112]	; (8009be8 <__ieee754_pow+0xa48>)
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f7ff bb30 	b.w	80091de <__ieee754_pow+0x3e>
 8009b7e:	2000      	movs	r0, #0
 8009b80:	2100      	movs	r1, #0
 8009b82:	f7ff bb2c 	b.w	80091de <__ieee754_pow+0x3e>
 8009b86:	4630      	mov	r0, r6
 8009b88:	4639      	mov	r1, r7
 8009b8a:	f7ff bb28 	b.w	80091de <__ieee754_pow+0x3e>
 8009b8e:	9204      	str	r2, [sp, #16]
 8009b90:	f7ff bb7a 	b.w	8009288 <__ieee754_pow+0xe8>
 8009b94:	2300      	movs	r3, #0
 8009b96:	f7ff bb64 	b.w	8009262 <__ieee754_pow+0xc2>
 8009b9a:	bf00      	nop
 8009b9c:	f3af 8000 	nop.w
 8009ba0:	00000000 	.word	0x00000000
 8009ba4:	3fe62e43 	.word	0x3fe62e43
 8009ba8:	fefa39ef 	.word	0xfefa39ef
 8009bac:	3fe62e42 	.word	0x3fe62e42
 8009bb0:	0ca86c39 	.word	0x0ca86c39
 8009bb4:	be205c61 	.word	0xbe205c61
 8009bb8:	72bea4d0 	.word	0x72bea4d0
 8009bbc:	3e663769 	.word	0x3e663769
 8009bc0:	c5d26bf1 	.word	0xc5d26bf1
 8009bc4:	3ebbbd41 	.word	0x3ebbbd41
 8009bc8:	af25de2c 	.word	0xaf25de2c
 8009bcc:	3f11566a 	.word	0x3f11566a
 8009bd0:	16bebd93 	.word	0x16bebd93
 8009bd4:	3f66c16c 	.word	0x3f66c16c
 8009bd8:	5555553e 	.word	0x5555553e
 8009bdc:	3fc55555 	.word	0x3fc55555
 8009be0:	3fe00000 	.word	0x3fe00000
 8009be4:	000fffff 	.word	0x000fffff
 8009be8:	3ff00000 	.word	0x3ff00000
 8009bec:	4090cbff 	.word	0x4090cbff
 8009bf0:	3f6f3400 	.word	0x3f6f3400
 8009bf4:	652b82fe 	.word	0x652b82fe
 8009bf8:	3c971547 	.word	0x3c971547

08009bfc <__ieee754_sqrt>:
 8009bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c00:	ec55 4b10 	vmov	r4, r5, d0
 8009c04:	4e55      	ldr	r6, [pc, #340]	; (8009d5c <__ieee754_sqrt+0x160>)
 8009c06:	43ae      	bics	r6, r5
 8009c08:	ee10 0a10 	vmov	r0, s0
 8009c0c:	ee10 3a10 	vmov	r3, s0
 8009c10:	462a      	mov	r2, r5
 8009c12:	4629      	mov	r1, r5
 8009c14:	d110      	bne.n	8009c38 <__ieee754_sqrt+0x3c>
 8009c16:	ee10 2a10 	vmov	r2, s0
 8009c1a:	462b      	mov	r3, r5
 8009c1c:	f7f6 fcf4 	bl	8000608 <__aeabi_dmul>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	4620      	mov	r0, r4
 8009c26:	4629      	mov	r1, r5
 8009c28:	f7f6 fb38 	bl	800029c <__adddf3>
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	460d      	mov	r5, r1
 8009c30:	ec45 4b10 	vmov	d0, r4, r5
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	2d00      	cmp	r5, #0
 8009c3a:	dc10      	bgt.n	8009c5e <__ieee754_sqrt+0x62>
 8009c3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009c40:	4330      	orrs	r0, r6
 8009c42:	d0f5      	beq.n	8009c30 <__ieee754_sqrt+0x34>
 8009c44:	b15d      	cbz	r5, 8009c5e <__ieee754_sqrt+0x62>
 8009c46:	ee10 2a10 	vmov	r2, s0
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	ee10 0a10 	vmov	r0, s0
 8009c50:	f7f6 fb22 	bl	8000298 <__aeabi_dsub>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	f7f6 fe00 	bl	800085c <__aeabi_ddiv>
 8009c5c:	e7e6      	b.n	8009c2c <__ieee754_sqrt+0x30>
 8009c5e:	1512      	asrs	r2, r2, #20
 8009c60:	d074      	beq.n	8009d4c <__ieee754_sqrt+0x150>
 8009c62:	07d4      	lsls	r4, r2, #31
 8009c64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009c68:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009c6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009c70:	bf5e      	ittt	pl
 8009c72:	0fda      	lsrpl	r2, r3, #31
 8009c74:	005b      	lslpl	r3, r3, #1
 8009c76:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	0fda      	lsrs	r2, r3, #31
 8009c7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009c82:	107f      	asrs	r7, r7, #1
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	2516      	movs	r5, #22
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009c8e:	1886      	adds	r6, r0, r2
 8009c90:	428e      	cmp	r6, r1
 8009c92:	bfde      	ittt	le
 8009c94:	1b89      	suble	r1, r1, r6
 8009c96:	18b0      	addle	r0, r6, r2
 8009c98:	18a4      	addle	r4, r4, r2
 8009c9a:	0049      	lsls	r1, r1, #1
 8009c9c:	3d01      	subs	r5, #1
 8009c9e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009ca2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009ca6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009caa:	d1f0      	bne.n	8009c8e <__ieee754_sqrt+0x92>
 8009cac:	462a      	mov	r2, r5
 8009cae:	f04f 0e20 	mov.w	lr, #32
 8009cb2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009cb6:	4281      	cmp	r1, r0
 8009cb8:	eb06 0c05 	add.w	ip, r6, r5
 8009cbc:	dc02      	bgt.n	8009cc4 <__ieee754_sqrt+0xc8>
 8009cbe:	d113      	bne.n	8009ce8 <__ieee754_sqrt+0xec>
 8009cc0:	459c      	cmp	ip, r3
 8009cc2:	d811      	bhi.n	8009ce8 <__ieee754_sqrt+0xec>
 8009cc4:	f1bc 0f00 	cmp.w	ip, #0
 8009cc8:	eb0c 0506 	add.w	r5, ip, r6
 8009ccc:	da43      	bge.n	8009d56 <__ieee754_sqrt+0x15a>
 8009cce:	2d00      	cmp	r5, #0
 8009cd0:	db41      	blt.n	8009d56 <__ieee754_sqrt+0x15a>
 8009cd2:	f100 0801 	add.w	r8, r0, #1
 8009cd6:	1a09      	subs	r1, r1, r0
 8009cd8:	459c      	cmp	ip, r3
 8009cda:	bf88      	it	hi
 8009cdc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009ce0:	eba3 030c 	sub.w	r3, r3, ip
 8009ce4:	4432      	add	r2, r6
 8009ce6:	4640      	mov	r0, r8
 8009ce8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009cec:	f1be 0e01 	subs.w	lr, lr, #1
 8009cf0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009cf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009cf8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009cfc:	d1db      	bne.n	8009cb6 <__ieee754_sqrt+0xba>
 8009cfe:	430b      	orrs	r3, r1
 8009d00:	d006      	beq.n	8009d10 <__ieee754_sqrt+0x114>
 8009d02:	1c50      	adds	r0, r2, #1
 8009d04:	bf13      	iteet	ne
 8009d06:	3201      	addne	r2, #1
 8009d08:	3401      	addeq	r4, #1
 8009d0a:	4672      	moveq	r2, lr
 8009d0c:	f022 0201 	bicne.w	r2, r2, #1
 8009d10:	1063      	asrs	r3, r4, #1
 8009d12:	0852      	lsrs	r2, r2, #1
 8009d14:	07e1      	lsls	r1, r4, #31
 8009d16:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009d1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009d1e:	bf48      	it	mi
 8009d20:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009d24:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009d28:	4614      	mov	r4, r2
 8009d2a:	e781      	b.n	8009c30 <__ieee754_sqrt+0x34>
 8009d2c:	0ad9      	lsrs	r1, r3, #11
 8009d2e:	3815      	subs	r0, #21
 8009d30:	055b      	lsls	r3, r3, #21
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d0fa      	beq.n	8009d2c <__ieee754_sqrt+0x130>
 8009d36:	02cd      	lsls	r5, r1, #11
 8009d38:	d50a      	bpl.n	8009d50 <__ieee754_sqrt+0x154>
 8009d3a:	f1c2 0420 	rsb	r4, r2, #32
 8009d3e:	fa23 f404 	lsr.w	r4, r3, r4
 8009d42:	1e55      	subs	r5, r2, #1
 8009d44:	4093      	lsls	r3, r2
 8009d46:	4321      	orrs	r1, r4
 8009d48:	1b42      	subs	r2, r0, r5
 8009d4a:	e78a      	b.n	8009c62 <__ieee754_sqrt+0x66>
 8009d4c:	4610      	mov	r0, r2
 8009d4e:	e7f0      	b.n	8009d32 <__ieee754_sqrt+0x136>
 8009d50:	0049      	lsls	r1, r1, #1
 8009d52:	3201      	adds	r2, #1
 8009d54:	e7ef      	b.n	8009d36 <__ieee754_sqrt+0x13a>
 8009d56:	4680      	mov	r8, r0
 8009d58:	e7bd      	b.n	8009cd6 <__ieee754_sqrt+0xda>
 8009d5a:	bf00      	nop
 8009d5c:	7ff00000 	.word	0x7ff00000

08009d60 <with_errno>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	4604      	mov	r4, r0
 8009d64:	460d      	mov	r5, r1
 8009d66:	4616      	mov	r6, r2
 8009d68:	f7fe fca0 	bl	80086ac <__errno>
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	6006      	str	r6, [r0, #0]
 8009d70:	4620      	mov	r0, r4
 8009d72:	bd70      	pop	{r4, r5, r6, pc}

08009d74 <xflow>:
 8009d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d76:	4614      	mov	r4, r2
 8009d78:	461d      	mov	r5, r3
 8009d7a:	b108      	cbz	r0, 8009d80 <xflow+0xc>
 8009d7c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009d80:	e9cd 2300 	strd	r2, r3, [sp]
 8009d84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d88:	4620      	mov	r0, r4
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	f7f6 fc3c 	bl	8000608 <__aeabi_dmul>
 8009d90:	2222      	movs	r2, #34	; 0x22
 8009d92:	b003      	add	sp, #12
 8009d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d98:	f7ff bfe2 	b.w	8009d60 <with_errno>

08009d9c <__math_uflow>:
 8009d9c:	b508      	push	{r3, lr}
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009da4:	f7ff ffe6 	bl	8009d74 <xflow>
 8009da8:	ec41 0b10 	vmov	d0, r0, r1
 8009dac:	bd08      	pop	{r3, pc}

08009dae <__math_oflow>:
 8009dae:	b508      	push	{r3, lr}
 8009db0:	2200      	movs	r2, #0
 8009db2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009db6:	f7ff ffdd 	bl	8009d74 <xflow>
 8009dba:	ec41 0b10 	vmov	d0, r0, r1
 8009dbe:	bd08      	pop	{r3, pc}

08009dc0 <fabs>:
 8009dc0:	ec51 0b10 	vmov	r0, r1, d0
 8009dc4:	ee10 2a10 	vmov	r2, s0
 8009dc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dcc:	ec43 2b10 	vmov	d0, r2, r3
 8009dd0:	4770      	bx	lr

08009dd2 <finite>:
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	ed8d 0b00 	vstr	d0, [sp]
 8009dd8:	9801      	ldr	r0, [sp, #4]
 8009dda:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009dde:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009de2:	0fc0      	lsrs	r0, r0, #31
 8009de4:	b002      	add	sp, #8
 8009de6:	4770      	bx	lr

08009de8 <scalbn>:
 8009de8:	b570      	push	{r4, r5, r6, lr}
 8009dea:	ec55 4b10 	vmov	r4, r5, d0
 8009dee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009df2:	4606      	mov	r6, r0
 8009df4:	462b      	mov	r3, r5
 8009df6:	b99a      	cbnz	r2, 8009e20 <scalbn+0x38>
 8009df8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009dfc:	4323      	orrs	r3, r4
 8009dfe:	d036      	beq.n	8009e6e <scalbn+0x86>
 8009e00:	4b39      	ldr	r3, [pc, #228]	; (8009ee8 <scalbn+0x100>)
 8009e02:	4629      	mov	r1, r5
 8009e04:	ee10 0a10 	vmov	r0, s0
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f7f6 fbfd 	bl	8000608 <__aeabi_dmul>
 8009e0e:	4b37      	ldr	r3, [pc, #220]	; (8009eec <scalbn+0x104>)
 8009e10:	429e      	cmp	r6, r3
 8009e12:	4604      	mov	r4, r0
 8009e14:	460d      	mov	r5, r1
 8009e16:	da10      	bge.n	8009e3a <scalbn+0x52>
 8009e18:	a32b      	add	r3, pc, #172	; (adr r3, 8009ec8 <scalbn+0xe0>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	e03a      	b.n	8009e96 <scalbn+0xae>
 8009e20:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009e24:	428a      	cmp	r2, r1
 8009e26:	d10c      	bne.n	8009e42 <scalbn+0x5a>
 8009e28:	ee10 2a10 	vmov	r2, s0
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	4629      	mov	r1, r5
 8009e30:	f7f6 fa34 	bl	800029c <__adddf3>
 8009e34:	4604      	mov	r4, r0
 8009e36:	460d      	mov	r5, r1
 8009e38:	e019      	b.n	8009e6e <scalbn+0x86>
 8009e3a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e3e:	460b      	mov	r3, r1
 8009e40:	3a36      	subs	r2, #54	; 0x36
 8009e42:	4432      	add	r2, r6
 8009e44:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009e48:	428a      	cmp	r2, r1
 8009e4a:	dd08      	ble.n	8009e5e <scalbn+0x76>
 8009e4c:	2d00      	cmp	r5, #0
 8009e4e:	a120      	add	r1, pc, #128	; (adr r1, 8009ed0 <scalbn+0xe8>)
 8009e50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e54:	da1c      	bge.n	8009e90 <scalbn+0xa8>
 8009e56:	a120      	add	r1, pc, #128	; (adr r1, 8009ed8 <scalbn+0xf0>)
 8009e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e5c:	e018      	b.n	8009e90 <scalbn+0xa8>
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	dd08      	ble.n	8009e74 <scalbn+0x8c>
 8009e62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009e6e:	ec45 4b10 	vmov	d0, r4, r5
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
 8009e74:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009e78:	da19      	bge.n	8009eae <scalbn+0xc6>
 8009e7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009e7e:	429e      	cmp	r6, r3
 8009e80:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009e84:	dd0a      	ble.n	8009e9c <scalbn+0xb4>
 8009e86:	a112      	add	r1, pc, #72	; (adr r1, 8009ed0 <scalbn+0xe8>)
 8009e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e2      	bne.n	8009e56 <scalbn+0x6e>
 8009e90:	a30f      	add	r3, pc, #60	; (adr r3, 8009ed0 <scalbn+0xe8>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 fbb7 	bl	8000608 <__aeabi_dmul>
 8009e9a:	e7cb      	b.n	8009e34 <scalbn+0x4c>
 8009e9c:	a10a      	add	r1, pc, #40	; (adr r1, 8009ec8 <scalbn+0xe0>)
 8009e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0b8      	beq.n	8009e18 <scalbn+0x30>
 8009ea6:	a10e      	add	r1, pc, #56	; (adr r1, 8009ee0 <scalbn+0xf8>)
 8009ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eac:	e7b4      	b.n	8009e18 <scalbn+0x30>
 8009eae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009eb2:	3236      	adds	r2, #54	; 0x36
 8009eb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009eb8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	4b0c      	ldr	r3, [pc, #48]	; (8009ef0 <scalbn+0x108>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	e7e8      	b.n	8009e96 <scalbn+0xae>
 8009ec4:	f3af 8000 	nop.w
 8009ec8:	c2f8f359 	.word	0xc2f8f359
 8009ecc:	01a56e1f 	.word	0x01a56e1f
 8009ed0:	8800759c 	.word	0x8800759c
 8009ed4:	7e37e43c 	.word	0x7e37e43c
 8009ed8:	8800759c 	.word	0x8800759c
 8009edc:	fe37e43c 	.word	0xfe37e43c
 8009ee0:	c2f8f359 	.word	0xc2f8f359
 8009ee4:	81a56e1f 	.word	0x81a56e1f
 8009ee8:	43500000 	.word	0x43500000
 8009eec:	ffff3cb0 	.word	0xffff3cb0
 8009ef0:	3c900000 	.word	0x3c900000

08009ef4 <_init>:
 8009ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef6:	bf00      	nop
 8009ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009efa:	bc08      	pop	{r3}
 8009efc:	469e      	mov	lr, r3
 8009efe:	4770      	bx	lr

08009f00 <_fini>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	bf00      	nop
 8009f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f06:	bc08      	pop	{r3}
 8009f08:	469e      	mov	lr, r3
 8009f0a:	4770      	bx	lr
