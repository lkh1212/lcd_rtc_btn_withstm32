
LCD_DHT_RTC_BTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c3c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006df0  08006df0  00016df0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee0  08006ee0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ee8  08006ee8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee8  08006ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006ef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000d28  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d98  20000d98  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000207d2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003892  00000000  00000000  00040872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001990  00000000  00000000  00044108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001850  00000000  00000000  00045a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027973  00000000  00000000  000472e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d4ab  00000000  00000000  0006ec5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efc0a  00000000  00000000  0008c106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bd10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007808  00000000  00000000  0017bd60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006dd4 	.word	0x08006dd4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08006dd4 	.word	0x08006dd4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	0000      	movs	r0, r0
	...

08000eb0 <getTemp>:
 */

#include "main.h"

void getTemp(void)	//PC2
{
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b098      	sub	sp, #96	; 0x60
 8000eb4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef tempgpio;

	uint8_t in_num[40] = {0};
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2224      	movs	r2, #36	; 0x24
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fc04 	bl	80056d0 <memset>
	uint32_t bit1 = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t bit2 = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	64fb      	str	r3, [r7, #76]	; 0x4c


	//1. 포트에서 1~10ms 동안 LOW 를 출력
	tempgpio.Pin = GPIO_PIN_2;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	tempgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
	tempgpio.Pull = GPIO_PULLUP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOC, &tempgpio);
 8000edc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4889      	ldr	r0, [pc, #548]	; (8001108 <getTemp+0x258>)
 8000ee4:	f001 fc0c 	bl	8002700 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2104      	movs	r1, #4
 8000eec:	4886      	ldr	r0, [pc, #536]	; (8001108 <getTemp+0x258>)
 8000eee:	f001 fdcb 	bl	8002a88 <HAL_GPIO_WritePin>
	HAL_Delay(3); // 1~10ms 지연
 8000ef2:	2003      	movs	r0, #3
 8000ef4:	f000 ffd6 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2104      	movs	r1, #4
 8000efc:	4882      	ldr	r0, [pc, #520]	; (8001108 <getTemp+0x258>)
 8000efe:	f001 fdc3 	bl	8002a88 <HAL_GPIO_WritePin>

	//2.40us동안 딜레이 (HIGH상태)

	delay_us(35);
 8000f02:	2023      	movs	r0, #35	; 0x23
 8000f04:	f000 fc50 	bl	80017a8 <delay_us>
	//3.핀을 입력으로 바꾸고 80us동안 LOW 입력
	tempgpio.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &tempgpio);
 8000f0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f10:	4619      	mov	r1, r3
 8000f12:	487d      	ldr	r0, [pc, #500]	; (8001108 <getTemp+0x258>)
 8000f14:	f001 fbf4 	bl	8002700 <HAL_GPIO_Init>
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_SET);
 8000f18:	bf00      	nop
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	487a      	ldr	r0, [pc, #488]	; (8001108 <getTemp+0x258>)
 8000f1e:	f001 fd9b 	bl	8002a58 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d1f8      	bne.n	8000f1a <getTemp+0x6a>

	//4.80us 동안 HIGH 입력
	while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_RESET);
 8000f28:	bf00      	nop
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4876      	ldr	r0, [pc, #472]	; (8001108 <getTemp+0x258>)
 8000f2e:	f001 fd93 	bl	8002a58 <HAL_GPIO_ReadPin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f8      	bne.n	8000f2a <getTemp+0x7a>

	//5.40비트 수신
	for(uint32_t i=0; i<40; i++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000f3c:	e034      	b.n	8000fa8 <getTemp+0xf8>
	{
		bit1 = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	653b      	str	r3, [r7, #80]	; 0x50
		bit2 = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
		__HAL_TIM_SET_COUNTER(&htim10,0);
 8000f46:	4b71      	ldr	r3, [pc, #452]	; (800110c <getTemp+0x25c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_SET);
 8000f4e:	bf00      	nop
 8000f50:	2104      	movs	r1, #4
 8000f52:	486d      	ldr	r0, [pc, #436]	; (8001108 <getTemp+0x258>)
 8000f54:	f001 fd80 	bl	8002a58 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d1f8      	bne.n	8000f50 <getTemp+0xa0>
		bit1 = __HAL_TIM_GET_COUNTER(&htim10);
 8000f5e:	4b6b      	ldr	r3, [pc, #428]	; (800110c <getTemp+0x25c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	653b      	str	r3, [r7, #80]	; 0x50
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) != GPIO_PIN_RESET);
 8000f66:	bf00      	nop
 8000f68:	2104      	movs	r1, #4
 8000f6a:	4867      	ldr	r0, [pc, #412]	; (8001108 <getTemp+0x258>)
 8000f6c:	f001 fd74 	bl	8002a58 <HAL_GPIO_ReadPin>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f8      	bne.n	8000f68 <getTemp+0xb8>
		bit2 = __HAL_TIM_GET_COUNTER(&htim10);
 8000f76:	4b65      	ldr	r3, [pc, #404]	; (800110c <getTemp+0x25c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (bit2 - bit1 > 30)
 8000f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b1e      	cmp	r3, #30
 8000f86:	d906      	bls.n	8000f96 <getTemp+0xe6>
		{
			in_num[i] = 1;
 8000f88:	f107 0210 	add.w	r2, r7, #16
 8000f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f8e:	4413      	add	r3, r2
 8000f90:	2201      	movs	r2, #1
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	e005      	b.n	8000fa2 <getTemp+0xf2>
		}else
		{
			in_num[i] = 0;
 8000f96:	f107 0210 	add.w	r2, r7, #16
 8000f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f9c:	4413      	add	r3, r2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	for(uint32_t i=0; i<40; i++)
 8000fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000faa:	2b27      	cmp	r3, #39	; 0x27
 8000fac:	d9c7      	bls.n	8000f3e <getTemp+0x8e>
		}

	}

	uint16_t temp = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t humi = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	for (int32_t i=31; i>=0; i--)
 8000fba:	231f      	movs	r3, #31
 8000fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8000fbe:	e05c      	b.n	800107a <getTemp+0x1ca>
	{
		if (i > 15)
 8000fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fc2:	2b0f      	cmp	r3, #15
 8000fc4:	dd2b      	ble.n	800101e <getTemp+0x16e>
		{
			if(in_num[i] == 1)
 8000fc6:	f107 0210 	add.w	r2, r7, #16
 8000fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d14f      	bne.n	8001074 <getTemp+0x1c4>
			{
				//제곱은 다른 기호
				//humi += 1*(2^(31-i));
				temp += 1 * pow(2, 31-i);
 8000fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd6:	f1c3 031f 	rsb	r3, r3, #31
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff faaa 	bl	8000534 <__aeabi_i2d>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	ec43 2b11 	vmov	d1, r2, r3
 8000fe8:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001100 <getTemp+0x250>
 8000fec:	f004 ffd6 	bl	8005f9c <pow>
 8000ff0:	ec55 4b10 	vmov	r4, r5, d0
 8000ff4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa9b 	bl	8000534 <__aeabi_i2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff f949 	bl	800029c <__adddf3>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fda9 	bl	8000b68 <__aeabi_d2uiz>
 8001016:	4603      	mov	r3, r0
 8001018:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800101c:	e02a      	b.n	8001074 <getTemp+0x1c4>
			}
		}
		else
		{
			if(in_num[i] == 1)
 800101e:	f107 0210 	add.w	r2, r7, #16
 8001022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001024:	4413      	add	r3, r2
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d123      	bne.n	8001074 <getTemp+0x1c4>
			{
				humi += 1 * pow(2, 15-i);
 800102c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800102e:	f1c3 030f 	rsb	r3, r3, #15
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa7e 	bl	8000534 <__aeabi_i2d>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b11 	vmov	d1, r2, r3
 8001040:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8001100 <getTemp+0x250>
 8001044:	f004 ffaa 	bl	8005f9c <pow>
 8001048:	ec55 4b10 	vmov	r4, r5, d0
 800104c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa6f 	bl	8000534 <__aeabi_i2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4620      	mov	r0, r4
 800105c:	4629      	mov	r1, r5
 800105e:	f7ff f91d 	bl	800029c <__adddf3>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd7d 	bl	8000b68 <__aeabi_d2uiz>
 800106e:	4603      	mov	r3, r0
 8001070:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	for (int32_t i=31; i>=0; i--)
 8001074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001076:	3b01      	subs	r3, #1
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
 800107a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800107c:	2b00      	cmp	r3, #0
 800107e:	da9f      	bge.n	8000fc0 <getTemp+0x110>
			}
		}
	}
	temp /= 10;
 8001080:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <getTemp+0x260>)
 8001086:	fba2 2303 	umull	r2, r3, r2, r3
 800108a:	08db      	lsrs	r3, r3, #3
 800108c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	humi /= 10;
 8001090:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001094:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <getTemp+0x260>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	char temp_str [5] ;
	char humi_str [5] ;
	sprintf(temp_str,"%d",temp);
 80010a0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	491a      	ldr	r1, [pc, #104]	; (8001114 <getTemp+0x264>)
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 fbbc 	bl	8005828 <siprintf>
	sprintf(humi_str,"%d",humi);
 80010b0:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80010b4:	463b      	mov	r3, r7
 80010b6:	4917      	ldr	r1, [pc, #92]	; (8001114 <getTemp+0x264>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 fbb5 	bl	8005828 <siprintf>
	lcd_set_cursor(1, 1);
 80010be:	2101      	movs	r1, #1
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 f867 	bl	8001194 <lcd_set_cursor>
	lcd_string_write("temp = ");
 80010c6:	4814      	ldr	r0, [pc, #80]	; (8001118 <getTemp+0x268>)
 80010c8:	f000 f8a4 	bl	8001214 <lcd_string_write>
	lcd_string_write(temp_str);
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f89f 	bl	8001214 <lcd_string_write>
	HAL_Delay(50);
 80010d6:	2032      	movs	r0, #50	; 0x32
 80010d8:	f000 fee4 	bl	8001ea4 <HAL_Delay>
	lcd_set_cursor(2, 1);
 80010dc:	2101      	movs	r1, #1
 80010de:	2002      	movs	r0, #2
 80010e0:	f000 f858 	bl	8001194 <lcd_set_cursor>
	lcd_string_write("humi = ");
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <getTemp+0x26c>)
 80010e6:	f000 f895 	bl	8001214 <lcd_string_write>
	lcd_string_write(humi_str);
 80010ea:	463b      	mov	r3, r7
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f891 	bl	8001214 <lcd_string_write>

}
 80010f2:	bf00      	nop
 80010f4:	3760      	adds	r7, #96	; 0x60
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bdb0      	pop	{r4, r5, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	f3af 8000 	nop.w
 8001100:	00000000 	.word	0x00000000
 8001104:	40000000 	.word	0x40000000
 8001108:	40020800 	.word	0x40020800
 800110c:	20000308 	.word	0x20000308
 8001110:	cccccccd 	.word	0xcccccccd
 8001114:	08006df0 	.word	0x08006df0
 8001118:	08006df4 	.word	0x08006df4
 800111c:	08006dfc 	.word	0x08006dfc

08001120 <I2C_LCD_Init>:
#include "main.h"



void I2C_LCD_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	HAL_Delay(40); // 1. 켜지고 40ms이상 대기
 8001124:	2028      	movs	r0, #40	; 0x28
 8001126:	f000 febd 	bl	8001ea4 <HAL_Delay>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 800112a:	2030      	movs	r0, #48	; 0x30
 800112c:	f000 f8a8 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	HAL_Delay(5);	// 2. 4.1ms 이상 대기
 8001130:	2005      	movs	r0, #5
 8001132:	f000 feb7 	bl	8001ea4 <HAL_Delay>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 8001136:	2030      	movs	r0, #48	; 0x30
 8001138:	f000 f8a2 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	delay_us(150); // 3. 100us 대기
 800113c:	2096      	movs	r0, #150	; 0x96
 800113e:	f000 fb33 	bl	80017a8 <delay_us>
	I2C_LCD_4bit_cmd_WRITE(0x30);
 8001142:	2030      	movs	r0, #48	; 0x30
 8001144:	f000 f89c 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x20);
 8001148:	2020      	movs	r0, #32
 800114a:	f000 f899 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x20);
 800114e:	2020      	movs	r0, #32
 8001150:	f000 f896 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x80);
 8001154:	2080      	movs	r0, #128	; 0x80
 8001156:	f000 f893 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x00);
 800115a:	2000      	movs	r0, #0
 800115c:	f000 f890 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0xE0);
 8001160:	20e0      	movs	r0, #224	; 0xe0
 8001162:	f000 f88d 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	lcd_display_clear();
 8001166:	f000 f808 	bl	800117a <lcd_display_clear>
	I2C_LCD_4bit_cmd_WRITE(0x00);
 800116a:	2000      	movs	r0, #0
 800116c:	f000 f888 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x60);
 8001170:	2060      	movs	r0, #96	; 0x60
 8001172:	f000 f885 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <lcd_display_clear>:

void lcd_display_clear(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
	//디스플레이 클리어 커맨드 전송
	I2C_LCD_4bit_cmd_WRITE(0x00);
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f87e 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE(0x10);
 8001184:	2010      	movs	r0, #16
 8001186:	f000 f87b 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	//2ms의 딜레이 줘야 함
	HAL_Delay(2);
 800118a:	2002      	movs	r0, #2
 800118c:	f000 fe8a 	bl	8001ea4 <HAL_Delay>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <lcd_set_cursor>:
	HAL_Delay(2);
}


void lcd_set_cursor(uint8_t row, uint8_t column)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	460a      	mov	r2, r1
 800119e:	71fb      	strb	r3, [r7, #7]
 80011a0:	4613      	mov	r3, r2
 80011a2:	71bb      	strb	r3, [r7, #6]
	column--;
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	71bb      	strb	r3, [r7, #6]
	switch(row)
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d002      	beq.n	80011b6 <lcd_set_cursor+0x22>
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d009      	beq.n	80011c8 <lcd_set_cursor+0x34>
			//커서를 두번째 행에 설정하고 인덱스를 추가
			//0b11000000의 데이터를 설정하여 2행의 첫밴째 열(0x40)로 커서를 설정
			lcd_cmd_write((column |= 0xC0));
			break;
		default:
			break;
 80011b4:	e011      	b.n	80011da <lcd_set_cursor+0x46>
			lcd_cmd_write((column |= 0x80));
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011bc:	71bb      	strb	r3, [r7, #6]
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f80e 	bl	80011e2 <lcd_cmd_write>
			break;
 80011c6:	e008      	b.n	80011da <lcd_set_cursor+0x46>
			lcd_cmd_write((column |= 0xC0));
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80011ce:	71bb      	strb	r3, [r7, #6]
 80011d0:	79bb      	ldrb	r3, [r7, #6]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f805 	bl	80011e2 <lcd_cmd_write>
			break;
 80011d8:	bf00      	nop
	}
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <lcd_cmd_write>:


void lcd_cmd_write(uint8_t cmd)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_4bit_cmd_WRITE(cmd & 0xF0); // 상위 4비트
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f023 030f 	bic.w	r3, r3, #15
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 f843 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	I2C_LCD_4bit_cmd_WRITE((cmd << 4) & 0xF0); // 하위 4비트
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f83d 	bl	8001280 <I2C_LCD_4bit_cmd_WRITE>
	HAL_Delay(2);
 8001206:	2002      	movs	r0, #2
 8001208:	f000 fe4c 	bl	8001ea4 <HAL_Delay>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <lcd_string_write>:

void lcd_string_write(char *str)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	for(int i=0 ; str[i];i++)
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e009      	b.n	8001236 <lcd_string_write+0x22>
	{
		lcd_data_write(str[i]);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f80e 	bl	800124c <lcd_data_write>
	for(int i=0 ; str[i];i++)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1ef      	bne.n	8001222 <lcd_string_write+0xe>
	}
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <lcd_data_write>:
void lcd_data_write(uint8_t cmd)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_4bit_data_WRITE((char)cmd & 0xF0); // 상위 4비트
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f023 030f 	bic.w	r3, r3, #15
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f836 	bl	80012d0 <I2C_LCD_4bit_data_WRITE>
	I2C_LCD_4bit_data_WRITE(((char)cmd << 4) & 0xF0); // 하위 4비트
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f830 	bl	80012d0 <I2C_LCD_4bit_data_WRITE>
	HAL_Delay(2);
 8001270:	2002      	movs	r0, #2
 8001272:	f000 fe17 	bl	8001ea4 <HAL_Delay>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <I2C_LCD_4bit_cmd_WRITE>:

void I2C_LCD_4bit_cmd_WRITE(uint8_t cmd)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af02      	add	r7, sp, #8
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_s;
	uint8_t cmd_L[2];

	cmd_s = cmd & 0xF0; // 상위 4비트
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	f023 030f 	bic.w	r3, r3, #15
 8001290:	73fb      	strb	r3, [r7, #15]

	cmd_L[0] = cmd_s | 0x0C; //En = 1
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	f043 030c 	orr.w	r3, r3, #12
 8001298:	b2db      	uxtb	r3, r3
 800129a:	733b      	strb	r3, [r7, #12]
	cmd_L[1] = cmd_s | 0x08; //En = 0
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	737b      	strb	r3, [r7, #13]
	//데이터 전송 시 중간에 En 핀을 High->Low로 설정하여 데이터 전송활성화

	if(HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, cmd_L, sizeof(cmd_L), HAL_MAX_DELAY) != HAL_OK)
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2302      	movs	r3, #2
 80012b2:	214e      	movs	r1, #78	; 0x4e
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <I2C_LCD_4bit_cmd_WRITE+0x4c>)
 80012b6:	f001 fd45 	bl	8002d44 <HAL_I2C_Master_Transmit>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <I2C_LCD_4bit_cmd_WRITE+0x44>
	{
		Error_Handler();
 80012c0:	f000 fa9c 	bl	80017fc <Error_Handler>
	}
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200002b4 	.word	0x200002b4

080012d0 <I2C_LCD_4bit_data_WRITE>:


void I2C_LCD_4bit_data_WRITE(uint8_t data)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u;
	uint8_t data_W[2];

	data_u = data & 0xF0; // 상위 4비트
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	f023 030f 	bic.w	r3, r3, #15
 80012e0:	73fb      	strb	r3, [r7, #15]

	//데이터를 전송하므로 rs = 1이여야 함
	data_W[0] = data_u | 0b00001101; //En = 1
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f043 030d 	orr.w	r3, r3, #13
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	733b      	strb	r3, [r7, #12]
	data_W[1] = data_u | 0b00001001; //En = 0
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	f043 0309 	orr.w	r3, r3, #9
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	737b      	strb	r3, [r7, #13]
	//데이터 전송 시 중간에 En 핀을 High->Low로 설정하여 데이터 전송활성화

	if(HAL_I2C_Master_Transmit(&hi2c1, LCD_ADDR, data_W, sizeof(data_W), HAL_MAX_DELAY) != HAL_OK)
 80012f6:	f107 020c 	add.w	r2, r7, #12
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2302      	movs	r3, #2
 8001302:	214e      	movs	r1, #78	; 0x4e
 8001304:	4805      	ldr	r0, [pc, #20]	; (800131c <I2C_LCD_4bit_data_WRITE+0x4c>)
 8001306:	f001 fd1d 	bl	8002d44 <HAL_I2C_Master_Transmit>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <I2C_LCD_4bit_data_WRITE+0x44>
	{
		Error_Handler();
 8001310:	f000 fa74 	bl	80017fc <Error_Handler>
	}
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200002b4 	.word	0x200002b4

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fd7c 	bl	8001e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f81c 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f98e 	bl	800164c <MX_GPIO_Init>
  MX_ETH_Init();
 8001330:	f000 f882 	bl	8001438 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001334:	f000 f932 	bl	800159c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001338:	f000 f95a 	bl	80015f0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 800133c:	f000 f90a 	bl	8001554 <MX_TIM10_Init>
  MX_I2C1_Init();
 8001340:	f000 f8c8 	bl	80014d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10); // us_timer start
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <main+0x40>)
 8001346:	f002 feb7 	bl	80040b8 <HAL_TIM_Base_Start>
  I2C_LCD_Init();	// lcd init
 800134a:	f7ff fee9 	bl	8001120 <I2C_LCD_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800134e:	f003 ff43 	bl	80051d8 <osKernelInitialize>
  /* USER CODE BEGIN WHILE */
  //1. basically get dht22 data
  while (1)
  {
    /* USER CODE END WHILE */
	  getTemp();
 8001352:	f7ff fdad 	bl	8000eb0 <getTemp>
	  HAL_Delay(2000);
 8001356:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800135a:	f000 fda3 	bl	8001ea4 <HAL_Delay>
	  getTemp();
 800135e:	e7f8      	b.n	8001352 <main+0x32>
 8001360:	20000308 	.word	0x20000308

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b094      	sub	sp, #80	; 0x50
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	2230      	movs	r2, #48	; 0x30
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f004 f9ac 	bl	80056d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <SystemClock_Config+0xcc>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	4a27      	ldr	r2, [pc, #156]	; (8001430 <SystemClock_Config+0xcc>)
 8001392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001396:	6413      	str	r3, [r2, #64]	; 0x40
 8001398:	4b25      	ldr	r3, [pc, #148]	; (8001430 <SystemClock_Config+0xcc>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a21      	ldr	r2, [pc, #132]	; (8001434 <SystemClock_Config+0xd0>)
 80013ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <SystemClock_Config+0xd0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ca:	2302      	movs	r3, #2
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013d4:	2304      	movs	r3, #4
 80013d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013d8:	23a8      	movs	r3, #168	; 0xa8
 80013da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013e0:	2307      	movs	r3, #7
 80013e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0320 	add.w	r3, r7, #32
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 f94b 	bl	8003684 <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013f4:	f000 fa02 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fc:	2302      	movs	r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001404:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001408:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	2105      	movs	r1, #5
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fbac 	bl	8003b74 <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001422:	f000 f9eb 	bl	80017fc <Error_Handler>
  }
}
 8001426:	bf00      	nop
 8001428:	3750      	adds	r7, #80	; 0x50
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_ETH_Init+0x84>)
 800143e:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <MX_ETH_Init+0x88>)
 8001440:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <MX_ETH_Init+0x8c>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_ETH_Init+0x8c>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <MX_ETH_Init+0x8c>)
 8001450:	22e1      	movs	r2, #225	; 0xe1
 8001452:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_ETH_Init+0x8c>)
 8001456:	2200      	movs	r2, #0
 8001458:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_ETH_Init+0x8c>)
 800145c:	2200      	movs	r2, #0
 800145e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_ETH_Init+0x8c>)
 8001462:	2200      	movs	r2, #0
 8001464:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_ETH_Init+0x84>)
 8001468:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <MX_ETH_Init+0x8c>)
 800146a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_ETH_Init+0x84>)
 800146e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001472:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_ETH_Init+0x84>)
 8001476:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <MX_ETH_Init+0x90>)
 8001478:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_ETH_Init+0x84>)
 800147c:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_ETH_Init+0x94>)
 800147e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_ETH_Init+0x84>)
 8001482:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001486:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_ETH_Init+0x84>)
 800148a:	f000 fe11 	bl	80020b0 <HAL_ETH_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001494:	f000 f9b2 	bl	80017fc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001498:	2238      	movs	r2, #56	; 0x38
 800149a:	2100      	movs	r1, #0
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_ETH_Init+0x98>)
 800149e:	f004 f917 	bl	80056d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_ETH_Init+0x98>)
 80014a4:	2221      	movs	r2, #33	; 0x21
 80014a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_ETH_Init+0x98>)
 80014aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80014ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_ETH_Init+0x98>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000204 	.word	0x20000204
 80014c0:	40028000 	.word	0x40028000
 80014c4:	200008a0 	.word	0x200008a0
 80014c8:	20000164 	.word	0x20000164
 80014cc:	200000c4 	.word	0x200000c4
 80014d0:	2000008c 	.word	0x2000008c

080014d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_I2C1_Init+0x74>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <MX_I2C1_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <MX_I2C1_Init+0x7c>)
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_I2C1_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_I2C1_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_I2C1_Init+0x74>)
 80014f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_I2C1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_I2C1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <MX_I2C1_Init+0x74>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_I2C1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_I2C1_Init+0x74>)
 8001512:	f001 fad3 	bl	8002abc <HAL_I2C_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800151c:	f000 f96e 	bl	80017fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001520:	2100      	movs	r1, #0
 8001522:	4809      	ldr	r0, [pc, #36]	; (8001548 <MX_I2C1_Init+0x74>)
 8001524:	f001 ff15 	bl	8003352 <HAL_I2CEx_ConfigAnalogFilter>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800152e:	f000 f965 	bl	80017fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001532:	2100      	movs	r1, #0
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_I2C1_Init+0x74>)
 8001536:	f001 ff48 	bl	80033ca <HAL_I2CEx_ConfigDigitalFilter>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001540:	f000 f95c 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200002b4 	.word	0x200002b4
 800154c:	40005400 	.word	0x40005400
 8001550:	000186a0 	.word	0x000186a0

08001554 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_TIM10_Init+0x40>)
 800155a:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <MX_TIM10_Init+0x44>)
 800155c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <MX_TIM10_Init+0x40>)
 8001560:	22a7      	movs	r2, #167	; 0xa7
 8001562:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_TIM10_Init+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xffff-1;
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <MX_TIM10_Init+0x40>)
 800156c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001570:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_TIM10_Init+0x40>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_TIM10_Init+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_TIM10_Init+0x40>)
 8001580:	f002 fd4a 	bl	8004018 <HAL_TIM_Base_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800158a:	f000 f937 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000308 	.word	0x20000308
 8001598:	40014400 	.word	0x40014400

0800159c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <MX_USART3_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015d4:	f003 f82c 	bl	8004630 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f000 f90d 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000350 	.word	0x20000350
 80015ec:	40004800 	.word	0x40004800

080015f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fe:	2204      	movs	r2, #4
 8001600:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001604:	2202      	movs	r2, #2
 8001606:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001610:	2202      	movs	r2, #2
 8001612:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001616:	2201      	movs	r2, #1
 8001618:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001628:	2201      	movs	r2, #1
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162e:	2200      	movs	r2, #0
 8001630:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001634:	f001 ff08 	bl	8003448 <HAL_PCD_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800163e:	f000 f8dd 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000394 	.word	0x20000394

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001652:	f107 031c 	add.w	r3, r7, #28
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <MX_GPIO_Init+0x14c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a4b      	ldr	r2, [pc, #300]	; (8001798 <MX_GPIO_Init+0x14c>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <MX_GPIO_Init+0x14c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	4b45      	ldr	r3, [pc, #276]	; (8001798 <MX_GPIO_Init+0x14c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a44      	ldr	r2, [pc, #272]	; (8001798 <MX_GPIO_Init+0x14c>)
 8001688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b42      	ldr	r3, [pc, #264]	; (8001798 <MX_GPIO_Init+0x14c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a36      	ldr	r2, [pc, #216]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b34      	ldr	r3, [pc, #208]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b29      	ldr	r3, [pc, #164]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a28      	ldr	r2, [pc, #160]	; (8001798 <MX_GPIO_Init+0x14c>)
 80016f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <MX_GPIO_Init+0x14c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001710:	4822      	ldr	r0, [pc, #136]	; (800179c <MX_GPIO_Init+0x150>)
 8001712:	f001 f9b9 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2140      	movs	r1, #64	; 0x40
 800171a:	4821      	ldr	r0, [pc, #132]	; (80017a0 <MX_GPIO_Init+0x154>)
 800171c:	f001 f9b4 	bl	8002a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	481b      	ldr	r0, [pc, #108]	; (80017a4 <MX_GPIO_Init+0x158>)
 8001738:	f000 ffe2 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800173c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4811      	ldr	r0, [pc, #68]	; (800179c <MX_GPIO_Init+0x150>)
 8001756:	f000 ffd3 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800175a:	2340      	movs	r3, #64	; 0x40
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175e:	2301      	movs	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <MX_GPIO_Init+0x154>)
 8001772:	f000 ffc5 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <MX_GPIO_Init+0x154>)
 800178a:	f000 ffb9 	bl	8002700 <HAL_GPIO_Init>

}
 800178e:	bf00      	nop
 8001790:	3730      	adds	r7, #48	; 0x30
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40020400 	.word	0x40020400
 80017a0:	40021800 	.word	0x40021800
 80017a4:	40020800 	.word	0x40020800

080017a8 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t number)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	//카운?�� 0?���??? ?��?��
	__HAL_TIM_SET_COUNTER(&htim10,0);
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <delay_us+0x2c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24

	//�???�??? 카운?���??? ?��?��?�� us보다 ?��?���??? 무한루프
	while(__HAL_TIM_GET_COUNTER(&htim10) < number);
 80017b8:	bf00      	nop
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <delay_us+0x2c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d8f9      	bhi.n	80017ba <delay_us+0x12>
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20000308 	.word	0x20000308

080017d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ea:	f000 fb3b 	bl	8001e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40001000 	.word	0x40001000

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	e7fe      	b.n	8001804 <Error_Handler+0x8>
	...

08001808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_MspInit+0x54>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_MspInit+0x54>)
 8001818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800181c:	6453      	str	r3, [r2, #68]	; 0x44
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_MspInit+0x54>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_MspInit+0x54>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_MspInit+0x54>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_MspInit+0x54>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	210f      	movs	r1, #15
 800184a:	f06f 0001 	mvn.w	r0, #1
 800184e:	f000 fc05 	bl	800205c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800

08001860 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	; 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a55      	ldr	r2, [pc, #340]	; (80019d4 <HAL_ETH_MspInit+0x174>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 80a4 	bne.w	80019cc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 800188e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001892:	6313      	str	r3, [r2, #48]	; 0x30
 8001894:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 8001896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	623b      	str	r3, [r7, #32]
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4a4b      	ldr	r2, [pc, #300]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80018ae:	6313      	str	r3, [r2, #48]	; 0x30
 80018b0:	4b49      	ldr	r3, [pc, #292]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a44      	ldr	r2, [pc, #272]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	4b3e      	ldr	r3, [pc, #248]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a3d      	ldr	r2, [pc, #244]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	4a36      	ldr	r2, [pc, #216]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6313      	str	r3, [r2, #48]	; 0x30
 8001904:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a2f      	ldr	r2, [pc, #188]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	4a28      	ldr	r2, [pc, #160]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 8001936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <HAL_ETH_MspInit+0x178>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001948:	2332      	movs	r3, #50	; 0x32
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001958:	230b      	movs	r3, #11
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800195c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001960:	4619      	mov	r1, r3
 8001962:	481e      	ldr	r0, [pc, #120]	; (80019dc <HAL_ETH_MspInit+0x17c>)
 8001964:	f000 fecc 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001968:	2386      	movs	r3, #134	; 0x86
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001978:	230b      	movs	r3, #11
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	4817      	ldr	r0, [pc, #92]	; (80019e0 <HAL_ETH_MspInit+0x180>)
 8001984:	f000 febc 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	2303      	movs	r3, #3
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199a:	230b      	movs	r3, #11
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a2:	4619      	mov	r1, r3
 80019a4:	480f      	ldr	r0, [pc, #60]	; (80019e4 <HAL_ETH_MspInit+0x184>)
 80019a6:	f000 feab 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80019aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019bc:	230b      	movs	r3, #11
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4808      	ldr	r0, [pc, #32]	; (80019e8 <HAL_ETH_MspInit+0x188>)
 80019c8:	f000 fe9a 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019cc:	bf00      	nop
 80019ce:	3738      	adds	r7, #56	; 0x38
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40028000 	.word	0x40028000
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40020400 	.word	0x40020400
 80019e8:	40021800 	.word	0x40021800

080019ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_I2C_MspInit+0x84>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12c      	bne.n	8001a68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a30:	2312      	movs	r3, #18
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <HAL_I2C_MspInit+0x8c>)
 8001a48:	f000 fe5a 	bl	8002700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_I2C_MspInit+0x88>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a68:	bf00      	nop
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40005400 	.word	0x40005400
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020400 	.word	0x40020400

08001a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <HAL_TIM_Base_MspInit+0x3c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10d      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_TIM_Base_MspInit+0x40>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_TIM_Base_MspInit+0x40>)
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_TIM_Base_MspInit+0x40>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40014400 	.word	0x40014400
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_UART_MspInit+0x84>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d12c      	bne.n	8001b3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b08:	f043 0308 	orr.w	r3, r3, #8
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_UART_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	; (8001b4c <HAL_UART_MspInit+0x8c>)
 8001b38:	f000 fde2 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b3c:	bf00      	nop
 8001b3e:	3728      	adds	r7, #40	; 0x28
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40004800 	.word	0x40004800
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020c00 	.word	0x40020c00

08001b50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]
 8001b66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b70:	d13f      	bne.n	8001bf2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b8e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	f107 0314 	add.w	r3, r7, #20
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4815      	ldr	r0, [pc, #84]	; (8001c00 <HAL_PCD_MspInit+0xb0>)
 8001bac:	f000 fda8 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480e      	ldr	r0, [pc, #56]	; (8001c00 <HAL_PCD_MspInit+0xb0>)
 8001bc6:	f000 fd9b 	bl	8002700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd4:	6353      	str	r3, [r2, #52]	; 0x34
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_PCD_MspInit+0xac>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020000 	.word	0x40020000

08001c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_InitTick+0xe4>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a32      	ldr	r2, [pc, #200]	; (8001ce8 <HAL_InitTick+0xe4>)
 8001c1e:	f043 0310 	orr.w	r3, r3, #16
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <HAL_InitTick+0xe4>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c30:	f107 0210 	add.w	r2, r7, #16
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 f9ba 	bl	8003fb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d103      	bne.n	8001c52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c4a:	f002 f98b 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 8001c4e:	6378      	str	r0, [r7, #52]	; 0x34
 8001c50:	e004      	b.n	8001c5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c52:	f002 f987 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 8001c56:	4603      	mov	r3, r0
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5e:	4a23      	ldr	r2, [pc, #140]	; (8001cec <HAL_InitTick+0xe8>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0c9b      	lsrs	r3, r3, #18
 8001c66:	3b01      	subs	r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <HAL_InitTick+0xf0>)
 8001c6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c78:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c90:	4817      	ldr	r0, [pc, #92]	; (8001cf0 <HAL_InitTick+0xec>)
 8001c92:	f002 f9c1 	bl	8004018 <HAL_TIM_Base_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d11b      	bne.n	8001cdc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ca4:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <HAL_InitTick+0xec>)
 8001ca6:	f002 fa6f 	bl	8004188 <HAL_TIM_Base_Start_IT>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001cb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d111      	bne.n	8001cdc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cb8:	2036      	movs	r0, #54	; 0x36
 8001cba:	f000 f9eb 	bl	8002094 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b0f      	cmp	r3, #15
 8001cc2:	d808      	bhi.n	8001cd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	2036      	movs	r0, #54	; 0x36
 8001cca:	f000 f9c7 	bl	800205c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cce:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_InitTick+0xf4>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e002      	b.n	8001cdc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3738      	adds	r7, #56	; 0x38
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	431bde83 	.word	0x431bde83
 8001cf0:	200008a8 	.word	0x200008a8
 8001cf4:	40001000 	.word	0x40001000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <NMI_Handler+0x4>

08001d02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d06:	e7fe      	b.n	8001d06 <HardFault_Handler+0x4>

08001d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler+0x4>

08001d0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <BusFault_Handler+0x4>

08001d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <UsageFault_Handler+0x4>

08001d1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <TIM6_DAC_IRQHandler+0x10>)
 8001d2e:	f002 fa9b 	bl	8004268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200008a8 	.word	0x200008a8

08001d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <_sbrk+0x5c>)
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <_sbrk+0x60>)
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <_sbrk+0x64>)
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <_sbrk+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d207      	bcs.n	8001d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d6c:	f003 fc76 	bl	800565c <__errno>
 8001d70:	4603      	mov	r3, r0
 8001d72:	220c      	movs	r2, #12
 8001d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	e009      	b.n	8001d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <_sbrk+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20030000 	.word	0x20030000
 8001d9c:	00000400 	.word	0x00000400
 8001da0:	200008f0 	.word	0x200008f0
 8001da4:	20000d98 	.word	0x20000d98

08001da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <SystemInit+0x20>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <SystemInit+0x20>)
 8001db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e04 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dd2:	490e      	ldr	r1, [pc, #56]	; (8001e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001de8:	4c0b      	ldr	r4, [pc, #44]	; (8001e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001df6:	f7ff ffd7 	bl	8001da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f003 fc35 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfe:	f7ff fa8f 	bl	8001320 <main>
  bx  lr    
 8001e02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e0c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001e10:	08006ef0 	.word	0x08006ef0
  ldr r2, =_sbss
 8001e14:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001e18:	20000d98 	.word	0x20000d98

08001e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_Init+0x40>)
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_Init+0x40>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_Init+0x40>)
 8001e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_Init+0x40>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f000 f8fc 	bl	8002046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4e:	200f      	movs	r0, #15
 8001e50:	f7ff fed8 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e54:	f7ff fcd8 	bl	8001808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008
 8001e88:	200008f4 	.word	0x200008f4

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	200008f4 	.word	0x200008f4

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff ffee 	bl	8001e8c <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffde 	bl	8001e8c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000008 	.word	0x20000008

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
         );
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff4c 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 8002054:	bf00      	nop
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206e:	f7ff ff61 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 8002072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	6978      	ldr	r0, [r7, #20]
 800207a:	f7ff ffb1 	bl	8001fe0 <NVIC_EncodePriority>
 800207e:	4602      	mov	r2, r0
 8002080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff80 	bl	8001f8c <__NVIC_SetPriority>
}
 800208c:	bf00      	nop
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff54 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06c      	b.n	800219c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2223      	movs	r2, #35	; 0x23
 80020d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fbc3 	bl	8001860 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <HAL_ETH_Init+0xf4>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	4a30      	ldr	r2, [pc, #192]	; (80021a4 <HAL_ETH_Init+0xf4>)
 80020e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ea:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_ETH_Init+0xf4>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020f6:	4b2c      	ldr	r3, [pc, #176]	; (80021a8 <HAL_ETH_Init+0xf8>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a2b      	ldr	r2, [pc, #172]	; (80021a8 <HAL_ETH_Init+0xf8>)
 80020fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002100:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_ETH_Init+0xf8>)
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	4927      	ldr	r1, [pc, #156]	; (80021a8 <HAL_ETH_Init+0xf8>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_ETH_Init+0xf8>)
 8002112:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800212a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800212c:	f7ff feae 	bl	8001e8c <HAL_GetTick>
 8002130:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002132:	e011      	b.n	8002158 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002134:	f7ff feaa 	bl	8001e8c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002142:	d909      	bls.n	8002158 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2204      	movs	r2, #4
 8002148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	22e0      	movs	r2, #224	; 0xe0
 8002150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e021      	b.n	800219c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1e4      	bne.n	8002134 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f958 	bl	8002420 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f9ff 	bl	8002574 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa55 	bl	8002626 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	461a      	mov	r2, r3
 8002182:	2100      	movs	r1, #0
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f9bd 	bl	8002504 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2210      	movs	r2, #16
 8002196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800

080021ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4b51      	ldr	r3, [pc, #324]	; (8002308 <ETH_SetMACConfig+0x15c>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	7c1b      	ldrb	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <ETH_SetMACConfig+0x28>
 80021ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021d2:	e000      	b.n	80021d6 <ETH_SetMACConfig+0x2a>
 80021d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7c5b      	ldrb	r3, [r3, #17]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <ETH_SetMACConfig+0x38>
 80021de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021e2:	e000      	b.n	80021e6 <ETH_SetMACConfig+0x3a>
 80021e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7fdb      	ldrb	r3, [r3, #31]
 80021f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	7f92      	ldrb	r2, [r2, #30]
 8002200:	2a00      	cmp	r2, #0
 8002202:	d102      	bne.n	800220a <ETH_SetMACConfig+0x5e>
 8002204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002208:	e000      	b.n	800220c <ETH_SetMACConfig+0x60>
 800220a:	2200      	movs	r2, #0
                        macconf->Speed |
 800220c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7f1b      	ldrb	r3, [r3, #28]
 8002212:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002214:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800221a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	791b      	ldrb	r3, [r3, #4]
 8002220:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002222:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	f892 2020 	ldrb.w	r2, [r2, #32]
 800222a:	2a00      	cmp	r2, #0
 800222c:	d102      	bne.n	8002234 <ETH_SetMACConfig+0x88>
 800222e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002232:	e000      	b.n	8002236 <ETH_SetMACConfig+0x8a>
 8002234:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002236:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7bdb      	ldrb	r3, [r3, #15]
 800223c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800223e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002244:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800224c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800224e:	4313      	orrs	r3, r2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002266:	2001      	movs	r0, #1
 8002268:	f7ff fe1c 	bl	8001ea4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002292:	2a00      	cmp	r2, #0
 8002294:	d101      	bne.n	800229a <ETH_SetMACConfig+0xee>
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	e000      	b.n	800229c <ETH_SetMACConfig+0xf0>
 800229a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800229c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80022aa:	2a01      	cmp	r2, #1
 80022ac:	d101      	bne.n	80022b2 <ETH_SetMACConfig+0x106>
 80022ae:	2208      	movs	r2, #8
 80022b0:	e000      	b.n	80022b4 <ETH_SetMACConfig+0x108>
 80022b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80022bc:	2a01      	cmp	r2, #1
 80022be:	d101      	bne.n	80022c4 <ETH_SetMACConfig+0x118>
 80022c0:	2204      	movs	r2, #4
 80022c2:	e000      	b.n	80022c6 <ETH_SetMACConfig+0x11a>
 80022c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80022ce:	2a01      	cmp	r2, #1
 80022d0:	d101      	bne.n	80022d6 <ETH_SetMACConfig+0x12a>
 80022d2:	2202      	movs	r2, #2
 80022d4:	e000      	b.n	80022d8 <ETH_SetMACConfig+0x12c>
 80022d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022d8:	4313      	orrs	r3, r2
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff fdd7 	bl	8001ea4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	619a      	str	r2, [r3, #24]
}
 80022fe:	bf00      	nop
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	ff20810f 	.word	0xff20810f

0800230c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4b3d      	ldr	r3, [pc, #244]	; (800241c <ETH_SetDMAConfig+0x110>)
 8002326:	4013      	ands	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7b1b      	ldrb	r3, [r3, #12]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <ETH_SetDMAConfig+0x2c>
 8002332:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002336:	e000      	b.n	800233a <ETH_SetDMAConfig+0x2e>
 8002338:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	7b5b      	ldrb	r3, [r3, #13]
 800233e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002340:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	7f52      	ldrb	r2, [r2, #29]
 8002346:	2a00      	cmp	r2, #0
 8002348:	d102      	bne.n	8002350 <ETH_SetDMAConfig+0x44>
 800234a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800234e:	e000      	b.n	8002352 <ETH_SetDMAConfig+0x46>
 8002350:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002352:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	7b9b      	ldrb	r3, [r3, #14]
 8002358:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800235a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002360:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	7f1b      	ldrb	r3, [r3, #28]
 8002366:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002368:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	7f9b      	ldrb	r3, [r3, #30]
 800236e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002370:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002376:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800237e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002380:	4313      	orrs	r3, r2
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002390:	461a      	mov	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a2:	2001      	movs	r0, #1
 80023a4:	f7ff fd7e 	bl	8001ea4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	791b      	ldrb	r3, [r3, #4]
 80023ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff fd4f 	bl	8001ea4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6013      	str	r3, [r2, #0]
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	f8de3f23 	.word	0xf8de3f23

08002420 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b0a6      	sub	sp, #152	; 0x98
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002434:	2300      	movs	r3, #0
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800243e:	2301      	movs	r3, #1
 8002440:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800245c:	2300      	movs	r3, #0
 800245e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002466:	2300      	movs	r3, #0
 8002468:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800248c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002494:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002498:	4619      	mov	r1, r3
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fe86 	bl	80021ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	4619      	mov	r1, r3
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ff08 	bl	800230c <ETH_SetDMAConfig>
}
 80024fc:	bf00      	nop
 80024fe:	3798      	adds	r7, #152	; 0x98
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3305      	adds	r3, #5
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	3204      	adds	r2, #4
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <ETH_MACAddressConfig+0x68>)
 8002526:	4413      	add	r3, r2
 8002528:	461a      	mov	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3303      	adds	r3, #3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	061a      	lsls	r2, r3, #24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3302      	adds	r3, #2
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	041b      	lsls	r3, r3, #16
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3301      	adds	r3, #1
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	4313      	orrs	r3, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <ETH_MACAddressConfig+0x6c>)
 8002556:	4413      	add	r3, r2
 8002558:	461a      	mov	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	6013      	str	r3, [r2, #0]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40028040 	.word	0x40028040
 8002570:	40028044 	.word	0x40028044

08002574 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e03e      	b.n	8002600 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2200      	movs	r2, #0
 800259e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	3206      	adds	r2, #6
 80025b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d80c      	bhi.n	80025e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68d9      	ldr	r1, [r3, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	440b      	add	r3, r1
 80025dc:	461a      	mov	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	e004      	b.n	80025ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3301      	adds	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d9bd      	bls.n	8002582 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002618:	611a      	str	r2, [r3, #16]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002626:	b480      	push	{r7}
 8002628:	b085      	sub	sp, #20
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	e046      	b.n	80026c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6919      	ldr	r1, [r3, #16]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4613      	mov	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4413      	add	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	440b      	add	r3, r1
 8002644:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2200      	movs	r2, #0
 8002662:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002670:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002678:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	3212      	adds	r2, #18
 800268e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b02      	cmp	r3, #2
 8002696:	d80c      	bhi.n	80026b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6919      	ldr	r1, [r3, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60da      	str	r2, [r3, #12]
 80026b0:	e004      	b.n	80026bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3301      	adds	r3, #1
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d9b5      	bls.n	8002634 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f2:	60da      	str	r2, [r3, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e177      	b.n	8002a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 8166 	bne.w	8002a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274e:	2b02      	cmp	r3, #2
 8002750:	d130      	bne.n	80027b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	2203      	movs	r2, #3
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 0201 	and.w	r2, r3, #1
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d017      	beq.n	80027f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d123      	bne.n	8002844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80c0 	beq.w	8002a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_GPIO_Init+0x324>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_GPIO_Init+0x324>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b63      	ldr	r3, [pc, #396]	; (8002a24 <HAL_GPIO_Init+0x324>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a2:	4a61      	ldr	r2, [pc, #388]	; (8002a28 <HAL_GPIO_Init+0x328>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a58      	ldr	r2, [pc, #352]	; (8002a2c <HAL_GPIO_Init+0x32c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d037      	beq.n	800293e <HAL_GPIO_Init+0x23e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a57      	ldr	r2, [pc, #348]	; (8002a30 <HAL_GPIO_Init+0x330>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_GPIO_Init+0x23a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a56      	ldr	r2, [pc, #344]	; (8002a34 <HAL_GPIO_Init+0x334>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02b      	beq.n	8002936 <HAL_GPIO_Init+0x236>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a55      	ldr	r2, [pc, #340]	; (8002a38 <HAL_GPIO_Init+0x338>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d025      	beq.n	8002932 <HAL_GPIO_Init+0x232>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a54      	ldr	r2, [pc, #336]	; (8002a3c <HAL_GPIO_Init+0x33c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d01f      	beq.n	800292e <HAL_GPIO_Init+0x22e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a53      	ldr	r2, [pc, #332]	; (8002a40 <HAL_GPIO_Init+0x340>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d019      	beq.n	800292a <HAL_GPIO_Init+0x22a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a52      	ldr	r2, [pc, #328]	; (8002a44 <HAL_GPIO_Init+0x344>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_GPIO_Init+0x226>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a51      	ldr	r2, [pc, #324]	; (8002a48 <HAL_GPIO_Init+0x348>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00d      	beq.n	8002922 <HAL_GPIO_Init+0x222>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a50      	ldr	r2, [pc, #320]	; (8002a4c <HAL_GPIO_Init+0x34c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <HAL_GPIO_Init+0x21e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4f      	ldr	r2, [pc, #316]	; (8002a50 <HAL_GPIO_Init+0x350>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_GPIO_Init+0x21a>
 8002916:	2309      	movs	r3, #9
 8002918:	e012      	b.n	8002940 <HAL_GPIO_Init+0x240>
 800291a:	230a      	movs	r3, #10
 800291c:	e010      	b.n	8002940 <HAL_GPIO_Init+0x240>
 800291e:	2308      	movs	r3, #8
 8002920:	e00e      	b.n	8002940 <HAL_GPIO_Init+0x240>
 8002922:	2307      	movs	r3, #7
 8002924:	e00c      	b.n	8002940 <HAL_GPIO_Init+0x240>
 8002926:	2306      	movs	r3, #6
 8002928:	e00a      	b.n	8002940 <HAL_GPIO_Init+0x240>
 800292a:	2305      	movs	r3, #5
 800292c:	e008      	b.n	8002940 <HAL_GPIO_Init+0x240>
 800292e:	2304      	movs	r3, #4
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x240>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <HAL_GPIO_Init+0x240>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <HAL_GPIO_Init+0x240>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x240>
 800293e:	2300      	movs	r3, #0
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f002 0203 	and.w	r2, r2, #3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4093      	lsls	r3, r2
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002950:	4935      	ldr	r1, [pc, #212]	; (8002a28 <HAL_GPIO_Init+0x328>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_GPIO_Init+0x354>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002982:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <HAL_GPIO_Init+0x354>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <HAL_GPIO_Init+0x354>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029ac:	4a29      	ldr	r2, [pc, #164]	; (8002a54 <HAL_GPIO_Init+0x354>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029b2:	4b28      	ldr	r3, [pc, #160]	; (8002a54 <HAL_GPIO_Init+0x354>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d6:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <HAL_GPIO_Init+0x354>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_GPIO_Init+0x354>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <HAL_GPIO_Init+0x354>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	f67f ae84 	bls.w	800271c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	3724      	adds	r7, #36	; 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40013800 	.word	0x40013800
 8002a2c:	40020000 	.word	0x40020000
 8002a30:	40020400 	.word	0x40020400
 8002a34:	40020800 	.word	0x40020800
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40021400 	.word	0x40021400
 8002a44:	40021800 	.word	0x40021800
 8002a48:	40021c00 	.word	0x40021c00
 8002a4c:	40022000 	.word	0x40022000
 8002a50:	40022400 	.word	0x40022400
 8002a54:	40013c00 	.word	0x40013c00

08002a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	887b      	ldrh	r3, [r7, #2]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d002      	beq.n	8002a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	e001      	b.n	8002a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	807b      	strh	r3, [r7, #2]
 8002a94:	4613      	mov	r3, r2
 8002a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a98:	787b      	ldrb	r3, [r7, #1]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9e:	887a      	ldrh	r2, [r7, #2]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aa4:	e003      	b.n	8002aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aa6:	887b      	ldrh	r3, [r7, #2]
 8002aa8:	041a      	lsls	r2, r3, #16
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	619a      	str	r2, [r3, #24]
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e12b      	b.n	8002d26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe ff82 	bl	80019ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b20:	f001 fa20 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 8002b24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a81      	ldr	r2, [pc, #516]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d807      	bhi.n	8002b40 <HAL_I2C_Init+0x84>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4a80      	ldr	r2, [pc, #512]	; (8002d34 <HAL_I2C_Init+0x278>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	bf94      	ite	ls
 8002b38:	2301      	movls	r3, #1
 8002b3a:	2300      	movhi	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	e006      	b.n	8002b4e <HAL_I2C_Init+0x92>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4a7d      	ldr	r2, [pc, #500]	; (8002d38 <HAL_I2C_Init+0x27c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0e7      	b.n	8002d26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a78      	ldr	r2, [pc, #480]	; (8002d3c <HAL_I2C_Init+0x280>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	0c9b      	lsrs	r3, r3, #18
 8002b60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d802      	bhi.n	8002b90 <HAL_I2C_Init+0xd4>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	e009      	b.n	8002ba4 <HAL_I2C_Init+0xe8>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	4a69      	ldr	r2, [pc, #420]	; (8002d40 <HAL_I2C_Init+0x284>)
 8002b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba0:	099b      	lsrs	r3, r3, #6
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6812      	ldr	r2, [r2, #0]
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bb6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	495c      	ldr	r1, [pc, #368]	; (8002d30 <HAL_I2C_Init+0x274>)
 8002bc0:	428b      	cmp	r3, r1
 8002bc2:	d819      	bhi.n	8002bf8 <HAL_I2C_Init+0x13c>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1e59      	subs	r1, r3, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd2:	1c59      	adds	r1, r3, #1
 8002bd4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd8:	400b      	ands	r3, r1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00a      	beq.n	8002bf4 <HAL_I2C_Init+0x138>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e59      	subs	r1, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	e051      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002bf4:	2304      	movs	r3, #4
 8002bf6:	e04f      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d111      	bne.n	8002c24 <HAL_I2C_Init+0x168>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1e58      	subs	r0, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	440b      	add	r3, r1
 8002c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c12:	3301      	adds	r3, #1
 8002c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	bf0c      	ite	eq
 8002c1c:	2301      	moveq	r3, #1
 8002c1e:	2300      	movne	r3, #0
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	e012      	b.n	8002c4a <HAL_I2C_Init+0x18e>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1e58      	subs	r0, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	0099      	lsls	r1, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Init+0x196>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e022      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10e      	bne.n	8002c78 <HAL_I2C_Init+0x1bc>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1e58      	subs	r0, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6859      	ldr	r1, [r3, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	440b      	add	r3, r1
 8002c68:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c76:	e00f      	b.n	8002c98 <HAL_I2C_Init+0x1dc>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	0099      	lsls	r1, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6809      	ldr	r1, [r1, #0]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6911      	ldr	r1, [r2, #16]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68d2      	ldr	r2, [r2, #12]
 8002cd2:	4311      	orrs	r1, r2
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	000186a0 	.word	0x000186a0
 8002d34:	001e847f 	.word	0x001e847f
 8002d38:	003d08ff 	.word	0x003d08ff
 8002d3c:	431bde83 	.word	0x431bde83
 8002d40:	10624dd3 	.word	0x10624dd3

08002d44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d58:	f7ff f898 	bl	8001e8c <HAL_GetTick>
 8002d5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 80e0 	bne.w	8002f2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2319      	movs	r3, #25
 8002d72:	2201      	movs	r2, #1
 8002d74:	4970      	ldr	r1, [pc, #448]	; (8002f38 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f964 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d82:	2302      	movs	r3, #2
 8002d84:	e0d3      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x50>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e0cc      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d007      	beq.n	8002dba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 0201 	orr.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2210      	movs	r2, #16
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4a50      	ldr	r2, [pc, #320]	; (8002f3c <HAL_I2C_Master_Transmit+0x1f8>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002dfc:	8979      	ldrh	r1, [r7, #10]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f89c 	bl	8002f40 <I2C_MasterRequestWrite>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e08d      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e12:	2300      	movs	r3, #0
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e28:	e066      	b.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	6a39      	ldr	r1, [r7, #32]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 f9de 	bl	80031f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d107      	bne.n	8002e52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06b      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	1c5a      	adds	r2, r3, #1
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d11b      	bne.n	8002ecc <HAL_I2C_Master_Transmit+0x188>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	6a39      	ldr	r1, [r7, #32]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f9ce 	bl	8003272 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00d      	beq.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d107      	bne.n	8002ef4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01a      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d194      	bne.n	8002e2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e000      	b.n	8002f2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f2c:	2302      	movs	r3, #2
  }
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	00100002 	.word	0x00100002
 8002f3c:	ffff0000 	.word	0xffff0000

08002f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d006      	beq.n	8002f6a <I2C_MasterRequestWrite+0x2a>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d003      	beq.n	8002f6a <I2C_MasterRequestWrite+0x2a>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e00b      	b.n	8002f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	2b12      	cmp	r3, #18
 8002f82:	d107      	bne.n	8002f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 f84f 	bl	8003044 <I2C_WaitOnFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fba:	d103      	bne.n	8002fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e035      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd0:	d108      	bne.n	8002fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe0:	611a      	str	r2, [r3, #16]
 8002fe2:	e01b      	b.n	800301c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fe4:	897b      	ldrh	r3, [r7, #10]
 8002fe6:	11db      	asrs	r3, r3, #7
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	f003 0306 	and.w	r3, r3, #6
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	f063 030f 	orn	r3, r3, #15
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	490e      	ldr	r1, [pc, #56]	; (800303c <I2C_MasterRequestWrite+0xfc>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f875 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e010      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <I2C_MasterRequestWrite+0x100>)
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 f865 	bl	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	00010008 	.word	0x00010008
 8003040:	00010002 	.word	0x00010002

08003044 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003054:	e025      	b.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d021      	beq.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305e:	f7fe ff15 	bl	8001e8c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d302      	bcc.n	8003074 <I2C_WaitOnFlagUntilTimeout+0x30>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d116      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f043 0220 	orr.w	r2, r3, #32
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e023      	b.n	80030ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d10d      	bne.n	80030c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	43da      	mvns	r2, r3
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4013      	ands	r3, r2
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	e00c      	b.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	4013      	ands	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d0b6      	beq.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003100:	e051      	b.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d123      	bne.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0204 	orr.w	r2, r3, #4
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e046      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d021      	beq.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fe fe93 	bl	8001e8c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e020      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d10c      	bne.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	b29b      	uxth	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	bf14      	ite	ne
 80031c2:	2301      	movne	r3, #1
 80031c4:	2300      	moveq	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	e00b      	b.n	80031e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	43da      	mvns	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d18d      	bne.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fc:	e02d      	b.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f878 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e02d      	b.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d021      	beq.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003216:	f7fe fe39 	bl	8001e8c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	429a      	cmp	r2, r3
 8003224:	d302      	bcc.n	800322c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d116      	bne.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e007      	b.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d1ca      	bne.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327e:	e02d      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f837 	bl	80032f4 <I2C_IsAcknowledgeFailed>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e02d      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d021      	beq.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003298:	f7fe fdf8 	bl	8001e8c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d302      	bcc.n	80032ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d116      	bne.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d1ca      	bne.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d11b      	bne.n	8003344 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003314:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr

08003352 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b20      	cmp	r3, #32
 8003366:	d129      	bne.n	80033bc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0210 	bic.w	r2, r2, #16
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d12a      	bne.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2224      	movs	r2, #36	; 0x24
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003404:	89fb      	ldrh	r3, [r7, #14]
 8003406:	f023 030f 	bic.w	r3, r3, #15
 800340a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	b29a      	uxth	r2, r3
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	4313      	orrs	r3, r2
 8003414:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	89fa      	ldrh	r2, [r7, #14]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800344a:	b08f      	sub	sp, #60	; 0x3c
 800344c:	af0a      	add	r7, sp, #40	; 0x28
 800344e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e10f      	b.n	800367a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fe fb6b 	bl	8001b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fbec 	bl	8004c76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	687e      	ldr	r6, [r7, #4]
 80034a6:	466d      	mov	r5, sp
 80034a8:	f106 0410 	add.w	r4, r6, #16
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80034bc:	1d33      	adds	r3, r6, #4
 80034be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f001 fb77 	bl	8004bb4 <USB_CoreInit>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0d0      	b.n	800367a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fbda 	bl	8004c98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
 80034e8:	e04a      	b.n	8003580 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	333d      	adds	r3, #61	; 0x3d
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	333c      	adds	r3, #60	; 0x3c
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	b298      	uxth	r0, r3
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	3344      	adds	r3, #68	; 0x44
 8003526:	4602      	mov	r2, r0
 8003528:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3340      	adds	r3, #64	; 0x40
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800353e:	7bfa      	ldrb	r2, [r7, #15]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3348      	adds	r3, #72	; 0x48
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	334c      	adds	r3, #76	; 0x4c
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3354      	adds	r3, #84	; 0x54
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	3301      	adds	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d3af      	bcc.n	80034ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358a:	2300      	movs	r3, #0
 800358c:	73fb      	strb	r3, [r7, #15]
 800358e:	e044      	b.n	800361a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035ce:	2200      	movs	r2, #0
 80035d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035fe:	7bfa      	ldrb	r2, [r7, #15]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	3301      	adds	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	7bfa      	ldrb	r2, [r7, #15]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d3b5      	bcc.n	8003590 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	687e      	ldr	r6, [r7, #4]
 800362c:	466d      	mov	r5, sp
 800362e:	f106 0410 	add.w	r4, r6, #16
 8003632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003638:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800363a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800363e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003642:	1d33      	adds	r3, r6, #4
 8003644:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003646:	6838      	ldr	r0, [r7, #0]
 8003648:	f001 fb72 	bl	8004d30 <USB_DevInit>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2202      	movs	r2, #2
 8003656:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00d      	b.n	800367a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fd3d 	bl	80050f2 <USB_DevDisconnect>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e267      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d075      	beq.n	800378e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a2:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d00c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ae:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d112      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ba:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	4b7e      	ldr	r3, [pc, #504]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d05b      	beq.n	800378c <HAL_RCC_OscConfig+0x108>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d157      	bne.n	800378c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e242      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d106      	bne.n	80036f8 <HAL_RCC_OscConfig+0x74>
 80036ea:	4b76      	ldr	r3, [pc, #472]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a75      	ldr	r2, [pc, #468]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e01d      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x98>
 8003702:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6f      	ldr	r2, [pc, #444]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6c      	ldr	r2, [pc, #432]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 800371c:	4b69      	ldr	r3, [pc, #420]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a68      	ldr	r2, [pc, #416]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe fba6 	bl	8001e8c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe fba2 	bl	8001e8c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e207      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0xc0>
 8003762:	e014      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fb92 	bl	8001e8c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376c:	f7fe fb8e 	bl	8001e8c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1f3      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0xe8>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d063      	beq.n	8003862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379a:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d11c      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b44      	ldr	r3, [pc, #272]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d116      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e1c7      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4937      	ldr	r1, [pc, #220]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	e03a      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f4:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_RCC_OscConfig+0x244>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe fb47 	bl	8001e8c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003802:	f7fe fb43 	bl	8001e8c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e1a8      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4925      	ldr	r1, [pc, #148]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e015      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x244>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fb26 	bl	8001e8c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe fb22 	bl	8001e8c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e187      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d036      	beq.n	80038dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_RCC_OscConfig+0x248>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe fb06 	bl	8001e8c <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003884:	f7fe fb02 	bl	8001e8c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e167      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x200>
 80038a2:	e01b      	b.n	80038dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_OscConfig+0x248>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7fe faef 	bl	8001e8c <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	e00e      	b.n	80038d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b2:	f7fe faeb 	bl	8001e8c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d907      	bls.n	80038d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e150      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	42470000 	.word	0x42470000
 80038cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ea      	bne.n	80038b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8097 	beq.w	8003a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ee:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	4a7c      	ldr	r2, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d118      	bne.n	8003958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003926:	4b74      	ldr	r3, [pc, #464]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a73      	ldr	r2, [pc, #460]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003932:	f7fe faab 	bl	8001e8c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393a:	f7fe faa7 	bl	8001e8c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e10c      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x2ea>
 8003960:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a63      	ldr	r2, [pc, #396]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	e01c      	b.n	80039a8 <HAL_RCC_OscConfig+0x324>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b05      	cmp	r3, #5
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x30c>
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	4a5e      	ldr	r2, [pc, #376]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	6713      	str	r3, [r2, #112]	; 0x70
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a5b      	ldr	r2, [pc, #364]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0x324>
 8003990:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
 800399c:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80039a2:	f023 0304 	bic.w	r3, r3, #4
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d015      	beq.n	80039dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe fa6c 	bl	8001e8c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fe fa68 	bl	8001e8c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0cb      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0ee      	beq.n	80039b8 <HAL_RCC_OscConfig+0x334>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039dc:	f7fe fa56 	bl	8001e8c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fe fa52 	bl	8001e8c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0b5      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fa:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ee      	bne.n	80039e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	4a38      	ldr	r2, [pc, #224]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a1 	beq.w	8003b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d05c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d141      	bne.n	8003aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fa26 	bl	8001e8c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe fa22 	bl	8001e8c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e087      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	491b      	ldr	r1, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fe f9fb 	bl	8001e8c <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fe f9f7 	bl	8001e8c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e05c      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aac:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x416>
 8003ab8:	e054      	b.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f9e4 	bl	8001e8c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fe f9e0 	bl	8001e8c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e045      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x444>
 8003ae6:	e03d      	b.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e038      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40007000 	.word	0x40007000
 8003afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_RCC_OscConfig+0x4ec>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d028      	beq.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d121      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d11a      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d111      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800

08003b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0cc      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d90c      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b8      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d020      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc8:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a58      	ldr	r2, [pc, #352]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a52      	ldr	r2, [pc, #328]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	494d      	ldr	r1, [pc, #308]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d044      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d119      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b3b      	ldr	r3, [pc, #236]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e067      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4934      	ldr	r1, [pc, #208]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c64:	f7fe f912 	bl	8001e8c <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe f90e 	bl	8001e8c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e04f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d20c      	bcs.n	8003cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e032      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4916      	ldr	r1, [pc, #88]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	490e      	ldr	r1, [pc, #56]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cfa:	f000 f821 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	490a      	ldr	r1, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	5ccb      	ldrb	r3, [r1, r3]
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd ff72 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023c00 	.word	0x40023c00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	08006e04 	.word	0x08006e04
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	20000004 	.word	0x20000004

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b094      	sub	sp, #80	; 0x50
 8003d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d50:	2300      	movs	r3, #0
 8003d52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d58:	4b79      	ldr	r3, [pc, #484]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d00d      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x40>
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	f200 80e1 	bhi.w	8003f2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x34>
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d003      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d72:	e0db      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b73      	ldr	r3, [pc, #460]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d78:	e0db      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d7a:	4b73      	ldr	r3, [pc, #460]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d7e:	e0d8      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d80:	4b6f      	ldr	r3, [pc, #444]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d8a:	4b6d      	ldr	r3, [pc, #436]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d063      	beq.n	8003e5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d96:	4b6a      	ldr	r3, [pc, #424]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da8:	633b      	str	r3, [r7, #48]	; 0x30
 8003daa:	2300      	movs	r3, #0
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
 8003dae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003db2:	4622      	mov	r2, r4
 8003db4:	462b      	mov	r3, r5
 8003db6:	f04f 0000 	mov.w	r0, #0
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	0159      	lsls	r1, r3, #5
 8003dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc4:	0150      	lsls	r0, r2, #5
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4621      	mov	r1, r4
 8003dcc:	1a51      	subs	r1, r2, r1
 8003dce:	6139      	str	r1, [r7, #16]
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de4:	4659      	mov	r1, fp
 8003de6:	018b      	lsls	r3, r1, #6
 8003de8:	4651      	mov	r1, sl
 8003dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dee:	4651      	mov	r1, sl
 8003df0:	018a      	lsls	r2, r1, #6
 8003df2:	4651      	mov	r1, sl
 8003df4:	ebb2 0801 	subs.w	r8, r2, r1
 8003df8:	4659      	mov	r1, fp
 8003dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e12:	4690      	mov	r8, r2
 8003e14:	4699      	mov	r9, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	eb18 0303 	adds.w	r3, r8, r3
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	462b      	mov	r3, r5
 8003e20:	eb49 0303 	adc.w	r3, r9, r3
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e32:	4629      	mov	r1, r5
 8003e34:	024b      	lsls	r3, r1, #9
 8003e36:	4621      	mov	r1, r4
 8003e38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	024a      	lsls	r2, r1, #9
 8003e40:	4610      	mov	r0, r2
 8003e42:	4619      	mov	r1, r3
 8003e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e46:	2200      	movs	r2, #0
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e50:	f7fc feaa 	bl	8000ba8 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4613      	mov	r3, r2
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	e058      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5e:	4b38      	ldr	r3, [pc, #224]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	099b      	lsrs	r3, r3, #6
 8003e64:	2200      	movs	r2, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	4611      	mov	r1, r2
 8003e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e6e:	623b      	str	r3, [r7, #32]
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
 8003e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e78:	4642      	mov	r2, r8
 8003e7a:	464b      	mov	r3, r9
 8003e7c:	f04f 0000 	mov.w	r0, #0
 8003e80:	f04f 0100 	mov.w	r1, #0
 8003e84:	0159      	lsls	r1, r3, #5
 8003e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e8a:	0150      	lsls	r0, r2, #5
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4641      	mov	r1, r8
 8003e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e96:	4649      	mov	r1, r9
 8003e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8003eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	00eb      	lsls	r3, r5, #3
 8003ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec6:	00e2      	lsls	r2, r4, #3
 8003ec8:	4614      	mov	r4, r2
 8003eca:	461d      	mov	r5, r3
 8003ecc:	4643      	mov	r3, r8
 8003ece:	18e3      	adds	r3, r4, r3
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	eb45 0303 	adc.w	r3, r5, r3
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	028b      	lsls	r3, r1, #10
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	028a      	lsls	r2, r1, #10
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efa:	2200      	movs	r2, #0
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	61fa      	str	r2, [r7, #28]
 8003f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f04:	f7fc fe50 	bl	8000ba8 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3750      	adds	r7, #80	; 0x50
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	007a1200 	.word	0x007a1200

08003f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000000 	.word	0x20000000

08003f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f68:	f7ff fff0 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0a9b      	lsrs	r3, r3, #10
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	08006e14 	.word	0x08006e14

08003f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f90:	f7ff ffdc 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8003f94:	4602      	mov	r2, r0
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	0b5b      	lsrs	r3, r3, #13
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	4903      	ldr	r1, [pc, #12]	; (8003fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fa2:	5ccb      	ldrb	r3, [r1, r3]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	08006e14 	.word	0x08006e14

08003fb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_RCC_GetClockConfig+0x5c>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <HAL_RCC_GetClockConfig+0x5c>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_RCC_GetClockConfig+0x5c>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003fe8:	4b09      	ldr	r3, [pc, #36]	; (8004010 <HAL_RCC_GetClockConfig+0x5c>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ff6:	4b07      	ldr	r3, [pc, #28]	; (8004014 <HAL_RCC_GetClockConfig+0x60>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 020f 	and.w	r2, r3, #15
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	601a      	str	r2, [r3, #0]
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	40023c00 	.word	0x40023c00

08004018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e041      	b.n	80040ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd fd1c 	bl	8001a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f000 fa36 	bl	80044c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d001      	beq.n	80040d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e046      	b.n	800415e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_TIM_Base_Start+0xb4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d022      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ea:	d01d      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_TIM_Base_Start+0xb8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d018      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_TIM_Base_Start+0xbc>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1c      	ldr	r2, [pc, #112]	; (8004178 <HAL_TIM_Base_Start+0xc0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1b      	ldr	r2, [pc, #108]	; (800417c <HAL_TIM_Base_Start+0xc4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d009      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a19      	ldr	r2, [pc, #100]	; (8004180 <HAL_TIM_Base_Start+0xc8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d004      	beq.n	8004128 <HAL_TIM_Base_Start+0x70>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a18      	ldr	r2, [pc, #96]	; (8004184 <HAL_TIM_Base_Start+0xcc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d111      	bne.n	800414c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d010      	beq.n	800415c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	e007      	b.n	800415c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	40010000 	.word	0x40010000
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40000c00 	.word	0x40000c00
 800417c:	40010400 	.word	0x40010400
 8004180:	40014000 	.word	0x40014000
 8004184:	40001800 	.word	0x40001800

08004188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d001      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e04e      	b.n	800423e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 0201 	orr.w	r2, r2, #1
 80041b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a23      	ldr	r2, [pc, #140]	; (800424c <HAL_TIM_Base_Start_IT+0xc4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d022      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x80>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ca:	d01d      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x80>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <HAL_TIM_Base_Start_IT+0xc8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x80>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1e      	ldr	r2, [pc, #120]	; (8004254 <HAL_TIM_Base_Start_IT+0xcc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x80>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1c      	ldr	r2, [pc, #112]	; (8004258 <HAL_TIM_Base_Start_IT+0xd0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x80>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_TIM_Base_Start_IT+0xd4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x80>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a19      	ldr	r2, [pc, #100]	; (8004260 <HAL_TIM_Base_Start_IT+0xd8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_TIM_Base_Start_IT+0x80>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a18      	ldr	r2, [pc, #96]	; (8004264 <HAL_TIM_Base_Start_IT+0xdc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d111      	bne.n	800422c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b06      	cmp	r3, #6
 8004218:	d010      	beq.n	800423c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422a:	e007      	b.n	800423c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0201 	orr.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40010000 	.word	0x40010000
 8004250:	40000400 	.word	0x40000400
 8004254:	40000800 	.word	0x40000800
 8004258:	40000c00 	.word	0x40000c00
 800425c:	40010400 	.word	0x40010400
 8004260:	40014000 	.word	0x40014000
 8004264:	40001800 	.word	0x40001800

08004268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d122      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b02      	cmp	r3, #2
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0202 	mvn.w	r2, #2
 8004294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8ee 	bl	800448c <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8e0 	bl	8004478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8f1 	bl	80044a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d122      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d11b      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0204 	mvn.w	r2, #4
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f8c4 	bl	800448c <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8b6 	bl	8004478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f8c7 	bl	80044a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b08      	cmp	r3, #8
 8004324:	d122      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0208 	mvn.w	r2, #8
 800433c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2204      	movs	r2, #4
 8004342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f89a 	bl	800448c <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f88c 	bl	8004478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f89d 	bl	80044a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0210 	mvn.w	r2, #16
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2208      	movs	r2, #8
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f870 	bl	800448c <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f862 	bl	8004478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f873 	bl	80044a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10e      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0201 	mvn.w	r2, #1
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7fd f9f6 	bl	80017d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f902 	bl	800461c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f838 	bl	80044b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0220 	mvn.w	r2, #32
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f8cc 	bl	8004608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a40      	ldr	r2, [pc, #256]	; (80045dc <TIM_Base_SetConfig+0x114>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d00f      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3d      	ldr	r2, [pc, #244]	; (80045e0 <TIM_Base_SetConfig+0x118>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d00b      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a3c      	ldr	r2, [pc, #240]	; (80045e4 <TIM_Base_SetConfig+0x11c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d007      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a3b      	ldr	r2, [pc, #236]	; (80045e8 <TIM_Base_SetConfig+0x120>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <TIM_Base_SetConfig+0x124>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d108      	bne.n	800451a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2f      	ldr	r2, [pc, #188]	; (80045dc <TIM_Base_SetConfig+0x114>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d02b      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d027      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <TIM_Base_SetConfig+0x118>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d023      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2b      	ldr	r2, [pc, #172]	; (80045e4 <TIM_Base_SetConfig+0x11c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01f      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <TIM_Base_SetConfig+0x120>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01b      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a29      	ldr	r2, [pc, #164]	; (80045ec <TIM_Base_SetConfig+0x124>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d017      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a28      	ldr	r2, [pc, #160]	; (80045f0 <TIM_Base_SetConfig+0x128>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <TIM_Base_SetConfig+0x12c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00f      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a26      	ldr	r2, [pc, #152]	; (80045f8 <TIM_Base_SetConfig+0x130>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00b      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a25      	ldr	r2, [pc, #148]	; (80045fc <TIM_Base_SetConfig+0x134>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a24      	ldr	r2, [pc, #144]	; (8004600 <TIM_Base_SetConfig+0x138>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a23      	ldr	r2, [pc, #140]	; (8004604 <TIM_Base_SetConfig+0x13c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d108      	bne.n	800458c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <TIM_Base_SetConfig+0x114>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_Base_SetConfig+0xf8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a0c      	ldr	r2, [pc, #48]	; (80045ec <TIM_Base_SetConfig+0x124>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d103      	bne.n	80045c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	615a      	str	r2, [r3, #20]
}
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40010000 	.word	0x40010000
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800
 80045e8:	40000c00 	.word	0x40000c00
 80045ec:	40010400 	.word	0x40010400
 80045f0:	40014000 	.word	0x40014000
 80045f4:	40014400 	.word	0x40014400
 80045f8:	40014800 	.word	0x40014800
 80045fc:	40001800 	.word	0x40001800
 8004600:	40001c00 	.word	0x40001c00
 8004604:	40002000 	.word	0x40002000

08004608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e03f      	b.n	80046c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fd fa32 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2224      	movs	r2, #36	; 0x24
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004672:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f829 	bl	80046cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691a      	ldr	r2, [r3, #16]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004688:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004698:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d0:	b0c0      	sub	sp, #256	; 0x100
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	68d9      	ldr	r1, [r3, #12]
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	ea40 0301 	orr.w	r3, r0, r1
 80046f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	431a      	orrs	r2, r3
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	431a      	orrs	r2, r3
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004724:	f021 010c 	bic.w	r1, r1, #12
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004732:	430b      	orrs	r3, r1
 8004734:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004746:	6999      	ldr	r1, [r3, #24]
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	ea40 0301 	orr.w	r3, r0, r1
 8004752:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b8f      	ldr	r3, [pc, #572]	; (8004998 <UART_SetConfig+0x2cc>)
 800475c:	429a      	cmp	r2, r3
 800475e:	d005      	beq.n	800476c <UART_SetConfig+0xa0>
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4b8d      	ldr	r3, [pc, #564]	; (800499c <UART_SetConfig+0x2d0>)
 8004768:	429a      	cmp	r2, r3
 800476a:	d104      	bne.n	8004776 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800476c:	f7ff fc0e 	bl	8003f8c <HAL_RCC_GetPCLK2Freq>
 8004770:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004774:	e003      	b.n	800477e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004776:	f7ff fbf5 	bl	8003f64 <HAL_RCC_GetPCLK1Freq>
 800477a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800477e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	f040 810c 	bne.w	80049a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800478c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004790:	2200      	movs	r2, #0
 8004792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004796:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800479a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800479e:	4622      	mov	r2, r4
 80047a0:	462b      	mov	r3, r5
 80047a2:	1891      	adds	r1, r2, r2
 80047a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80047a6:	415b      	adcs	r3, r3
 80047a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047ae:	4621      	mov	r1, r4
 80047b0:	eb12 0801 	adds.w	r8, r2, r1
 80047b4:	4629      	mov	r1, r5
 80047b6:	eb43 0901 	adc.w	r9, r3, r1
 80047ba:	f04f 0200 	mov.w	r2, #0
 80047be:	f04f 0300 	mov.w	r3, #0
 80047c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ce:	4690      	mov	r8, r2
 80047d0:	4699      	mov	r9, r3
 80047d2:	4623      	mov	r3, r4
 80047d4:	eb18 0303 	adds.w	r3, r8, r3
 80047d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047dc:	462b      	mov	r3, r5
 80047de:	eb49 0303 	adc.w	r3, r9, r3
 80047e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047fa:	460b      	mov	r3, r1
 80047fc:	18db      	adds	r3, r3, r3
 80047fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004800:	4613      	mov	r3, r2
 8004802:	eb42 0303 	adc.w	r3, r2, r3
 8004806:	657b      	str	r3, [r7, #84]	; 0x54
 8004808:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800480c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004810:	f7fc f9ca 	bl	8000ba8 <__aeabi_uldivmod>
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <UART_SetConfig+0x2d4>)
 800481a:	fba3 2302 	umull	r2, r3, r3, r2
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	011c      	lsls	r4, r3, #4
 8004822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004826:	2200      	movs	r2, #0
 8004828:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800482c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004830:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	1891      	adds	r1, r2, r2
 800483a:	64b9      	str	r1, [r7, #72]	; 0x48
 800483c:	415b      	adcs	r3, r3
 800483e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004840:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004844:	4641      	mov	r1, r8
 8004846:	eb12 0a01 	adds.w	sl, r2, r1
 800484a:	4649      	mov	r1, r9
 800484c:	eb43 0b01 	adc.w	fp, r3, r1
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800485c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004860:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004864:	4692      	mov	sl, r2
 8004866:	469b      	mov	fp, r3
 8004868:	4643      	mov	r3, r8
 800486a:	eb1a 0303 	adds.w	r3, sl, r3
 800486e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004872:	464b      	mov	r3, r9
 8004874:	eb4b 0303 	adc.w	r3, fp, r3
 8004878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004888:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800488c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004890:	460b      	mov	r3, r1
 8004892:	18db      	adds	r3, r3, r3
 8004894:	643b      	str	r3, [r7, #64]	; 0x40
 8004896:	4613      	mov	r3, r2
 8004898:	eb42 0303 	adc.w	r3, r2, r3
 800489c:	647b      	str	r3, [r7, #68]	; 0x44
 800489e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048a6:	f7fc f97f 	bl	8000ba8 <__aeabi_uldivmod>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <UART_SetConfig+0x2d4>)
 80048b2:	fba3 2301 	umull	r2, r3, r3, r1
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2264      	movs	r2, #100	; 0x64
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	1acb      	subs	r3, r1, r3
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <UART_SetConfig+0x2d4>)
 80048c8:	fba3 2302 	umull	r2, r3, r3, r2
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048d4:	441c      	add	r4, r3
 80048d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	1891      	adds	r1, r2, r2
 80048ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80048f0:	415b      	adcs	r3, r3
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048f8:	4641      	mov	r1, r8
 80048fa:	1851      	adds	r1, r2, r1
 80048fc:	6339      	str	r1, [r7, #48]	; 0x30
 80048fe:	4649      	mov	r1, r9
 8004900:	414b      	adcs	r3, r1
 8004902:	637b      	str	r3, [r7, #52]	; 0x34
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004910:	4659      	mov	r1, fp
 8004912:	00cb      	lsls	r3, r1, #3
 8004914:	4651      	mov	r1, sl
 8004916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491a:	4651      	mov	r1, sl
 800491c:	00ca      	lsls	r2, r1, #3
 800491e:	4610      	mov	r0, r2
 8004920:	4619      	mov	r1, r3
 8004922:	4603      	mov	r3, r0
 8004924:	4642      	mov	r2, r8
 8004926:	189b      	adds	r3, r3, r2
 8004928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800492c:	464b      	mov	r3, r9
 800492e:	460a      	mov	r2, r1
 8004930:	eb42 0303 	adc.w	r3, r2, r3
 8004934:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004944:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004948:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800494c:	460b      	mov	r3, r1
 800494e:	18db      	adds	r3, r3, r3
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
 8004952:	4613      	mov	r3, r2
 8004954:	eb42 0303 	adc.w	r3, r2, r3
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
 800495a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800495e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004962:	f7fc f921 	bl	8000ba8 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <UART_SetConfig+0x2d4>)
 800496c:	fba3 1302 	umull	r1, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	2164      	movs	r1, #100	; 0x64
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	3332      	adds	r3, #50	; 0x32
 800497e:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <UART_SetConfig+0x2d4>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	f003 0207 	and.w	r2, r3, #7
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4422      	add	r2, r4
 8004992:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004994:	e105      	b.n	8004ba2 <UART_SetConfig+0x4d6>
 8004996:	bf00      	nop
 8004998:	40011000 	.word	0x40011000
 800499c:	40011400 	.word	0x40011400
 80049a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049b6:	4642      	mov	r2, r8
 80049b8:	464b      	mov	r3, r9
 80049ba:	1891      	adds	r1, r2, r2
 80049bc:	6239      	str	r1, [r7, #32]
 80049be:	415b      	adcs	r3, r3
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049c6:	4641      	mov	r1, r8
 80049c8:	1854      	adds	r4, r2, r1
 80049ca:	4649      	mov	r1, r9
 80049cc:	eb43 0501 	adc.w	r5, r3, r1
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	00eb      	lsls	r3, r5, #3
 80049da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049de:	00e2      	lsls	r2, r4, #3
 80049e0:	4614      	mov	r4, r2
 80049e2:	461d      	mov	r5, r3
 80049e4:	4643      	mov	r3, r8
 80049e6:	18e3      	adds	r3, r4, r3
 80049e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049ec:	464b      	mov	r3, r9
 80049ee:	eb45 0303 	adc.w	r3, r5, r3
 80049f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a12:	4629      	mov	r1, r5
 8004a14:	008b      	lsls	r3, r1, #2
 8004a16:	4621      	mov	r1, r4
 8004a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a1c:	4621      	mov	r1, r4
 8004a1e:	008a      	lsls	r2, r1, #2
 8004a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a24:	f7fc f8c0 	bl	8000ba8 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4b60      	ldr	r3, [pc, #384]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	011c      	lsls	r4, r3, #4
 8004a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a48:	4642      	mov	r2, r8
 8004a4a:	464b      	mov	r3, r9
 8004a4c:	1891      	adds	r1, r2, r2
 8004a4e:	61b9      	str	r1, [r7, #24]
 8004a50:	415b      	adcs	r3, r3
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a58:	4641      	mov	r1, r8
 8004a5a:	1851      	adds	r1, r2, r1
 8004a5c:	6139      	str	r1, [r7, #16]
 8004a5e:	4649      	mov	r1, r9
 8004a60:	414b      	adcs	r3, r1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	f04f 0300 	mov.w	r3, #0
 8004a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a70:	4659      	mov	r1, fp
 8004a72:	00cb      	lsls	r3, r1, #3
 8004a74:	4651      	mov	r1, sl
 8004a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7a:	4651      	mov	r1, sl
 8004a7c:	00ca      	lsls	r2, r1, #3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	4619      	mov	r1, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	4642      	mov	r2, r8
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	460a      	mov	r2, r1
 8004a90:	eb42 0303 	adc.w	r3, r2, r3
 8004a94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	008b      	lsls	r3, r1, #2
 8004ab4:	4641      	mov	r1, r8
 8004ab6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aba:	4641      	mov	r1, r8
 8004abc:	008a      	lsls	r2, r1, #2
 8004abe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ac2:	f7fc f871 	bl	8000ba8 <__aeabi_uldivmod>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	460b      	mov	r3, r1
 8004aca:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004acc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	2164      	movs	r1, #100	; 0x64
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	3332      	adds	r3, #50	; 0x32
 8004ade:	4a34      	ldr	r2, [pc, #208]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae4:	095b      	lsrs	r3, r3, #5
 8004ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aea:	441c      	add	r4, r3
 8004aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af0:	2200      	movs	r2, #0
 8004af2:	673b      	str	r3, [r7, #112]	; 0x70
 8004af4:	677a      	str	r2, [r7, #116]	; 0x74
 8004af6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004afa:	4642      	mov	r2, r8
 8004afc:	464b      	mov	r3, r9
 8004afe:	1891      	adds	r1, r2, r2
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	415b      	adcs	r3, r3
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	1851      	adds	r1, r2, r1
 8004b0e:	6039      	str	r1, [r7, #0]
 8004b10:	4649      	mov	r1, r9
 8004b12:	414b      	adcs	r3, r1
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b22:	4659      	mov	r1, fp
 8004b24:	00cb      	lsls	r3, r1, #3
 8004b26:	4651      	mov	r1, sl
 8004b28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2c:	4651      	mov	r1, sl
 8004b2e:	00ca      	lsls	r2, r1, #3
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	4642      	mov	r2, r8
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	460a      	mov	r2, r1
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004b50:	667a      	str	r2, [r7, #100]	; 0x64
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b5e:	4649      	mov	r1, r9
 8004b60:	008b      	lsls	r3, r1, #2
 8004b62:	4641      	mov	r1, r8
 8004b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b68:	4641      	mov	r1, r8
 8004b6a:	008a      	lsls	r2, r1, #2
 8004b6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b70:	f7fc f81a 	bl	8000ba8 <__aeabi_uldivmod>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2164      	movs	r1, #100	; 0x64
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	3332      	adds	r3, #50	; 0x32
 8004b8c:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <UART_SetConfig+0x4e4>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4422      	add	r2, r4
 8004ba0:	609a      	str	r2, [r3, #8]
}
 8004ba2:	bf00      	nop
 8004ba4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bae:	bf00      	nop
 8004bb0:	51eb851f 	.word	0x51eb851f

08004bb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b084      	sub	sp, #16
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	f107 001c 	add.w	r0, r7, #28
 8004bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d122      	bne.n	8004c12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d105      	bne.n	8004c06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 faa2 	bl	8005150 <USB_CoreReset>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]
 8004c10:	e01a      	b.n	8004c48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa96 	bl	8005150 <USB_CoreReset>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
 8004c3a:	e005      	b.n	8004c48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10b      	bne.n	8004c66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f043 0206 	orr.w	r2, r3, #6
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f043 0220 	orr.w	r2, r3, #32
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c72:	b004      	add	sp, #16
 8004c74:	4770      	bx	lr

08004c76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d115      	bne.n	8004ce6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	f7fd f8ec 	bl	8001ea4 <HAL_Delay>
      ms++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa2e 	bl	8005134 <USB_GetMode>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d01e      	beq.n	8004d1c <USB_SetCurrentMode+0x84>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b31      	cmp	r3, #49	; 0x31
 8004ce2:	d9f0      	bls.n	8004cc6 <USB_SetCurrentMode+0x2e>
 8004ce4:	e01a      	b.n	8004d1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ce6:	78fb      	ldrb	r3, [r7, #3]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d115      	bne.n	8004d18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f7fd f8d3 	bl	8001ea4 <HAL_Delay>
      ms++;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3301      	adds	r3, #1
 8004d02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fa15 	bl	8005134 <USB_GetMode>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <USB_SetCurrentMode+0x84>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b31      	cmp	r3, #49	; 0x31
 8004d14:	d9f0      	bls.n	8004cf8 <USB_SetCurrentMode+0x60>
 8004d16:	e001      	b.n	8004d1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e005      	b.n	8004d28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b32      	cmp	r3, #50	; 0x32
 8004d20:	d101      	bne.n	8004d26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d30:	b084      	sub	sp, #16
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	e009      	b.n	8004d64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3340      	adds	r3, #64	; 0x40
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3301      	adds	r3, #1
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b0e      	cmp	r3, #14
 8004d68:	d9f2      	bls.n	8004d50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d11c      	bne.n	8004daa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d7e:	f043 0302 	orr.w	r3, r3, #2
 8004d82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38
 8004da8:	e00b      	b.n	8004dc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	2300      	movs	r3, #0
 8004dcc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	461a      	mov	r2, r3
 8004dde:	680b      	ldr	r3, [r1, #0]
 8004de0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d10c      	bne.n	8004e02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d104      	bne.n	8004df8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dee:	2100      	movs	r1, #0
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f965 	bl	80050c0 <USB_SetDevSpeed>
 8004df6:	e008      	b.n	8004e0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004df8:	2101      	movs	r1, #1
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f960 	bl	80050c0 <USB_SetDevSpeed>
 8004e00:	e003      	b.n	8004e0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e02:	2103      	movs	r1, #3
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f95b 	bl	80050c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f8f3 	bl	8004ff8 <USB_FlushTxFifo>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f91f 	bl	8005060 <USB_FlushRxFifo>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e32:	461a      	mov	r2, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e043      	b.n	8004ede <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e6c:	d118      	bne.n	8004ea0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	461a      	mov	r2, r3
 8004e82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e013      	b.n	8004eb2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e96:	461a      	mov	r2, r3
 8004e98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e008      	b.n	8004eb2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	461a      	mov	r2, r3
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ed6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3301      	adds	r3, #1
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d3b7      	bcc.n	8004e56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	e043      	b.n	8004f74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f02:	d118      	bne.n	8004f36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	461a      	mov	r2, r3
 8004f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e013      	b.n	8004f48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	e008      	b.n	8004f48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f42:	461a      	mov	r2, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	461a      	mov	r2, r3
 8004f56:	2300      	movs	r3, #0
 8004f58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f66:	461a      	mov	r2, r3
 8004f68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3301      	adds	r3, #1
 8004f72:	613b      	str	r3, [r7, #16]
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d3b7      	bcc.n	8004eec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f043 0210 	orr.w	r2, r3, #16
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <USB_DevInit+0x2c4>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f043 0208 	orr.w	r2, r3, #8
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fdc:	f043 0304 	orr.w	r3, r3, #4
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff0:	b004      	add	sp, #16
 8004ff2:	4770      	bx	lr
 8004ff4:	803c3800 	.word	0x803c3800

08004ff8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3301      	adds	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a13      	ldr	r2, [pc, #76]	; (800505c <USB_FlushTxFifo+0x64>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e01b      	b.n	8005050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	daf2      	bge.n	8005006 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	019b      	lsls	r3, r3, #6
 8005028:	f043 0220 	orr.w	r2, r3, #32
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3301      	adds	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <USB_FlushTxFifo+0x64>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e006      	b.n	8005050 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	2b20      	cmp	r3, #32
 800504c:	d0f0      	beq.n	8005030 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3714      	adds	r7, #20
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	00030d40 	.word	0x00030d40

08005060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3301      	adds	r3, #1
 8005070:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a11      	ldr	r2, [pc, #68]	; (80050bc <USB_FlushRxFifo+0x5c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e018      	b.n	80050b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	daf2      	bge.n	800506c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2210      	movs	r2, #16
 800508e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a08      	ldr	r2, [pc, #32]	; (80050bc <USB_FlushRxFifo+0x5c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e006      	b.n	80050b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d0f0      	beq.n	8005090 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	00030d40 	.word	0x00030d40

080050c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	78fb      	ldrb	r3, [r7, #3]
 80050da:	68f9      	ldr	r1, [r7, #12]
 80050dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800510c:	f023 0303 	bic.w	r3, r3, #3
 8005110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005120:	f043 0302 	orr.w	r3, r3, #2
 8005124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0301 	and.w	r3, r3, #1
}
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	3301      	adds	r3, #1
 8005160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a13      	ldr	r2, [pc, #76]	; (80051b4 <USB_CoreReset+0x64>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d901      	bls.n	800516e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e01b      	b.n	80051a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	daf2      	bge.n	800515c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f043 0201 	orr.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <USB_CoreReset+0x64>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d0f0      	beq.n	8005186 <USB_CoreReset+0x36>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	00030d40 	.word	0x00030d40

080051b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <SysTick_Handler+0x1c>)
 80051be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80051c0:	f000 f9ba 	bl	8005538 <xTaskGetSchedulerState>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d001      	beq.n	80051ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80051ca:	f000 fa25 	bl	8005618 <xPortSysTickHandler>
  }
}
 80051ce:	bf00      	nop
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	e000e010 	.word	0xe000e010

080051d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051de:	f3ef 8305 	mrs	r3, IPSR
 80051e2:	603b      	str	r3, [r7, #0]
  return(result);
 80051e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d003      	beq.n	80051f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051ea:	f06f 0305 	mvn.w	r3, #5
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	e00c      	b.n	800520c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051f2:	4b0a      	ldr	r3, [pc, #40]	; (800521c <osKernelInitialize+0x44>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d105      	bne.n	8005206 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <osKernelInitialize+0x44>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005200:	2300      	movs	r3, #0
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e002      	b.n	800520c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800520c:	687b      	ldr	r3, [r7, #4]
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200008f8 	.word	0x200008f8

08005220 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	601a      	str	r2, [r3, #0]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6892      	ldr	r2, [r2, #8]
 800527e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6852      	ldr	r2, [r2, #4]
 8005288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d103      	bne.n	800529c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	1e5a      	subs	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052c6:	4b4f      	ldr	r3, [pc, #316]	; (8005404 <xTaskIncrementTick+0x148>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f040 808f 	bne.w	80053ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052d0:	4b4d      	ldr	r3, [pc, #308]	; (8005408 <xTaskIncrementTick+0x14c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3301      	adds	r3, #1
 80052d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052d8:	4a4b      	ldr	r2, [pc, #300]	; (8005408 <xTaskIncrementTick+0x14c>)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d120      	bne.n	8005326 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80052e4:	4b49      	ldr	r3, [pc, #292]	; (800540c <xTaskIncrementTick+0x150>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00a      	beq.n	8005304 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <xTaskIncrementTick+0x46>
 8005304:	4b41      	ldr	r3, [pc, #260]	; (800540c <xTaskIncrementTick+0x150>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	4b41      	ldr	r3, [pc, #260]	; (8005410 <xTaskIncrementTick+0x154>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a3f      	ldr	r2, [pc, #252]	; (800540c <xTaskIncrementTick+0x150>)
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4a3f      	ldr	r2, [pc, #252]	; (8005410 <xTaskIncrementTick+0x154>)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <xTaskIncrementTick+0x158>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a3d      	ldr	r2, [pc, #244]	; (8005414 <xTaskIncrementTick+0x158>)
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	f000 f8e9 	bl	80054f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005326:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <xTaskIncrementTick+0x15c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d349      	bcc.n	80053c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005330:	4b36      	ldr	r3, [pc, #216]	; (800540c <xTaskIncrementTick+0x150>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533a:	4b37      	ldr	r3, [pc, #220]	; (8005418 <xTaskIncrementTick+0x15c>)
 800533c:	f04f 32ff 	mov.w	r2, #4294967295
 8005340:	601a      	str	r2, [r3, #0]
					break;
 8005342:	e03f      	b.n	80053c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005344:	4b31      	ldr	r3, [pc, #196]	; (800540c <xTaskIncrementTick+0x150>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d203      	bcs.n	8005364 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800535c:	4a2e      	ldr	r2, [pc, #184]	; (8005418 <xTaskIncrementTick+0x15c>)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005362:	e02f      	b.n	80053c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	3304      	adds	r3, #4
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff ff7d 	bl	8005268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3318      	adds	r3, #24
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff ff74 	bl	8005268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <xTaskIncrementTick+0x160>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d903      	bls.n	8005394 <xTaskIncrementTick+0xd8>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	4a22      	ldr	r2, [pc, #136]	; (800541c <xTaskIncrementTick+0x160>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <xTaskIncrementTick+0x164>)
 80053a2:	441a      	add	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f7ff ff38 	bl	8005220 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <xTaskIncrementTick+0x168>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d3b8      	bcc.n	8005330 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80053be:	2301      	movs	r3, #1
 80053c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c2:	e7b5      	b.n	8005330 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053c4:	4b17      	ldr	r3, [pc, #92]	; (8005424 <xTaskIncrementTick+0x168>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ca:	4915      	ldr	r1, [pc, #84]	; (8005420 <xTaskIncrementTick+0x164>)
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d901      	bls.n	80053e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80053dc:	2301      	movs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053e0:	4b11      	ldr	r3, [pc, #68]	; (8005428 <xTaskIncrementTick+0x16c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e004      	b.n	80053f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <xTaskIncrementTick+0x170>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3301      	adds	r3, #1
 80053f4:	4a0d      	ldr	r2, [pc, #52]	; (800542c <xTaskIncrementTick+0x170>)
 80053f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053f8:	697b      	ldr	r3, [r7, #20]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000d84 	.word	0x20000d84
 8005408:	20000d68 	.word	0x20000d68
 800540c:	20000d60 	.word	0x20000d60
 8005410:	20000d64 	.word	0x20000d64
 8005414:	20000d7c 	.word	0x20000d7c
 8005418:	20000d80 	.word	0x20000d80
 800541c:	20000d6c 	.word	0x20000d6c
 8005420:	20000900 	.word	0x20000900
 8005424:	200008fc 	.word	0x200008fc
 8005428:	20000d78 	.word	0x20000d78
 800542c:	20000d74 	.word	0x20000d74

08005430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005436:	4b2a      	ldr	r3, [pc, #168]	; (80054e0 <vTaskSwitchContext+0xb0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800543e:	4b29      	ldr	r3, [pc, #164]	; (80054e4 <vTaskSwitchContext+0xb4>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005444:	e046      	b.n	80054d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005446:	4b27      	ldr	r3, [pc, #156]	; (80054e4 <vTaskSwitchContext+0xb4>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544c:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <vTaskSwitchContext+0xb8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	e010      	b.n	8005476 <vTaskSwitchContext+0x46>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10a      	bne.n	8005470 <vTaskSwitchContext+0x40>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	607b      	str	r3, [r7, #4]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <vTaskSwitchContext+0x3e>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3b01      	subs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	491d      	ldr	r1, [pc, #116]	; (80054ec <vTaskSwitchContext+0xbc>)
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0e4      	beq.n	8005454 <vTaskSwitchContext+0x24>
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4a15      	ldr	r2, [pc, #84]	; (80054ec <vTaskSwitchContext+0xbc>)
 8005496:	4413      	add	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	3308      	adds	r3, #8
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d104      	bne.n	80054ba <vTaskSwitchContext+0x8a>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4a0b      	ldr	r2, [pc, #44]	; (80054f0 <vTaskSwitchContext+0xc0>)
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <vTaskSwitchContext+0xb8>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <vTaskSwitchContext+0xc0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3354      	adds	r3, #84	; 0x54
 80054d0:	4a08      	ldr	r2, [pc, #32]	; (80054f4 <vTaskSwitchContext+0xc4>)
 80054d2:	6013      	str	r3, [r2, #0]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	20000d84 	.word	0x20000d84
 80054e4:	20000d78 	.word	0x20000d78
 80054e8:	20000d6c 	.word	0x20000d6c
 80054ec:	20000900 	.word	0x20000900
 80054f0:	200008fc 	.word	0x200008fc
 80054f4:	2000000c 	.word	0x2000000c

080054f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <prvResetNextTaskUnblockTime+0x38>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <prvResetNextTaskUnblockTime+0x3c>)
 800550a:	f04f 32ff 	mov.w	r2, #4294967295
 800550e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005510:	e008      	b.n	8005524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005512:	4b07      	ldr	r3, [pc, #28]	; (8005530 <prvResetNextTaskUnblockTime+0x38>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a04      	ldr	r2, [pc, #16]	; (8005534 <prvResetNextTaskUnblockTime+0x3c>)
 8005522:	6013      	str	r3, [r2, #0]
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	20000d60 	.word	0x20000d60
 8005534:	20000d80 	.word	0x20000d80

08005538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <xTaskGetSchedulerState+0x34>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d102      	bne.n	800554c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005546:	2301      	movs	r3, #1
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	e008      	b.n	800555e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554c:	4b08      	ldr	r3, [pc, #32]	; (8005570 <xTaskGetSchedulerState+0x38>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005554:	2302      	movs	r3, #2
 8005556:	607b      	str	r3, [r7, #4]
 8005558:	e001      	b.n	800555e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800555a:	2300      	movs	r3, #0
 800555c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800555e:	687b      	ldr	r3, [r7, #4]
	}
 8005560:	4618      	mov	r0, r3
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	20000d70 	.word	0x20000d70
 8005570:	20000d84 	.word	0x20000d84
	...

08005580 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <pxCurrentTCBConst2>)
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	6808      	ldr	r0, [r1, #0]
 8005586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558a:	f380 8809 	msr	PSP, r0
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f04f 0000 	mov.w	r0, #0
 8005596:	f380 8811 	msr	BASEPRI, r0
 800559a:	4770      	bx	lr
 800559c:	f3af 8000 	nop.w

080055a0 <pxCurrentTCBConst2>:
 80055a0:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
	...

080055b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055b0:	f3ef 8009 	mrs	r0, PSP
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	4b15      	ldr	r3, [pc, #84]	; (8005610 <pxCurrentTCBConst>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	f01e 0f10 	tst.w	lr, #16
 80055c0:	bf08      	it	eq
 80055c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80055c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ca:	6010      	str	r0, [r2, #0]
 80055cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80055d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80055d4:	f380 8811 	msr	BASEPRI, r0
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f7ff ff26 	bl	8005430 <vTaskSwitchContext>
 80055e4:	f04f 0000 	mov.w	r0, #0
 80055e8:	f380 8811 	msr	BASEPRI, r0
 80055ec:	bc09      	pop	{r0, r3}
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6808      	ldr	r0, [r1, #0]
 80055f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f6:	f01e 0f10 	tst.w	lr, #16
 80055fa:	bf08      	it	eq
 80055fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005600:	f380 8809 	msr	PSP, r0
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w

08005610 <pxCurrentTCBConst>:
 8005610:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop

08005618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	607b      	str	r3, [r7, #4]
}
 8005630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005632:	f7ff fe43 	bl	80052bc <xTaskIncrementTick>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <xPortSysTickHandler+0x40>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800564e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <__errno>:
 800565c:	4b01      	ldr	r3, [pc, #4]	; (8005664 <__errno+0x8>)
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	2000000c 	.word	0x2000000c

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4d0d      	ldr	r5, [pc, #52]	; (80056a0 <__libc_init_array+0x38>)
 800566c:	4c0d      	ldr	r4, [pc, #52]	; (80056a4 <__libc_init_array+0x3c>)
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	2600      	movs	r6, #0
 8005674:	42a6      	cmp	r6, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	4d0b      	ldr	r5, [pc, #44]	; (80056a8 <__libc_init_array+0x40>)
 800567a:	4c0c      	ldr	r4, [pc, #48]	; (80056ac <__libc_init_array+0x44>)
 800567c:	f001 fbaa 	bl	8006dd4 <_init>
 8005680:	1b64      	subs	r4, r4, r5
 8005682:	10a4      	asrs	r4, r4, #2
 8005684:	2600      	movs	r6, #0
 8005686:	42a6      	cmp	r6, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005690:	4798      	blx	r3
 8005692:	3601      	adds	r6, #1
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f855 3b04 	ldr.w	r3, [r5], #4
 800569a:	4798      	blx	r3
 800569c:	3601      	adds	r6, #1
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	08006ee8 	.word	0x08006ee8
 80056a4:	08006ee8 	.word	0x08006ee8
 80056a8:	08006ee8 	.word	0x08006ee8
 80056ac:	08006eec 	.word	0x08006eec

080056b0 <__retarget_lock_acquire_recursive>:
 80056b0:	4770      	bx	lr

080056b2 <__retarget_lock_release_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <memcpy>:
 80056b4:	440a      	add	r2, r1
 80056b6:	4291      	cmp	r1, r2
 80056b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80056bc:	d100      	bne.n	80056c0 <memcpy+0xc>
 80056be:	4770      	bx	lr
 80056c0:	b510      	push	{r4, lr}
 80056c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056ca:	4291      	cmp	r1, r2
 80056cc:	d1f9      	bne.n	80056c2 <memcpy+0xe>
 80056ce:	bd10      	pop	{r4, pc}

080056d0 <memset>:
 80056d0:	4402      	add	r2, r0
 80056d2:	4603      	mov	r3, r0
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d100      	bne.n	80056da <memset+0xa>
 80056d8:	4770      	bx	lr
 80056da:	f803 1b01 	strb.w	r1, [r3], #1
 80056de:	e7f9      	b.n	80056d4 <memset+0x4>

080056e0 <sbrk_aligned>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4e0e      	ldr	r6, [pc, #56]	; (800571c <sbrk_aligned+0x3c>)
 80056e4:	460c      	mov	r4, r1
 80056e6:	6831      	ldr	r1, [r6, #0]
 80056e8:	4605      	mov	r5, r0
 80056ea:	b911      	cbnz	r1, 80056f2 <sbrk_aligned+0x12>
 80056ec:	f000 f88c 	bl	8005808 <_sbrk_r>
 80056f0:	6030      	str	r0, [r6, #0]
 80056f2:	4621      	mov	r1, r4
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 f887 	bl	8005808 <_sbrk_r>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	d00a      	beq.n	8005714 <sbrk_aligned+0x34>
 80056fe:	1cc4      	adds	r4, r0, #3
 8005700:	f024 0403 	bic.w	r4, r4, #3
 8005704:	42a0      	cmp	r0, r4
 8005706:	d007      	beq.n	8005718 <sbrk_aligned+0x38>
 8005708:	1a21      	subs	r1, r4, r0
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f87c 	bl	8005808 <_sbrk_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d101      	bne.n	8005718 <sbrk_aligned+0x38>
 8005714:	f04f 34ff 	mov.w	r4, #4294967295
 8005718:	4620      	mov	r0, r4
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	20000d90 	.word	0x20000d90

08005720 <_malloc_r>:
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	1ccd      	adds	r5, r1, #3
 8005726:	f025 0503 	bic.w	r5, r5, #3
 800572a:	3508      	adds	r5, #8
 800572c:	2d0c      	cmp	r5, #12
 800572e:	bf38      	it	cc
 8005730:	250c      	movcc	r5, #12
 8005732:	2d00      	cmp	r5, #0
 8005734:	4607      	mov	r7, r0
 8005736:	db01      	blt.n	800573c <_malloc_r+0x1c>
 8005738:	42a9      	cmp	r1, r5
 800573a:	d905      	bls.n	8005748 <_malloc_r+0x28>
 800573c:	230c      	movs	r3, #12
 800573e:	603b      	str	r3, [r7, #0]
 8005740:	2600      	movs	r6, #0
 8005742:	4630      	mov	r0, r6
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005748:	4e2e      	ldr	r6, [pc, #184]	; (8005804 <_malloc_r+0xe4>)
 800574a:	f000 f88d 	bl	8005868 <__malloc_lock>
 800574e:	6833      	ldr	r3, [r6, #0]
 8005750:	461c      	mov	r4, r3
 8005752:	bb34      	cbnz	r4, 80057a2 <_malloc_r+0x82>
 8005754:	4629      	mov	r1, r5
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff ffc2 	bl	80056e0 <sbrk_aligned>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	4604      	mov	r4, r0
 8005760:	d14d      	bne.n	80057fe <_malloc_r+0xde>
 8005762:	6834      	ldr	r4, [r6, #0]
 8005764:	4626      	mov	r6, r4
 8005766:	2e00      	cmp	r6, #0
 8005768:	d140      	bne.n	80057ec <_malloc_r+0xcc>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	4631      	mov	r1, r6
 800576e:	4638      	mov	r0, r7
 8005770:	eb04 0803 	add.w	r8, r4, r3
 8005774:	f000 f848 	bl	8005808 <_sbrk_r>
 8005778:	4580      	cmp	r8, r0
 800577a:	d13a      	bne.n	80057f2 <_malloc_r+0xd2>
 800577c:	6821      	ldr	r1, [r4, #0]
 800577e:	3503      	adds	r5, #3
 8005780:	1a6d      	subs	r5, r5, r1
 8005782:	f025 0503 	bic.w	r5, r5, #3
 8005786:	3508      	adds	r5, #8
 8005788:	2d0c      	cmp	r5, #12
 800578a:	bf38      	it	cc
 800578c:	250c      	movcc	r5, #12
 800578e:	4629      	mov	r1, r5
 8005790:	4638      	mov	r0, r7
 8005792:	f7ff ffa5 	bl	80056e0 <sbrk_aligned>
 8005796:	3001      	adds	r0, #1
 8005798:	d02b      	beq.n	80057f2 <_malloc_r+0xd2>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	442b      	add	r3, r5
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	e00e      	b.n	80057c0 <_malloc_r+0xa0>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	1b52      	subs	r2, r2, r5
 80057a6:	d41e      	bmi.n	80057e6 <_malloc_r+0xc6>
 80057a8:	2a0b      	cmp	r2, #11
 80057aa:	d916      	bls.n	80057da <_malloc_r+0xba>
 80057ac:	1961      	adds	r1, r4, r5
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	6025      	str	r5, [r4, #0]
 80057b2:	bf18      	it	ne
 80057b4:	6059      	strne	r1, [r3, #4]
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	bf08      	it	eq
 80057ba:	6031      	streq	r1, [r6, #0]
 80057bc:	5162      	str	r2, [r4, r5]
 80057be:	604b      	str	r3, [r1, #4]
 80057c0:	4638      	mov	r0, r7
 80057c2:	f104 060b 	add.w	r6, r4, #11
 80057c6:	f000 f855 	bl	8005874 <__malloc_unlock>
 80057ca:	f026 0607 	bic.w	r6, r6, #7
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	1af2      	subs	r2, r6, r3
 80057d2:	d0b6      	beq.n	8005742 <_malloc_r+0x22>
 80057d4:	1b9b      	subs	r3, r3, r6
 80057d6:	50a3      	str	r3, [r4, r2]
 80057d8:	e7b3      	b.n	8005742 <_malloc_r+0x22>
 80057da:	6862      	ldr	r2, [r4, #4]
 80057dc:	42a3      	cmp	r3, r4
 80057de:	bf0c      	ite	eq
 80057e0:	6032      	streq	r2, [r6, #0]
 80057e2:	605a      	strne	r2, [r3, #4]
 80057e4:	e7ec      	b.n	80057c0 <_malloc_r+0xa0>
 80057e6:	4623      	mov	r3, r4
 80057e8:	6864      	ldr	r4, [r4, #4]
 80057ea:	e7b2      	b.n	8005752 <_malloc_r+0x32>
 80057ec:	4634      	mov	r4, r6
 80057ee:	6876      	ldr	r6, [r6, #4]
 80057f0:	e7b9      	b.n	8005766 <_malloc_r+0x46>
 80057f2:	230c      	movs	r3, #12
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	4638      	mov	r0, r7
 80057f8:	f000 f83c 	bl	8005874 <__malloc_unlock>
 80057fc:	e7a1      	b.n	8005742 <_malloc_r+0x22>
 80057fe:	6025      	str	r5, [r4, #0]
 8005800:	e7de      	b.n	80057c0 <_malloc_r+0xa0>
 8005802:	bf00      	nop
 8005804:	20000d8c 	.word	0x20000d8c

08005808 <_sbrk_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4d06      	ldr	r5, [pc, #24]	; (8005824 <_sbrk_r+0x1c>)
 800580c:	2300      	movs	r3, #0
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	f7fc fa92 	bl	8001d3c <_sbrk>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_sbrk_r+0x1a>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_sbrk_r+0x1a>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	20000d94 	.word	0x20000d94

08005828 <siprintf>:
 8005828:	b40e      	push	{r1, r2, r3}
 800582a:	b500      	push	{lr}
 800582c:	b09c      	sub	sp, #112	; 0x70
 800582e:	ab1d      	add	r3, sp, #116	; 0x74
 8005830:	9002      	str	r0, [sp, #8]
 8005832:	9006      	str	r0, [sp, #24]
 8005834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005838:	4809      	ldr	r0, [pc, #36]	; (8005860 <siprintf+0x38>)
 800583a:	9107      	str	r1, [sp, #28]
 800583c:	9104      	str	r1, [sp, #16]
 800583e:	4909      	ldr	r1, [pc, #36]	; (8005864 <siprintf+0x3c>)
 8005840:	f853 2b04 	ldr.w	r2, [r3], #4
 8005844:	9105      	str	r1, [sp, #20]
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	a902      	add	r1, sp, #8
 800584c:	f000 f8c0 	bl	80059d0 <_svfiprintf_r>
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	b01c      	add	sp, #112	; 0x70
 8005858:	f85d eb04 	ldr.w	lr, [sp], #4
 800585c:	b003      	add	sp, #12
 800585e:	4770      	bx	lr
 8005860:	2000000c 	.word	0x2000000c
 8005864:	ffff0208 	.word	0xffff0208

08005868 <__malloc_lock>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__malloc_lock+0x8>)
 800586a:	f7ff bf21 	b.w	80056b0 <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	20000d88 	.word	0x20000d88

08005874 <__malloc_unlock>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__malloc_unlock+0x8>)
 8005876:	f7ff bf1c 	b.w	80056b2 <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	20000d88 	.word	0x20000d88

08005880 <_free_r>:
 8005880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005882:	2900      	cmp	r1, #0
 8005884:	d044      	beq.n	8005910 <_free_r+0x90>
 8005886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588a:	9001      	str	r0, [sp, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f1a1 0404 	sub.w	r4, r1, #4
 8005892:	bfb8      	it	lt
 8005894:	18e4      	addlt	r4, r4, r3
 8005896:	f7ff ffe7 	bl	8005868 <__malloc_lock>
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <_free_r+0x94>)
 800589c:	9801      	ldr	r0, [sp, #4]
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	b933      	cbnz	r3, 80058b0 <_free_r+0x30>
 80058a2:	6063      	str	r3, [r4, #4]
 80058a4:	6014      	str	r4, [r2, #0]
 80058a6:	b003      	add	sp, #12
 80058a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ac:	f7ff bfe2 	b.w	8005874 <__malloc_unlock>
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	d908      	bls.n	80058c6 <_free_r+0x46>
 80058b4:	6825      	ldr	r5, [r4, #0]
 80058b6:	1961      	adds	r1, r4, r5
 80058b8:	428b      	cmp	r3, r1
 80058ba:	bf01      	itttt	eq
 80058bc:	6819      	ldreq	r1, [r3, #0]
 80058be:	685b      	ldreq	r3, [r3, #4]
 80058c0:	1949      	addeq	r1, r1, r5
 80058c2:	6021      	streq	r1, [r4, #0]
 80058c4:	e7ed      	b.n	80058a2 <_free_r+0x22>
 80058c6:	461a      	mov	r2, r3
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	b10b      	cbz	r3, 80058d0 <_free_r+0x50>
 80058cc:	42a3      	cmp	r3, r4
 80058ce:	d9fa      	bls.n	80058c6 <_free_r+0x46>
 80058d0:	6811      	ldr	r1, [r2, #0]
 80058d2:	1855      	adds	r5, r2, r1
 80058d4:	42a5      	cmp	r5, r4
 80058d6:	d10b      	bne.n	80058f0 <_free_r+0x70>
 80058d8:	6824      	ldr	r4, [r4, #0]
 80058da:	4421      	add	r1, r4
 80058dc:	1854      	adds	r4, r2, r1
 80058de:	42a3      	cmp	r3, r4
 80058e0:	6011      	str	r1, [r2, #0]
 80058e2:	d1e0      	bne.n	80058a6 <_free_r+0x26>
 80058e4:	681c      	ldr	r4, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	6053      	str	r3, [r2, #4]
 80058ea:	4421      	add	r1, r4
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	e7da      	b.n	80058a6 <_free_r+0x26>
 80058f0:	d902      	bls.n	80058f8 <_free_r+0x78>
 80058f2:	230c      	movs	r3, #12
 80058f4:	6003      	str	r3, [r0, #0]
 80058f6:	e7d6      	b.n	80058a6 <_free_r+0x26>
 80058f8:	6825      	ldr	r5, [r4, #0]
 80058fa:	1961      	adds	r1, r4, r5
 80058fc:	428b      	cmp	r3, r1
 80058fe:	bf04      	itt	eq
 8005900:	6819      	ldreq	r1, [r3, #0]
 8005902:	685b      	ldreq	r3, [r3, #4]
 8005904:	6063      	str	r3, [r4, #4]
 8005906:	bf04      	itt	eq
 8005908:	1949      	addeq	r1, r1, r5
 800590a:	6021      	streq	r1, [r4, #0]
 800590c:	6054      	str	r4, [r2, #4]
 800590e:	e7ca      	b.n	80058a6 <_free_r+0x26>
 8005910:	b003      	add	sp, #12
 8005912:	bd30      	pop	{r4, r5, pc}
 8005914:	20000d8c 	.word	0x20000d8c

08005918 <__ssputs_r>:
 8005918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591c:	688e      	ldr	r6, [r1, #8]
 800591e:	429e      	cmp	r6, r3
 8005920:	4682      	mov	sl, r0
 8005922:	460c      	mov	r4, r1
 8005924:	4690      	mov	r8, r2
 8005926:	461f      	mov	r7, r3
 8005928:	d838      	bhi.n	800599c <__ssputs_r+0x84>
 800592a:	898a      	ldrh	r2, [r1, #12]
 800592c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005930:	d032      	beq.n	8005998 <__ssputs_r+0x80>
 8005932:	6825      	ldr	r5, [r4, #0]
 8005934:	6909      	ldr	r1, [r1, #16]
 8005936:	eba5 0901 	sub.w	r9, r5, r1
 800593a:	6965      	ldr	r5, [r4, #20]
 800593c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005944:	3301      	adds	r3, #1
 8005946:	444b      	add	r3, r9
 8005948:	106d      	asrs	r5, r5, #1
 800594a:	429d      	cmp	r5, r3
 800594c:	bf38      	it	cc
 800594e:	461d      	movcc	r5, r3
 8005950:	0553      	lsls	r3, r2, #21
 8005952:	d531      	bpl.n	80059b8 <__ssputs_r+0xa0>
 8005954:	4629      	mov	r1, r5
 8005956:	f7ff fee3 	bl	8005720 <_malloc_r>
 800595a:	4606      	mov	r6, r0
 800595c:	b950      	cbnz	r0, 8005974 <__ssputs_r+0x5c>
 800595e:	230c      	movs	r3, #12
 8005960:	f8ca 3000 	str.w	r3, [sl]
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596a:	81a3      	strh	r3, [r4, #12]
 800596c:	f04f 30ff 	mov.w	r0, #4294967295
 8005970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005974:	6921      	ldr	r1, [r4, #16]
 8005976:	464a      	mov	r2, r9
 8005978:	f7ff fe9c 	bl	80056b4 <memcpy>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	6126      	str	r6, [r4, #16]
 800598a:	6165      	str	r5, [r4, #20]
 800598c:	444e      	add	r6, r9
 800598e:	eba5 0509 	sub.w	r5, r5, r9
 8005992:	6026      	str	r6, [r4, #0]
 8005994:	60a5      	str	r5, [r4, #8]
 8005996:	463e      	mov	r6, r7
 8005998:	42be      	cmp	r6, r7
 800599a:	d900      	bls.n	800599e <__ssputs_r+0x86>
 800599c:	463e      	mov	r6, r7
 800599e:	6820      	ldr	r0, [r4, #0]
 80059a0:	4632      	mov	r2, r6
 80059a2:	4641      	mov	r1, r8
 80059a4:	f000 faa8 	bl	8005ef8 <memmove>
 80059a8:	68a3      	ldr	r3, [r4, #8]
 80059aa:	1b9b      	subs	r3, r3, r6
 80059ac:	60a3      	str	r3, [r4, #8]
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	4433      	add	r3, r6
 80059b2:	6023      	str	r3, [r4, #0]
 80059b4:	2000      	movs	r0, #0
 80059b6:	e7db      	b.n	8005970 <__ssputs_r+0x58>
 80059b8:	462a      	mov	r2, r5
 80059ba:	f000 fab7 	bl	8005f2c <_realloc_r>
 80059be:	4606      	mov	r6, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d1e1      	bne.n	8005988 <__ssputs_r+0x70>
 80059c4:	6921      	ldr	r1, [r4, #16]
 80059c6:	4650      	mov	r0, sl
 80059c8:	f7ff ff5a 	bl	8005880 <_free_r>
 80059cc:	e7c7      	b.n	800595e <__ssputs_r+0x46>
	...

080059d0 <_svfiprintf_r>:
 80059d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d4:	4698      	mov	r8, r3
 80059d6:	898b      	ldrh	r3, [r1, #12]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	b09d      	sub	sp, #116	; 0x74
 80059dc:	4607      	mov	r7, r0
 80059de:	460d      	mov	r5, r1
 80059e0:	4614      	mov	r4, r2
 80059e2:	d50e      	bpl.n	8005a02 <_svfiprintf_r+0x32>
 80059e4:	690b      	ldr	r3, [r1, #16]
 80059e6:	b963      	cbnz	r3, 8005a02 <_svfiprintf_r+0x32>
 80059e8:	2140      	movs	r1, #64	; 0x40
 80059ea:	f7ff fe99 	bl	8005720 <_malloc_r>
 80059ee:	6028      	str	r0, [r5, #0]
 80059f0:	6128      	str	r0, [r5, #16]
 80059f2:	b920      	cbnz	r0, 80059fe <_svfiprintf_r+0x2e>
 80059f4:	230c      	movs	r3, #12
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e0d1      	b.n	8005ba2 <_svfiprintf_r+0x1d2>
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	616b      	str	r3, [r5, #20]
 8005a02:	2300      	movs	r3, #0
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	2320      	movs	r3, #32
 8005a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a10:	2330      	movs	r3, #48	; 0x30
 8005a12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005bbc <_svfiprintf_r+0x1ec>
 8005a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a1a:	f04f 0901 	mov.w	r9, #1
 8005a1e:	4623      	mov	r3, r4
 8005a20:	469a      	mov	sl, r3
 8005a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a26:	b10a      	cbz	r2, 8005a2c <_svfiprintf_r+0x5c>
 8005a28:	2a25      	cmp	r2, #37	; 0x25
 8005a2a:	d1f9      	bne.n	8005a20 <_svfiprintf_r+0x50>
 8005a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a30:	d00b      	beq.n	8005a4a <_svfiprintf_r+0x7a>
 8005a32:	465b      	mov	r3, fp
 8005a34:	4622      	mov	r2, r4
 8005a36:	4629      	mov	r1, r5
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7ff ff6d 	bl	8005918 <__ssputs_r>
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f000 80aa 	beq.w	8005b98 <_svfiprintf_r+0x1c8>
 8005a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a46:	445a      	add	r2, fp
 8005a48:	9209      	str	r2, [sp, #36]	; 0x24
 8005a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80a2 	beq.w	8005b98 <_svfiprintf_r+0x1c8>
 8005a54:	2300      	movs	r3, #0
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a5e:	f10a 0a01 	add.w	sl, sl, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	9307      	str	r3, [sp, #28]
 8005a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a6c:	4654      	mov	r4, sl
 8005a6e:	2205      	movs	r2, #5
 8005a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a74:	4851      	ldr	r0, [pc, #324]	; (8005bbc <_svfiprintf_r+0x1ec>)
 8005a76:	f7fa fbbb 	bl	80001f0 <memchr>
 8005a7a:	9a04      	ldr	r2, [sp, #16]
 8005a7c:	b9d8      	cbnz	r0, 8005ab6 <_svfiprintf_r+0xe6>
 8005a7e:	06d0      	lsls	r0, r2, #27
 8005a80:	bf44      	itt	mi
 8005a82:	2320      	movmi	r3, #32
 8005a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a88:	0711      	lsls	r1, r2, #28
 8005a8a:	bf44      	itt	mi
 8005a8c:	232b      	movmi	r3, #43	; 0x2b
 8005a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a92:	f89a 3000 	ldrb.w	r3, [sl]
 8005a96:	2b2a      	cmp	r3, #42	; 0x2a
 8005a98:	d015      	beq.n	8005ac6 <_svfiprintf_r+0xf6>
 8005a9a:	9a07      	ldr	r2, [sp, #28]
 8005a9c:	4654      	mov	r4, sl
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f04f 0c0a 	mov.w	ip, #10
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aaa:	3b30      	subs	r3, #48	; 0x30
 8005aac:	2b09      	cmp	r3, #9
 8005aae:	d94e      	bls.n	8005b4e <_svfiprintf_r+0x17e>
 8005ab0:	b1b0      	cbz	r0, 8005ae0 <_svfiprintf_r+0x110>
 8005ab2:	9207      	str	r2, [sp, #28]
 8005ab4:	e014      	b.n	8005ae0 <_svfiprintf_r+0x110>
 8005ab6:	eba0 0308 	sub.w	r3, r0, r8
 8005aba:	fa09 f303 	lsl.w	r3, r9, r3
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	9304      	str	r3, [sp, #16]
 8005ac2:	46a2      	mov	sl, r4
 8005ac4:	e7d2      	b.n	8005a6c <_svfiprintf_r+0x9c>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	9103      	str	r1, [sp, #12]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	bfbb      	ittet	lt
 8005ad2:	425b      	neglt	r3, r3
 8005ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ad8:	9307      	strge	r3, [sp, #28]
 8005ada:	9307      	strlt	r3, [sp, #28]
 8005adc:	bfb8      	it	lt
 8005ade:	9204      	strlt	r2, [sp, #16]
 8005ae0:	7823      	ldrb	r3, [r4, #0]
 8005ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ae4:	d10c      	bne.n	8005b00 <_svfiprintf_r+0x130>
 8005ae6:	7863      	ldrb	r3, [r4, #1]
 8005ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aea:	d135      	bne.n	8005b58 <_svfiprintf_r+0x188>
 8005aec:	9b03      	ldr	r3, [sp, #12]
 8005aee:	1d1a      	adds	r2, r3, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	9203      	str	r2, [sp, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bfb8      	it	lt
 8005af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005afc:	3402      	adds	r4, #2
 8005afe:	9305      	str	r3, [sp, #20]
 8005b00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bcc <_svfiprintf_r+0x1fc>
 8005b04:	7821      	ldrb	r1, [r4, #0]
 8005b06:	2203      	movs	r2, #3
 8005b08:	4650      	mov	r0, sl
 8005b0a:	f7fa fb71 	bl	80001f0 <memchr>
 8005b0e:	b140      	cbz	r0, 8005b22 <_svfiprintf_r+0x152>
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	eba0 000a 	sub.w	r0, r0, sl
 8005b16:	fa03 f000 	lsl.w	r0, r3, r0
 8005b1a:	9b04      	ldr	r3, [sp, #16]
 8005b1c:	4303      	orrs	r3, r0
 8005b1e:	3401      	adds	r4, #1
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b26:	4826      	ldr	r0, [pc, #152]	; (8005bc0 <_svfiprintf_r+0x1f0>)
 8005b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b2c:	2206      	movs	r2, #6
 8005b2e:	f7fa fb5f 	bl	80001f0 <memchr>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d038      	beq.n	8005ba8 <_svfiprintf_r+0x1d8>
 8005b36:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <_svfiprintf_r+0x1f4>)
 8005b38:	bb1b      	cbnz	r3, 8005b82 <_svfiprintf_r+0x1b2>
 8005b3a:	9b03      	ldr	r3, [sp, #12]
 8005b3c:	3307      	adds	r3, #7
 8005b3e:	f023 0307 	bic.w	r3, r3, #7
 8005b42:	3308      	adds	r3, #8
 8005b44:	9303      	str	r3, [sp, #12]
 8005b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b48:	4433      	add	r3, r6
 8005b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b4c:	e767      	b.n	8005a1e <_svfiprintf_r+0x4e>
 8005b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b52:	460c      	mov	r4, r1
 8005b54:	2001      	movs	r0, #1
 8005b56:	e7a5      	b.n	8005aa4 <_svfiprintf_r+0xd4>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	3401      	adds	r4, #1
 8005b5c:	9305      	str	r3, [sp, #20]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	f04f 0c0a 	mov.w	ip, #10
 8005b64:	4620      	mov	r0, r4
 8005b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b6a:	3a30      	subs	r2, #48	; 0x30
 8005b6c:	2a09      	cmp	r2, #9
 8005b6e:	d903      	bls.n	8005b78 <_svfiprintf_r+0x1a8>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0c5      	beq.n	8005b00 <_svfiprintf_r+0x130>
 8005b74:	9105      	str	r1, [sp, #20]
 8005b76:	e7c3      	b.n	8005b00 <_svfiprintf_r+0x130>
 8005b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e7f0      	b.n	8005b64 <_svfiprintf_r+0x194>
 8005b82:	ab03      	add	r3, sp, #12
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	462a      	mov	r2, r5
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <_svfiprintf_r+0x1f8>)
 8005b8a:	a904      	add	r1, sp, #16
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f3af 8000 	nop.w
 8005b92:	1c42      	adds	r2, r0, #1
 8005b94:	4606      	mov	r6, r0
 8005b96:	d1d6      	bne.n	8005b46 <_svfiprintf_r+0x176>
 8005b98:	89ab      	ldrh	r3, [r5, #12]
 8005b9a:	065b      	lsls	r3, r3, #25
 8005b9c:	f53f af2c 	bmi.w	80059f8 <_svfiprintf_r+0x28>
 8005ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ba2:	b01d      	add	sp, #116	; 0x74
 8005ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ba8:	ab03      	add	r3, sp, #12
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	462a      	mov	r2, r5
 8005bae:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <_svfiprintf_r+0x1f8>)
 8005bb0:	a904      	add	r1, sp, #16
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	f000 f87a 	bl	8005cac <_printf_i>
 8005bb8:	e7eb      	b.n	8005b92 <_svfiprintf_r+0x1c2>
 8005bba:	bf00      	nop
 8005bbc:	08006e7c 	.word	0x08006e7c
 8005bc0:	08006e86 	.word	0x08006e86
 8005bc4:	00000000 	.word	0x00000000
 8005bc8:	08005919 	.word	0x08005919
 8005bcc:	08006e82 	.word	0x08006e82

08005bd0 <_printf_common>:
 8005bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd4:	4616      	mov	r6, r2
 8005bd6:	4699      	mov	r9, r3
 8005bd8:	688a      	ldr	r2, [r1, #8]
 8005bda:	690b      	ldr	r3, [r1, #16]
 8005bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005be0:	4293      	cmp	r3, r2
 8005be2:	bfb8      	it	lt
 8005be4:	4613      	movlt	r3, r2
 8005be6:	6033      	str	r3, [r6, #0]
 8005be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bec:	4607      	mov	r7, r0
 8005bee:	460c      	mov	r4, r1
 8005bf0:	b10a      	cbz	r2, 8005bf6 <_printf_common+0x26>
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	0699      	lsls	r1, r3, #26
 8005bfa:	bf42      	ittt	mi
 8005bfc:	6833      	ldrmi	r3, [r6, #0]
 8005bfe:	3302      	addmi	r3, #2
 8005c00:	6033      	strmi	r3, [r6, #0]
 8005c02:	6825      	ldr	r5, [r4, #0]
 8005c04:	f015 0506 	ands.w	r5, r5, #6
 8005c08:	d106      	bne.n	8005c18 <_printf_common+0x48>
 8005c0a:	f104 0a19 	add.w	sl, r4, #25
 8005c0e:	68e3      	ldr	r3, [r4, #12]
 8005c10:	6832      	ldr	r2, [r6, #0]
 8005c12:	1a9b      	subs	r3, r3, r2
 8005c14:	42ab      	cmp	r3, r5
 8005c16:	dc26      	bgt.n	8005c66 <_printf_common+0x96>
 8005c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c1c:	1e13      	subs	r3, r2, #0
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	bf18      	it	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	0692      	lsls	r2, r2, #26
 8005c26:	d42b      	bmi.n	8005c80 <_printf_common+0xb0>
 8005c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	4638      	mov	r0, r7
 8005c30:	47c0      	blx	r8
 8005c32:	3001      	adds	r0, #1
 8005c34:	d01e      	beq.n	8005c74 <_printf_common+0xa4>
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	68e5      	ldr	r5, [r4, #12]
 8005c3a:	6832      	ldr	r2, [r6, #0]
 8005c3c:	f003 0306 	and.w	r3, r3, #6
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	bf08      	it	eq
 8005c44:	1aad      	subeq	r5, r5, r2
 8005c46:	68a3      	ldr	r3, [r4, #8]
 8005c48:	6922      	ldr	r2, [r4, #16]
 8005c4a:	bf0c      	ite	eq
 8005c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c50:	2500      	movne	r5, #0
 8005c52:	4293      	cmp	r3, r2
 8005c54:	bfc4      	itt	gt
 8005c56:	1a9b      	subgt	r3, r3, r2
 8005c58:	18ed      	addgt	r5, r5, r3
 8005c5a:	2600      	movs	r6, #0
 8005c5c:	341a      	adds	r4, #26
 8005c5e:	42b5      	cmp	r5, r6
 8005c60:	d11a      	bne.n	8005c98 <_printf_common+0xc8>
 8005c62:	2000      	movs	r0, #0
 8005c64:	e008      	b.n	8005c78 <_printf_common+0xa8>
 8005c66:	2301      	movs	r3, #1
 8005c68:	4652      	mov	r2, sl
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	47c0      	blx	r8
 8005c70:	3001      	adds	r0, #1
 8005c72:	d103      	bne.n	8005c7c <_printf_common+0xac>
 8005c74:	f04f 30ff 	mov.w	r0, #4294967295
 8005c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	e7c6      	b.n	8005c0e <_printf_common+0x3e>
 8005c80:	18e1      	adds	r1, r4, r3
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	2030      	movs	r0, #48	; 0x30
 8005c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c8a:	4422      	add	r2, r4
 8005c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c94:	3302      	adds	r3, #2
 8005c96:	e7c7      	b.n	8005c28 <_printf_common+0x58>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	4622      	mov	r2, r4
 8005c9c:	4649      	mov	r1, r9
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	47c0      	blx	r8
 8005ca2:	3001      	adds	r0, #1
 8005ca4:	d0e6      	beq.n	8005c74 <_printf_common+0xa4>
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	e7d9      	b.n	8005c5e <_printf_common+0x8e>
	...

08005cac <_printf_i>:
 8005cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	7e0f      	ldrb	r7, [r1, #24]
 8005cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb4:	2f78      	cmp	r7, #120	; 0x78
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	4680      	mov	r8, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	469a      	mov	sl, r3
 8005cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cc2:	d807      	bhi.n	8005cd4 <_printf_i+0x28>
 8005cc4:	2f62      	cmp	r7, #98	; 0x62
 8005cc6:	d80a      	bhi.n	8005cde <_printf_i+0x32>
 8005cc8:	2f00      	cmp	r7, #0
 8005cca:	f000 80d8 	beq.w	8005e7e <_printf_i+0x1d2>
 8005cce:	2f58      	cmp	r7, #88	; 0x58
 8005cd0:	f000 80a3 	beq.w	8005e1a <_printf_i+0x16e>
 8005cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cdc:	e03a      	b.n	8005d54 <_printf_i+0xa8>
 8005cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ce2:	2b15      	cmp	r3, #21
 8005ce4:	d8f6      	bhi.n	8005cd4 <_printf_i+0x28>
 8005ce6:	a101      	add	r1, pc, #4	; (adr r1, 8005cec <_printf_i+0x40>)
 8005ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cec:	08005d45 	.word	0x08005d45
 8005cf0:	08005d59 	.word	0x08005d59
 8005cf4:	08005cd5 	.word	0x08005cd5
 8005cf8:	08005cd5 	.word	0x08005cd5
 8005cfc:	08005cd5 	.word	0x08005cd5
 8005d00:	08005cd5 	.word	0x08005cd5
 8005d04:	08005d59 	.word	0x08005d59
 8005d08:	08005cd5 	.word	0x08005cd5
 8005d0c:	08005cd5 	.word	0x08005cd5
 8005d10:	08005cd5 	.word	0x08005cd5
 8005d14:	08005cd5 	.word	0x08005cd5
 8005d18:	08005e65 	.word	0x08005e65
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005e47 	.word	0x08005e47
 8005d24:	08005cd5 	.word	0x08005cd5
 8005d28:	08005cd5 	.word	0x08005cd5
 8005d2c:	08005e87 	.word	0x08005e87
 8005d30:	08005cd5 	.word	0x08005cd5
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005cd5 	.word	0x08005cd5
 8005d3c:	08005cd5 	.word	0x08005cd5
 8005d40:	08005e4f 	.word	0x08005e4f
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	1d1a      	adds	r2, r3, #4
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	602a      	str	r2, [r5, #0]
 8005d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d54:	2301      	movs	r3, #1
 8005d56:	e0a3      	b.n	8005ea0 <_printf_i+0x1f4>
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	6829      	ldr	r1, [r5, #0]
 8005d5c:	0606      	lsls	r6, r0, #24
 8005d5e:	f101 0304 	add.w	r3, r1, #4
 8005d62:	d50a      	bpl.n	8005d7a <_printf_i+0xce>
 8005d64:	680e      	ldr	r6, [r1, #0]
 8005d66:	602b      	str	r3, [r5, #0]
 8005d68:	2e00      	cmp	r6, #0
 8005d6a:	da03      	bge.n	8005d74 <_printf_i+0xc8>
 8005d6c:	232d      	movs	r3, #45	; 0x2d
 8005d6e:	4276      	negs	r6, r6
 8005d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d74:	485e      	ldr	r0, [pc, #376]	; (8005ef0 <_printf_i+0x244>)
 8005d76:	230a      	movs	r3, #10
 8005d78:	e019      	b.n	8005dae <_printf_i+0x102>
 8005d7a:	680e      	ldr	r6, [r1, #0]
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d82:	bf18      	it	ne
 8005d84:	b236      	sxthne	r6, r6
 8005d86:	e7ef      	b.n	8005d68 <_printf_i+0xbc>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	6820      	ldr	r0, [r4, #0]
 8005d8c:	1d19      	adds	r1, r3, #4
 8005d8e:	6029      	str	r1, [r5, #0]
 8005d90:	0601      	lsls	r1, r0, #24
 8005d92:	d501      	bpl.n	8005d98 <_printf_i+0xec>
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <_printf_i+0xf2>
 8005d98:	0646      	lsls	r6, r0, #25
 8005d9a:	d5fb      	bpl.n	8005d94 <_printf_i+0xe8>
 8005d9c:	881e      	ldrh	r6, [r3, #0]
 8005d9e:	4854      	ldr	r0, [pc, #336]	; (8005ef0 <_printf_i+0x244>)
 8005da0:	2f6f      	cmp	r7, #111	; 0x6f
 8005da2:	bf0c      	ite	eq
 8005da4:	2308      	moveq	r3, #8
 8005da6:	230a      	movne	r3, #10
 8005da8:	2100      	movs	r1, #0
 8005daa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dae:	6865      	ldr	r5, [r4, #4]
 8005db0:	60a5      	str	r5, [r4, #8]
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	bfa2      	ittt	ge
 8005db6:	6821      	ldrge	r1, [r4, #0]
 8005db8:	f021 0104 	bicge.w	r1, r1, #4
 8005dbc:	6021      	strge	r1, [r4, #0]
 8005dbe:	b90e      	cbnz	r6, 8005dc4 <_printf_i+0x118>
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	d04d      	beq.n	8005e60 <_printf_i+0x1b4>
 8005dc4:	4615      	mov	r5, r2
 8005dc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dca:	fb03 6711 	mls	r7, r3, r1, r6
 8005dce:	5dc7      	ldrb	r7, [r0, r7]
 8005dd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dd4:	4637      	mov	r7, r6
 8005dd6:	42bb      	cmp	r3, r7
 8005dd8:	460e      	mov	r6, r1
 8005dda:	d9f4      	bls.n	8005dc6 <_printf_i+0x11a>
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d10b      	bne.n	8005df8 <_printf_i+0x14c>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	07de      	lsls	r6, r3, #31
 8005de4:	d508      	bpl.n	8005df8 <_printf_i+0x14c>
 8005de6:	6923      	ldr	r3, [r4, #16]
 8005de8:	6861      	ldr	r1, [r4, #4]
 8005dea:	4299      	cmp	r1, r3
 8005dec:	bfde      	ittt	le
 8005dee:	2330      	movle	r3, #48	; 0x30
 8005df0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005df4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005df8:	1b52      	subs	r2, r2, r5
 8005dfa:	6122      	str	r2, [r4, #16]
 8005dfc:	f8cd a000 	str.w	sl, [sp]
 8005e00:	464b      	mov	r3, r9
 8005e02:	aa03      	add	r2, sp, #12
 8005e04:	4621      	mov	r1, r4
 8005e06:	4640      	mov	r0, r8
 8005e08:	f7ff fee2 	bl	8005bd0 <_printf_common>
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d14c      	bne.n	8005eaa <_printf_i+0x1fe>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	b004      	add	sp, #16
 8005e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1a:	4835      	ldr	r0, [pc, #212]	; (8005ef0 <_printf_i+0x244>)
 8005e1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e20:	6829      	ldr	r1, [r5, #0]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e28:	6029      	str	r1, [r5, #0]
 8005e2a:	061d      	lsls	r5, r3, #24
 8005e2c:	d514      	bpl.n	8005e58 <_printf_i+0x1ac>
 8005e2e:	07df      	lsls	r7, r3, #31
 8005e30:	bf44      	itt	mi
 8005e32:	f043 0320 	orrmi.w	r3, r3, #32
 8005e36:	6023      	strmi	r3, [r4, #0]
 8005e38:	b91e      	cbnz	r6, 8005e42 <_printf_i+0x196>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	f023 0320 	bic.w	r3, r3, #32
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	2310      	movs	r3, #16
 8005e44:	e7b0      	b.n	8005da8 <_printf_i+0xfc>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f043 0320 	orr.w	r3, r3, #32
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	2378      	movs	r3, #120	; 0x78
 8005e50:	4828      	ldr	r0, [pc, #160]	; (8005ef4 <_printf_i+0x248>)
 8005e52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e56:	e7e3      	b.n	8005e20 <_printf_i+0x174>
 8005e58:	0659      	lsls	r1, r3, #25
 8005e5a:	bf48      	it	mi
 8005e5c:	b2b6      	uxthmi	r6, r6
 8005e5e:	e7e6      	b.n	8005e2e <_printf_i+0x182>
 8005e60:	4615      	mov	r5, r2
 8005e62:	e7bb      	b.n	8005ddc <_printf_i+0x130>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	6826      	ldr	r6, [r4, #0]
 8005e68:	6961      	ldr	r1, [r4, #20]
 8005e6a:	1d18      	adds	r0, r3, #4
 8005e6c:	6028      	str	r0, [r5, #0]
 8005e6e:	0635      	lsls	r5, r6, #24
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0x1cc>
 8005e74:	6019      	str	r1, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <_printf_i+0x1d2>
 8005e78:	0670      	lsls	r0, r6, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0x1c8>
 8005e7c:	8019      	strh	r1, [r3, #0]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	4615      	mov	r5, r2
 8005e84:	e7ba      	b.n	8005dfc <_printf_i+0x150>
 8005e86:	682b      	ldr	r3, [r5, #0]
 8005e88:	1d1a      	adds	r2, r3, #4
 8005e8a:	602a      	str	r2, [r5, #0]
 8005e8c:	681d      	ldr	r5, [r3, #0]
 8005e8e:	6862      	ldr	r2, [r4, #4]
 8005e90:	2100      	movs	r1, #0
 8005e92:	4628      	mov	r0, r5
 8005e94:	f7fa f9ac 	bl	80001f0 <memchr>
 8005e98:	b108      	cbz	r0, 8005e9e <_printf_i+0x1f2>
 8005e9a:	1b40      	subs	r0, r0, r5
 8005e9c:	6060      	str	r0, [r4, #4]
 8005e9e:	6863      	ldr	r3, [r4, #4]
 8005ea0:	6123      	str	r3, [r4, #16]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea8:	e7a8      	b.n	8005dfc <_printf_i+0x150>
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	462a      	mov	r2, r5
 8005eae:	4649      	mov	r1, r9
 8005eb0:	4640      	mov	r0, r8
 8005eb2:	47d0      	blx	sl
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d0ab      	beq.n	8005e10 <_printf_i+0x164>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	d413      	bmi.n	8005ee6 <_printf_i+0x23a>
 8005ebe:	68e0      	ldr	r0, [r4, #12]
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	4298      	cmp	r0, r3
 8005ec4:	bfb8      	it	lt
 8005ec6:	4618      	movlt	r0, r3
 8005ec8:	e7a4      	b.n	8005e14 <_printf_i+0x168>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	4632      	mov	r2, r6
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	47d0      	blx	sl
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d09b      	beq.n	8005e10 <_printf_i+0x164>
 8005ed8:	3501      	adds	r5, #1
 8005eda:	68e3      	ldr	r3, [r4, #12]
 8005edc:	9903      	ldr	r1, [sp, #12]
 8005ede:	1a5b      	subs	r3, r3, r1
 8005ee0:	42ab      	cmp	r3, r5
 8005ee2:	dcf2      	bgt.n	8005eca <_printf_i+0x21e>
 8005ee4:	e7eb      	b.n	8005ebe <_printf_i+0x212>
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	f104 0619 	add.w	r6, r4, #25
 8005eec:	e7f5      	b.n	8005eda <_printf_i+0x22e>
 8005eee:	bf00      	nop
 8005ef0:	08006e8d 	.word	0x08006e8d
 8005ef4:	08006e9e 	.word	0x08006e9e

08005ef8 <memmove>:
 8005ef8:	4288      	cmp	r0, r1
 8005efa:	b510      	push	{r4, lr}
 8005efc:	eb01 0402 	add.w	r4, r1, r2
 8005f00:	d902      	bls.n	8005f08 <memmove+0x10>
 8005f02:	4284      	cmp	r4, r0
 8005f04:	4623      	mov	r3, r4
 8005f06:	d807      	bhi.n	8005f18 <memmove+0x20>
 8005f08:	1e43      	subs	r3, r0, #1
 8005f0a:	42a1      	cmp	r1, r4
 8005f0c:	d008      	beq.n	8005f20 <memmove+0x28>
 8005f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f16:	e7f8      	b.n	8005f0a <memmove+0x12>
 8005f18:	4402      	add	r2, r0
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	428a      	cmp	r2, r1
 8005f1e:	d100      	bne.n	8005f22 <memmove+0x2a>
 8005f20:	bd10      	pop	{r4, pc}
 8005f22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f2a:	e7f7      	b.n	8005f1c <memmove+0x24>

08005f2c <_realloc_r>:
 8005f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f30:	4680      	mov	r8, r0
 8005f32:	4614      	mov	r4, r2
 8005f34:	460e      	mov	r6, r1
 8005f36:	b921      	cbnz	r1, 8005f42 <_realloc_r+0x16>
 8005f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	f7ff bbef 	b.w	8005720 <_malloc_r>
 8005f42:	b92a      	cbnz	r2, 8005f50 <_realloc_r+0x24>
 8005f44:	f7ff fc9c 	bl	8005880 <_free_r>
 8005f48:	4625      	mov	r5, r4
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f50:	f000 f81b 	bl	8005f8a <_malloc_usable_size_r>
 8005f54:	4284      	cmp	r4, r0
 8005f56:	4607      	mov	r7, r0
 8005f58:	d802      	bhi.n	8005f60 <_realloc_r+0x34>
 8005f5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f5e:	d812      	bhi.n	8005f86 <_realloc_r+0x5a>
 8005f60:	4621      	mov	r1, r4
 8005f62:	4640      	mov	r0, r8
 8005f64:	f7ff fbdc 	bl	8005720 <_malloc_r>
 8005f68:	4605      	mov	r5, r0
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d0ed      	beq.n	8005f4a <_realloc_r+0x1e>
 8005f6e:	42bc      	cmp	r4, r7
 8005f70:	4622      	mov	r2, r4
 8005f72:	4631      	mov	r1, r6
 8005f74:	bf28      	it	cs
 8005f76:	463a      	movcs	r2, r7
 8005f78:	f7ff fb9c 	bl	80056b4 <memcpy>
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7ff fc7e 	bl	8005880 <_free_r>
 8005f84:	e7e1      	b.n	8005f4a <_realloc_r+0x1e>
 8005f86:	4635      	mov	r5, r6
 8005f88:	e7df      	b.n	8005f4a <_realloc_r+0x1e>

08005f8a <_malloc_usable_size_r>:
 8005f8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f8e:	1f18      	subs	r0, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	bfbc      	itt	lt
 8005f94:	580b      	ldrlt	r3, [r1, r0]
 8005f96:	18c0      	addlt	r0, r0, r3
 8005f98:	4770      	bx	lr
	...

08005f9c <pow>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	ed2d 8b02 	vpush	{d8}
 8005fa2:	eeb0 8a40 	vmov.f32	s16, s0
 8005fa6:	eef0 8a60 	vmov.f32	s17, s1
 8005faa:	ec55 4b11 	vmov	r4, r5, d1
 8005fae:	f000 f867 	bl	8006080 <__ieee754_pow>
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	462b      	mov	r3, r5
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	ec57 6b10 	vmov	r6, r7, d0
 8005fbe:	f7fa fdbd 	bl	8000b3c <__aeabi_dcmpun>
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d13b      	bne.n	800603e <pow+0xa2>
 8005fc6:	ec51 0b18 	vmov	r0, r1, d8
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f7fa fd83 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fd2:	b1b8      	cbz	r0, 8006004 <pow+0x68>
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	4620      	mov	r0, r4
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f7fa fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	d146      	bne.n	8006072 <pow+0xd6>
 8005fe4:	ec45 4b10 	vmov	d0, r4, r5
 8005fe8:	f000 fe63 	bl	8006cb2 <finite>
 8005fec:	b338      	cbz	r0, 800603e <pow+0xa2>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	4629      	mov	r1, r5
 8005ff6:	f7fa fd79 	bl	8000aec <__aeabi_dcmplt>
 8005ffa:	b300      	cbz	r0, 800603e <pow+0xa2>
 8005ffc:	f7ff fb2e 	bl	800565c <__errno>
 8006000:	2322      	movs	r3, #34	; 0x22
 8006002:	e01b      	b.n	800603c <pow+0xa0>
 8006004:	ec47 6b10 	vmov	d0, r6, r7
 8006008:	f000 fe53 	bl	8006cb2 <finite>
 800600c:	b9e0      	cbnz	r0, 8006048 <pow+0xac>
 800600e:	eeb0 0a48 	vmov.f32	s0, s16
 8006012:	eef0 0a68 	vmov.f32	s1, s17
 8006016:	f000 fe4c 	bl	8006cb2 <finite>
 800601a:	b1a8      	cbz	r0, 8006048 <pow+0xac>
 800601c:	ec45 4b10 	vmov	d0, r4, r5
 8006020:	f000 fe47 	bl	8006cb2 <finite>
 8006024:	b180      	cbz	r0, 8006048 <pow+0xac>
 8006026:	4632      	mov	r2, r6
 8006028:	463b      	mov	r3, r7
 800602a:	4630      	mov	r0, r6
 800602c:	4639      	mov	r1, r7
 800602e:	f7fa fd85 	bl	8000b3c <__aeabi_dcmpun>
 8006032:	2800      	cmp	r0, #0
 8006034:	d0e2      	beq.n	8005ffc <pow+0x60>
 8006036:	f7ff fb11 	bl	800565c <__errno>
 800603a:	2321      	movs	r3, #33	; 0x21
 800603c:	6003      	str	r3, [r0, #0]
 800603e:	ecbd 8b02 	vpop	{d8}
 8006042:	ec47 6b10 	vmov	d0, r6, r7
 8006046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006048:	2200      	movs	r2, #0
 800604a:	2300      	movs	r3, #0
 800604c:	4630      	mov	r0, r6
 800604e:	4639      	mov	r1, r7
 8006050:	f7fa fd42 	bl	8000ad8 <__aeabi_dcmpeq>
 8006054:	2800      	cmp	r0, #0
 8006056:	d0f2      	beq.n	800603e <pow+0xa2>
 8006058:	eeb0 0a48 	vmov.f32	s0, s16
 800605c:	eef0 0a68 	vmov.f32	s1, s17
 8006060:	f000 fe27 	bl	8006cb2 <finite>
 8006064:	2800      	cmp	r0, #0
 8006066:	d0ea      	beq.n	800603e <pow+0xa2>
 8006068:	ec45 4b10 	vmov	d0, r4, r5
 800606c:	f000 fe21 	bl	8006cb2 <finite>
 8006070:	e7c3      	b.n	8005ffa <pow+0x5e>
 8006072:	4f01      	ldr	r7, [pc, #4]	; (8006078 <pow+0xdc>)
 8006074:	2600      	movs	r6, #0
 8006076:	e7e2      	b.n	800603e <pow+0xa2>
 8006078:	3ff00000 	.word	0x3ff00000
 800607c:	00000000 	.word	0x00000000

08006080 <__ieee754_pow>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	ed2d 8b06 	vpush	{d8-d10}
 8006088:	b089      	sub	sp, #36	; 0x24
 800608a:	ed8d 1b00 	vstr	d1, [sp]
 800608e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006092:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006096:	ea58 0102 	orrs.w	r1, r8, r2
 800609a:	ec57 6b10 	vmov	r6, r7, d0
 800609e:	d115      	bne.n	80060cc <__ieee754_pow+0x4c>
 80060a0:	19b3      	adds	r3, r6, r6
 80060a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80060a6:	4152      	adcs	r2, r2
 80060a8:	4299      	cmp	r1, r3
 80060aa:	4b89      	ldr	r3, [pc, #548]	; (80062d0 <__ieee754_pow+0x250>)
 80060ac:	4193      	sbcs	r3, r2
 80060ae:	f080 84d2 	bcs.w	8006a56 <__ieee754_pow+0x9d6>
 80060b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa f8ef 	bl	800029c <__adddf3>
 80060be:	ec41 0b10 	vmov	d0, r0, r1
 80060c2:	b009      	add	sp, #36	; 0x24
 80060c4:	ecbd 8b06 	vpop	{d8-d10}
 80060c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060cc:	4b81      	ldr	r3, [pc, #516]	; (80062d4 <__ieee754_pow+0x254>)
 80060ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80060d2:	429c      	cmp	r4, r3
 80060d4:	ee10 aa10 	vmov	sl, s0
 80060d8:	463d      	mov	r5, r7
 80060da:	dc06      	bgt.n	80060ea <__ieee754_pow+0x6a>
 80060dc:	d101      	bne.n	80060e2 <__ieee754_pow+0x62>
 80060de:	2e00      	cmp	r6, #0
 80060e0:	d1e7      	bne.n	80060b2 <__ieee754_pow+0x32>
 80060e2:	4598      	cmp	r8, r3
 80060e4:	dc01      	bgt.n	80060ea <__ieee754_pow+0x6a>
 80060e6:	d10f      	bne.n	8006108 <__ieee754_pow+0x88>
 80060e8:	b172      	cbz	r2, 8006108 <__ieee754_pow+0x88>
 80060ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80060ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80060f2:	ea55 050a 	orrs.w	r5, r5, sl
 80060f6:	d1dc      	bne.n	80060b2 <__ieee754_pow+0x32>
 80060f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80060fc:	18db      	adds	r3, r3, r3
 80060fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006102:	4152      	adcs	r2, r2
 8006104:	429d      	cmp	r5, r3
 8006106:	e7d0      	b.n	80060aa <__ieee754_pow+0x2a>
 8006108:	2d00      	cmp	r5, #0
 800610a:	da3b      	bge.n	8006184 <__ieee754_pow+0x104>
 800610c:	4b72      	ldr	r3, [pc, #456]	; (80062d8 <__ieee754_pow+0x258>)
 800610e:	4598      	cmp	r8, r3
 8006110:	dc51      	bgt.n	80061b6 <__ieee754_pow+0x136>
 8006112:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006116:	4598      	cmp	r8, r3
 8006118:	f340 84ac 	ble.w	8006a74 <__ieee754_pow+0x9f4>
 800611c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006124:	2b14      	cmp	r3, #20
 8006126:	dd0f      	ble.n	8006148 <__ieee754_pow+0xc8>
 8006128:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800612c:	fa22 f103 	lsr.w	r1, r2, r3
 8006130:	fa01 f303 	lsl.w	r3, r1, r3
 8006134:	4293      	cmp	r3, r2
 8006136:	f040 849d 	bne.w	8006a74 <__ieee754_pow+0x9f4>
 800613a:	f001 0101 	and.w	r1, r1, #1
 800613e:	f1c1 0302 	rsb	r3, r1, #2
 8006142:	9304      	str	r3, [sp, #16]
 8006144:	b182      	cbz	r2, 8006168 <__ieee754_pow+0xe8>
 8006146:	e05f      	b.n	8006208 <__ieee754_pow+0x188>
 8006148:	2a00      	cmp	r2, #0
 800614a:	d15b      	bne.n	8006204 <__ieee754_pow+0x184>
 800614c:	f1c3 0314 	rsb	r3, r3, #20
 8006150:	fa48 f103 	asr.w	r1, r8, r3
 8006154:	fa01 f303 	lsl.w	r3, r1, r3
 8006158:	4543      	cmp	r3, r8
 800615a:	f040 8488 	bne.w	8006a6e <__ieee754_pow+0x9ee>
 800615e:	f001 0101 	and.w	r1, r1, #1
 8006162:	f1c1 0302 	rsb	r3, r1, #2
 8006166:	9304      	str	r3, [sp, #16]
 8006168:	4b5c      	ldr	r3, [pc, #368]	; (80062dc <__ieee754_pow+0x25c>)
 800616a:	4598      	cmp	r8, r3
 800616c:	d132      	bne.n	80061d4 <__ieee754_pow+0x154>
 800616e:	f1b9 0f00 	cmp.w	r9, #0
 8006172:	f280 8478 	bge.w	8006a66 <__ieee754_pow+0x9e6>
 8006176:	4959      	ldr	r1, [pc, #356]	; (80062dc <__ieee754_pow+0x25c>)
 8006178:	4632      	mov	r2, r6
 800617a:	463b      	mov	r3, r7
 800617c:	2000      	movs	r0, #0
 800617e:	f7fa fb6d 	bl	800085c <__aeabi_ddiv>
 8006182:	e79c      	b.n	80060be <__ieee754_pow+0x3e>
 8006184:	2300      	movs	r3, #0
 8006186:	9304      	str	r3, [sp, #16]
 8006188:	2a00      	cmp	r2, #0
 800618a:	d13d      	bne.n	8006208 <__ieee754_pow+0x188>
 800618c:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <__ieee754_pow+0x254>)
 800618e:	4598      	cmp	r8, r3
 8006190:	d1ea      	bne.n	8006168 <__ieee754_pow+0xe8>
 8006192:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006196:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800619a:	ea53 030a 	orrs.w	r3, r3, sl
 800619e:	f000 845a 	beq.w	8006a56 <__ieee754_pow+0x9d6>
 80061a2:	4b4f      	ldr	r3, [pc, #316]	; (80062e0 <__ieee754_pow+0x260>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	dd08      	ble.n	80061ba <__ieee754_pow+0x13a>
 80061a8:	f1b9 0f00 	cmp.w	r9, #0
 80061ac:	f2c0 8457 	blt.w	8006a5e <__ieee754_pow+0x9de>
 80061b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061b4:	e783      	b.n	80060be <__ieee754_pow+0x3e>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e7e5      	b.n	8006186 <__ieee754_pow+0x106>
 80061ba:	f1b9 0f00 	cmp.w	r9, #0
 80061be:	f04f 0000 	mov.w	r0, #0
 80061c2:	f04f 0100 	mov.w	r1, #0
 80061c6:	f6bf af7a 	bge.w	80060be <__ieee754_pow+0x3e>
 80061ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80061ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80061d2:	e774      	b.n	80060be <__ieee754_pow+0x3e>
 80061d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80061d8:	d106      	bne.n	80061e8 <__ieee754_pow+0x168>
 80061da:	4632      	mov	r2, r6
 80061dc:	463b      	mov	r3, r7
 80061de:	4630      	mov	r0, r6
 80061e0:	4639      	mov	r1, r7
 80061e2:	f7fa fa11 	bl	8000608 <__aeabi_dmul>
 80061e6:	e76a      	b.n	80060be <__ieee754_pow+0x3e>
 80061e8:	4b3e      	ldr	r3, [pc, #248]	; (80062e4 <__ieee754_pow+0x264>)
 80061ea:	4599      	cmp	r9, r3
 80061ec:	d10c      	bne.n	8006208 <__ieee754_pow+0x188>
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	db0a      	blt.n	8006208 <__ieee754_pow+0x188>
 80061f2:	ec47 6b10 	vmov	d0, r6, r7
 80061f6:	b009      	add	sp, #36	; 0x24
 80061f8:	ecbd 8b06 	vpop	{d8-d10}
 80061fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	f000 bc6c 	b.w	8006adc <__ieee754_sqrt>
 8006204:	2300      	movs	r3, #0
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	ec47 6b10 	vmov	d0, r6, r7
 800620c:	f000 fd48 	bl	8006ca0 <fabs>
 8006210:	ec51 0b10 	vmov	r0, r1, d0
 8006214:	f1ba 0f00 	cmp.w	sl, #0
 8006218:	d129      	bne.n	800626e <__ieee754_pow+0x1ee>
 800621a:	b124      	cbz	r4, 8006226 <__ieee754_pow+0x1a6>
 800621c:	4b2f      	ldr	r3, [pc, #188]	; (80062dc <__ieee754_pow+0x25c>)
 800621e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006222:	429a      	cmp	r2, r3
 8006224:	d123      	bne.n	800626e <__ieee754_pow+0x1ee>
 8006226:	f1b9 0f00 	cmp.w	r9, #0
 800622a:	da05      	bge.n	8006238 <__ieee754_pow+0x1b8>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	2000      	movs	r0, #0
 8006232:	492a      	ldr	r1, [pc, #168]	; (80062dc <__ieee754_pow+0x25c>)
 8006234:	f7fa fb12 	bl	800085c <__aeabi_ddiv>
 8006238:	2d00      	cmp	r5, #0
 800623a:	f6bf af40 	bge.w	80060be <__ieee754_pow+0x3e>
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006244:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006248:	4323      	orrs	r3, r4
 800624a:	d108      	bne.n	800625e <__ieee754_pow+0x1de>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	f7fa f820 	bl	8000298 <__aeabi_dsub>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	e78f      	b.n	800617e <__ieee754_pow+0xfe>
 800625e:	9b04      	ldr	r3, [sp, #16]
 8006260:	2b01      	cmp	r3, #1
 8006262:	f47f af2c 	bne.w	80060be <__ieee754_pow+0x3e>
 8006266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800626a:	4619      	mov	r1, r3
 800626c:	e727      	b.n	80060be <__ieee754_pow+0x3e>
 800626e:	0feb      	lsrs	r3, r5, #31
 8006270:	3b01      	subs	r3, #1
 8006272:	9306      	str	r3, [sp, #24]
 8006274:	9a06      	ldr	r2, [sp, #24]
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	d102      	bne.n	8006282 <__ieee754_pow+0x202>
 800627c:	4632      	mov	r2, r6
 800627e:	463b      	mov	r3, r7
 8006280:	e7e6      	b.n	8006250 <__ieee754_pow+0x1d0>
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <__ieee754_pow+0x268>)
 8006284:	4598      	cmp	r8, r3
 8006286:	f340 80fb 	ble.w	8006480 <__ieee754_pow+0x400>
 800628a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800628e:	4598      	cmp	r8, r3
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <__ieee754_pow+0x260>)
 8006292:	dd0c      	ble.n	80062ae <__ieee754_pow+0x22e>
 8006294:	429c      	cmp	r4, r3
 8006296:	dc0f      	bgt.n	80062b8 <__ieee754_pow+0x238>
 8006298:	f1b9 0f00 	cmp.w	r9, #0
 800629c:	da0f      	bge.n	80062be <__ieee754_pow+0x23e>
 800629e:	2000      	movs	r0, #0
 80062a0:	b009      	add	sp, #36	; 0x24
 80062a2:	ecbd 8b06 	vpop	{d8-d10}
 80062a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	f000 bcf0 	b.w	8006c8e <__math_oflow>
 80062ae:	429c      	cmp	r4, r3
 80062b0:	dbf2      	blt.n	8006298 <__ieee754_pow+0x218>
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <__ieee754_pow+0x25c>)
 80062b4:	429c      	cmp	r4, r3
 80062b6:	dd19      	ble.n	80062ec <__ieee754_pow+0x26c>
 80062b8:	f1b9 0f00 	cmp.w	r9, #0
 80062bc:	dcef      	bgt.n	800629e <__ieee754_pow+0x21e>
 80062be:	2000      	movs	r0, #0
 80062c0:	b009      	add	sp, #36	; 0x24
 80062c2:	ecbd 8b06 	vpop	{d8-d10}
 80062c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	f000 bcd7 	b.w	8006c7c <__math_uflow>
 80062ce:	bf00      	nop
 80062d0:	fff00000 	.word	0xfff00000
 80062d4:	7ff00000 	.word	0x7ff00000
 80062d8:	433fffff 	.word	0x433fffff
 80062dc:	3ff00000 	.word	0x3ff00000
 80062e0:	3fefffff 	.word	0x3fefffff
 80062e4:	3fe00000 	.word	0x3fe00000
 80062e8:	41e00000 	.word	0x41e00000
 80062ec:	4b60      	ldr	r3, [pc, #384]	; (8006470 <__ieee754_pow+0x3f0>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	f7f9 ffd2 	bl	8000298 <__aeabi_dsub>
 80062f4:	a354      	add	r3, pc, #336	; (adr r3, 8006448 <__ieee754_pow+0x3c8>)
 80062f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fa:	4604      	mov	r4, r0
 80062fc:	460d      	mov	r5, r1
 80062fe:	f7fa f983 	bl	8000608 <__aeabi_dmul>
 8006302:	a353      	add	r3, pc, #332	; (adr r3, 8006450 <__ieee754_pow+0x3d0>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	4606      	mov	r6, r0
 800630a:	460f      	mov	r7, r1
 800630c:	4620      	mov	r0, r4
 800630e:	4629      	mov	r1, r5
 8006310:	f7fa f97a 	bl	8000608 <__aeabi_dmul>
 8006314:	4b57      	ldr	r3, [pc, #348]	; (8006474 <__ieee754_pow+0x3f4>)
 8006316:	4682      	mov	sl, r0
 8006318:	468b      	mov	fp, r1
 800631a:	2200      	movs	r2, #0
 800631c:	4620      	mov	r0, r4
 800631e:	4629      	mov	r1, r5
 8006320:	f7fa f972 	bl	8000608 <__aeabi_dmul>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	a14b      	add	r1, pc, #300	; (adr r1, 8006458 <__ieee754_pow+0x3d8>)
 800632a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800632e:	f7f9 ffb3 	bl	8000298 <__aeabi_dsub>
 8006332:	4622      	mov	r2, r4
 8006334:	462b      	mov	r3, r5
 8006336:	f7fa f967 	bl	8000608 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	2000      	movs	r0, #0
 8006340:	494d      	ldr	r1, [pc, #308]	; (8006478 <__ieee754_pow+0x3f8>)
 8006342:	f7f9 ffa9 	bl	8000298 <__aeabi_dsub>
 8006346:	4622      	mov	r2, r4
 8006348:	4680      	mov	r8, r0
 800634a:	4689      	mov	r9, r1
 800634c:	462b      	mov	r3, r5
 800634e:	4620      	mov	r0, r4
 8006350:	4629      	mov	r1, r5
 8006352:	f7fa f959 	bl	8000608 <__aeabi_dmul>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7fa f953 	bl	8000608 <__aeabi_dmul>
 8006362:	a33f      	add	r3, pc, #252	; (adr r3, 8006460 <__ieee754_pow+0x3e0>)
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7fa f94e 	bl	8000608 <__aeabi_dmul>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4650      	mov	r0, sl
 8006372:	4659      	mov	r1, fp
 8006374:	f7f9 ff90 	bl	8000298 <__aeabi_dsub>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4680      	mov	r8, r0
 800637e:	4689      	mov	r9, r1
 8006380:	4630      	mov	r0, r6
 8006382:	4639      	mov	r1, r7
 8006384:	f7f9 ff8a 	bl	800029c <__adddf3>
 8006388:	2000      	movs	r0, #0
 800638a:	4632      	mov	r2, r6
 800638c:	463b      	mov	r3, r7
 800638e:	4604      	mov	r4, r0
 8006390:	460d      	mov	r5, r1
 8006392:	f7f9 ff81 	bl	8000298 <__aeabi_dsub>
 8006396:	4602      	mov	r2, r0
 8006398:	460b      	mov	r3, r1
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7f9 ff7b 	bl	8000298 <__aeabi_dsub>
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	9a06      	ldr	r2, [sp, #24]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	4682      	mov	sl, r0
 80063ac:	468b      	mov	fp, r1
 80063ae:	f040 81e7 	bne.w	8006780 <__ieee754_pow+0x700>
 80063b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006468 <__ieee754_pow+0x3e8>
 80063b6:	eeb0 8a47 	vmov.f32	s16, s14
 80063ba:	eef0 8a67 	vmov.f32	s17, s15
 80063be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063c2:	2600      	movs	r6, #0
 80063c4:	4632      	mov	r2, r6
 80063c6:	463b      	mov	r3, r7
 80063c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063cc:	f7f9 ff64 	bl	8000298 <__aeabi_dsub>
 80063d0:	4622      	mov	r2, r4
 80063d2:	462b      	mov	r3, r5
 80063d4:	f7fa f918 	bl	8000608 <__aeabi_dmul>
 80063d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063dc:	4680      	mov	r8, r0
 80063de:	4689      	mov	r9, r1
 80063e0:	4650      	mov	r0, sl
 80063e2:	4659      	mov	r1, fp
 80063e4:	f7fa f910 	bl	8000608 <__aeabi_dmul>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4640      	mov	r0, r8
 80063ee:	4649      	mov	r1, r9
 80063f0:	f7f9 ff54 	bl	800029c <__adddf3>
 80063f4:	4632      	mov	r2, r6
 80063f6:	463b      	mov	r3, r7
 80063f8:	4680      	mov	r8, r0
 80063fa:	4689      	mov	r9, r1
 80063fc:	4620      	mov	r0, r4
 80063fe:	4629      	mov	r1, r5
 8006400:	f7fa f902 	bl	8000608 <__aeabi_dmul>
 8006404:	460b      	mov	r3, r1
 8006406:	4604      	mov	r4, r0
 8006408:	460d      	mov	r5, r1
 800640a:	4602      	mov	r2, r0
 800640c:	4649      	mov	r1, r9
 800640e:	4640      	mov	r0, r8
 8006410:	f7f9 ff44 	bl	800029c <__adddf3>
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <__ieee754_pow+0x3fc>)
 8006416:	4299      	cmp	r1, r3
 8006418:	ec45 4b19 	vmov	d9, r4, r5
 800641c:	4606      	mov	r6, r0
 800641e:	460f      	mov	r7, r1
 8006420:	468b      	mov	fp, r1
 8006422:	f340 82f1 	ble.w	8006a08 <__ieee754_pow+0x988>
 8006426:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800642a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800642e:	4303      	orrs	r3, r0
 8006430:	f000 81e4 	beq.w	80067fc <__ieee754_pow+0x77c>
 8006434:	ec51 0b18 	vmov	r0, r1, d8
 8006438:	2200      	movs	r2, #0
 800643a:	2300      	movs	r3, #0
 800643c:	f7fa fb56 	bl	8000aec <__aeabi_dcmplt>
 8006440:	3800      	subs	r0, #0
 8006442:	bf18      	it	ne
 8006444:	2001      	movne	r0, #1
 8006446:	e72b      	b.n	80062a0 <__ieee754_pow+0x220>
 8006448:	60000000 	.word	0x60000000
 800644c:	3ff71547 	.word	0x3ff71547
 8006450:	f85ddf44 	.word	0xf85ddf44
 8006454:	3e54ae0b 	.word	0x3e54ae0b
 8006458:	55555555 	.word	0x55555555
 800645c:	3fd55555 	.word	0x3fd55555
 8006460:	652b82fe 	.word	0x652b82fe
 8006464:	3ff71547 	.word	0x3ff71547
 8006468:	00000000 	.word	0x00000000
 800646c:	bff00000 	.word	0xbff00000
 8006470:	3ff00000 	.word	0x3ff00000
 8006474:	3fd00000 	.word	0x3fd00000
 8006478:	3fe00000 	.word	0x3fe00000
 800647c:	408fffff 	.word	0x408fffff
 8006480:	4bd5      	ldr	r3, [pc, #852]	; (80067d8 <__ieee754_pow+0x758>)
 8006482:	402b      	ands	r3, r5
 8006484:	2200      	movs	r2, #0
 8006486:	b92b      	cbnz	r3, 8006494 <__ieee754_pow+0x414>
 8006488:	4bd4      	ldr	r3, [pc, #848]	; (80067dc <__ieee754_pow+0x75c>)
 800648a:	f7fa f8bd 	bl	8000608 <__aeabi_dmul>
 800648e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006492:	460c      	mov	r4, r1
 8006494:	1523      	asrs	r3, r4, #20
 8006496:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800649a:	4413      	add	r3, r2
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	4bd0      	ldr	r3, [pc, #832]	; (80067e0 <__ieee754_pow+0x760>)
 80064a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80064a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80064a8:	429c      	cmp	r4, r3
 80064aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80064ae:	dd08      	ble.n	80064c2 <__ieee754_pow+0x442>
 80064b0:	4bcc      	ldr	r3, [pc, #816]	; (80067e4 <__ieee754_pow+0x764>)
 80064b2:	429c      	cmp	r4, r3
 80064b4:	f340 8162 	ble.w	800677c <__ieee754_pow+0x6fc>
 80064b8:	9b05      	ldr	r3, [sp, #20]
 80064ba:	3301      	adds	r3, #1
 80064bc:	9305      	str	r3, [sp, #20]
 80064be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80064c2:	2400      	movs	r4, #0
 80064c4:	00e3      	lsls	r3, r4, #3
 80064c6:	9307      	str	r3, [sp, #28]
 80064c8:	4bc7      	ldr	r3, [pc, #796]	; (80067e8 <__ieee754_pow+0x768>)
 80064ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80064ce:	ed93 7b00 	vldr	d7, [r3]
 80064d2:	4629      	mov	r1, r5
 80064d4:	ec53 2b17 	vmov	r2, r3, d7
 80064d8:	eeb0 9a47 	vmov.f32	s18, s14
 80064dc:	eef0 9a67 	vmov.f32	s19, s15
 80064e0:	4682      	mov	sl, r0
 80064e2:	f7f9 fed9 	bl	8000298 <__aeabi_dsub>
 80064e6:	4652      	mov	r2, sl
 80064e8:	4606      	mov	r6, r0
 80064ea:	460f      	mov	r7, r1
 80064ec:	462b      	mov	r3, r5
 80064ee:	ec51 0b19 	vmov	r0, r1, d9
 80064f2:	f7f9 fed3 	bl	800029c <__adddf3>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	2000      	movs	r0, #0
 80064fc:	49bb      	ldr	r1, [pc, #748]	; (80067ec <__ieee754_pow+0x76c>)
 80064fe:	f7fa f9ad 	bl	800085c <__aeabi_ddiv>
 8006502:	ec41 0b1a 	vmov	d10, r0, r1
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4630      	mov	r0, r6
 800650c:	4639      	mov	r1, r7
 800650e:	f7fa f87b 	bl	8000608 <__aeabi_dmul>
 8006512:	2300      	movs	r3, #0
 8006514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800651e:	46ab      	mov	fp, r5
 8006520:	106d      	asrs	r5, r5, #1
 8006522:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006526:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800652a:	ec41 0b18 	vmov	d8, r0, r1
 800652e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006532:	2200      	movs	r2, #0
 8006534:	4640      	mov	r0, r8
 8006536:	4649      	mov	r1, r9
 8006538:	4614      	mov	r4, r2
 800653a:	461d      	mov	r5, r3
 800653c:	f7fa f864 	bl	8000608 <__aeabi_dmul>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4630      	mov	r0, r6
 8006546:	4639      	mov	r1, r7
 8006548:	f7f9 fea6 	bl	8000298 <__aeabi_dsub>
 800654c:	ec53 2b19 	vmov	r2, r3, d9
 8006550:	4606      	mov	r6, r0
 8006552:	460f      	mov	r7, r1
 8006554:	4620      	mov	r0, r4
 8006556:	4629      	mov	r1, r5
 8006558:	f7f9 fe9e 	bl	8000298 <__aeabi_dsub>
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4650      	mov	r0, sl
 8006562:	4659      	mov	r1, fp
 8006564:	f7f9 fe98 	bl	8000298 <__aeabi_dsub>
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	f7fa f84c 	bl	8000608 <__aeabi_dmul>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4630      	mov	r0, r6
 8006576:	4639      	mov	r1, r7
 8006578:	f7f9 fe8e 	bl	8000298 <__aeabi_dsub>
 800657c:	ec53 2b1a 	vmov	r2, r3, d10
 8006580:	f7fa f842 	bl	8000608 <__aeabi_dmul>
 8006584:	ec53 2b18 	vmov	r2, r3, d8
 8006588:	ec41 0b19 	vmov	d9, r0, r1
 800658c:	ec51 0b18 	vmov	r0, r1, d8
 8006590:	f7fa f83a 	bl	8000608 <__aeabi_dmul>
 8006594:	a37c      	add	r3, pc, #496	; (adr r3, 8006788 <__ieee754_pow+0x708>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	4604      	mov	r4, r0
 800659c:	460d      	mov	r5, r1
 800659e:	f7fa f833 	bl	8000608 <__aeabi_dmul>
 80065a2:	a37b      	add	r3, pc, #492	; (adr r3, 8006790 <__ieee754_pow+0x710>)
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f7f9 fe78 	bl	800029c <__adddf3>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7fa f82a 	bl	8000608 <__aeabi_dmul>
 80065b4:	a378      	add	r3, pc, #480	; (adr r3, 8006798 <__ieee754_pow+0x718>)
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7f9 fe6f 	bl	800029c <__adddf3>
 80065be:	4622      	mov	r2, r4
 80065c0:	462b      	mov	r3, r5
 80065c2:	f7fa f821 	bl	8000608 <__aeabi_dmul>
 80065c6:	a376      	add	r3, pc, #472	; (adr r3, 80067a0 <__ieee754_pow+0x720>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7f9 fe66 	bl	800029c <__adddf3>
 80065d0:	4622      	mov	r2, r4
 80065d2:	462b      	mov	r3, r5
 80065d4:	f7fa f818 	bl	8000608 <__aeabi_dmul>
 80065d8:	a373      	add	r3, pc, #460	; (adr r3, 80067a8 <__ieee754_pow+0x728>)
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f7f9 fe5d 	bl	800029c <__adddf3>
 80065e2:	4622      	mov	r2, r4
 80065e4:	462b      	mov	r3, r5
 80065e6:	f7fa f80f 	bl	8000608 <__aeabi_dmul>
 80065ea:	a371      	add	r3, pc, #452	; (adr r3, 80067b0 <__ieee754_pow+0x730>)
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f7f9 fe54 	bl	800029c <__adddf3>
 80065f4:	4622      	mov	r2, r4
 80065f6:	4606      	mov	r6, r0
 80065f8:	460f      	mov	r7, r1
 80065fa:	462b      	mov	r3, r5
 80065fc:	4620      	mov	r0, r4
 80065fe:	4629      	mov	r1, r5
 8006600:	f7fa f802 	bl	8000608 <__aeabi_dmul>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7f9 fffc 	bl	8000608 <__aeabi_dmul>
 8006610:	4642      	mov	r2, r8
 8006612:	4604      	mov	r4, r0
 8006614:	460d      	mov	r5, r1
 8006616:	464b      	mov	r3, r9
 8006618:	ec51 0b18 	vmov	r0, r1, d8
 800661c:	f7f9 fe3e 	bl	800029c <__adddf3>
 8006620:	ec53 2b19 	vmov	r2, r3, d9
 8006624:	f7f9 fff0 	bl	8000608 <__aeabi_dmul>
 8006628:	4622      	mov	r2, r4
 800662a:	462b      	mov	r3, r5
 800662c:	f7f9 fe36 	bl	800029c <__adddf3>
 8006630:	4642      	mov	r2, r8
 8006632:	4682      	mov	sl, r0
 8006634:	468b      	mov	fp, r1
 8006636:	464b      	mov	r3, r9
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7f9 ffe4 	bl	8000608 <__aeabi_dmul>
 8006640:	4b6b      	ldr	r3, [pc, #428]	; (80067f0 <__ieee754_pow+0x770>)
 8006642:	2200      	movs	r2, #0
 8006644:	4606      	mov	r6, r0
 8006646:	460f      	mov	r7, r1
 8006648:	f7f9 fe28 	bl	800029c <__adddf3>
 800664c:	4652      	mov	r2, sl
 800664e:	465b      	mov	r3, fp
 8006650:	f7f9 fe24 	bl	800029c <__adddf3>
 8006654:	2000      	movs	r0, #0
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4640      	mov	r0, r8
 8006660:	4649      	mov	r1, r9
 8006662:	f7f9 ffd1 	bl	8000608 <__aeabi_dmul>
 8006666:	4b62      	ldr	r3, [pc, #392]	; (80067f0 <__ieee754_pow+0x770>)
 8006668:	4680      	mov	r8, r0
 800666a:	4689      	mov	r9, r1
 800666c:	2200      	movs	r2, #0
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7f9 fe11 	bl	8000298 <__aeabi_dsub>
 8006676:	4632      	mov	r2, r6
 8006678:	463b      	mov	r3, r7
 800667a:	f7f9 fe0d 	bl	8000298 <__aeabi_dsub>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4650      	mov	r0, sl
 8006684:	4659      	mov	r1, fp
 8006686:	f7f9 fe07 	bl	8000298 <__aeabi_dsub>
 800668a:	ec53 2b18 	vmov	r2, r3, d8
 800668e:	f7f9 ffbb 	bl	8000608 <__aeabi_dmul>
 8006692:	4622      	mov	r2, r4
 8006694:	4606      	mov	r6, r0
 8006696:	460f      	mov	r7, r1
 8006698:	462b      	mov	r3, r5
 800669a:	ec51 0b19 	vmov	r0, r1, d9
 800669e:	f7f9 ffb3 	bl	8000608 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4630      	mov	r0, r6
 80066a8:	4639      	mov	r1, r7
 80066aa:	f7f9 fdf7 	bl	800029c <__adddf3>
 80066ae:	4606      	mov	r6, r0
 80066b0:	460f      	mov	r7, r1
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4640      	mov	r0, r8
 80066b8:	4649      	mov	r1, r9
 80066ba:	f7f9 fdef 	bl	800029c <__adddf3>
 80066be:	a33e      	add	r3, pc, #248	; (adr r3, 80067b8 <__ieee754_pow+0x738>)
 80066c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c4:	2000      	movs	r0, #0
 80066c6:	4604      	mov	r4, r0
 80066c8:	460d      	mov	r5, r1
 80066ca:	f7f9 ff9d 	bl	8000608 <__aeabi_dmul>
 80066ce:	4642      	mov	r2, r8
 80066d0:	ec41 0b18 	vmov	d8, r0, r1
 80066d4:	464b      	mov	r3, r9
 80066d6:	4620      	mov	r0, r4
 80066d8:	4629      	mov	r1, r5
 80066da:	f7f9 fddd 	bl	8000298 <__aeabi_dsub>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4630      	mov	r0, r6
 80066e4:	4639      	mov	r1, r7
 80066e6:	f7f9 fdd7 	bl	8000298 <__aeabi_dsub>
 80066ea:	a335      	add	r3, pc, #212	; (adr r3, 80067c0 <__ieee754_pow+0x740>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 ff8a 	bl	8000608 <__aeabi_dmul>
 80066f4:	a334      	add	r3, pc, #208	; (adr r3, 80067c8 <__ieee754_pow+0x748>)
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	4606      	mov	r6, r0
 80066fc:	460f      	mov	r7, r1
 80066fe:	4620      	mov	r0, r4
 8006700:	4629      	mov	r1, r5
 8006702:	f7f9 ff81 	bl	8000608 <__aeabi_dmul>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4630      	mov	r0, r6
 800670c:	4639      	mov	r1, r7
 800670e:	f7f9 fdc5 	bl	800029c <__adddf3>
 8006712:	9a07      	ldr	r2, [sp, #28]
 8006714:	4b37      	ldr	r3, [pc, #220]	; (80067f4 <__ieee754_pow+0x774>)
 8006716:	4413      	add	r3, r2
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 fdbe 	bl	800029c <__adddf3>
 8006720:	4682      	mov	sl, r0
 8006722:	9805      	ldr	r0, [sp, #20]
 8006724:	468b      	mov	fp, r1
 8006726:	f7f9 ff05 	bl	8000534 <__aeabi_i2d>
 800672a:	9a07      	ldr	r2, [sp, #28]
 800672c:	4b32      	ldr	r3, [pc, #200]	; (80067f8 <__ieee754_pow+0x778>)
 800672e:	4413      	add	r3, r2
 8006730:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006734:	4606      	mov	r6, r0
 8006736:	460f      	mov	r7, r1
 8006738:	4652      	mov	r2, sl
 800673a:	465b      	mov	r3, fp
 800673c:	ec51 0b18 	vmov	r0, r1, d8
 8006740:	f7f9 fdac 	bl	800029c <__adddf3>
 8006744:	4642      	mov	r2, r8
 8006746:	464b      	mov	r3, r9
 8006748:	f7f9 fda8 	bl	800029c <__adddf3>
 800674c:	4632      	mov	r2, r6
 800674e:	463b      	mov	r3, r7
 8006750:	f7f9 fda4 	bl	800029c <__adddf3>
 8006754:	2000      	movs	r0, #0
 8006756:	4632      	mov	r2, r6
 8006758:	463b      	mov	r3, r7
 800675a:	4604      	mov	r4, r0
 800675c:	460d      	mov	r5, r1
 800675e:	f7f9 fd9b 	bl	8000298 <__aeabi_dsub>
 8006762:	4642      	mov	r2, r8
 8006764:	464b      	mov	r3, r9
 8006766:	f7f9 fd97 	bl	8000298 <__aeabi_dsub>
 800676a:	ec53 2b18 	vmov	r2, r3, d8
 800676e:	f7f9 fd93 	bl	8000298 <__aeabi_dsub>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4650      	mov	r0, sl
 8006778:	4659      	mov	r1, fp
 800677a:	e610      	b.n	800639e <__ieee754_pow+0x31e>
 800677c:	2401      	movs	r4, #1
 800677e:	e6a1      	b.n	80064c4 <__ieee754_pow+0x444>
 8006780:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80067d0 <__ieee754_pow+0x750>
 8006784:	e617      	b.n	80063b6 <__ieee754_pow+0x336>
 8006786:	bf00      	nop
 8006788:	4a454eef 	.word	0x4a454eef
 800678c:	3fca7e28 	.word	0x3fca7e28
 8006790:	93c9db65 	.word	0x93c9db65
 8006794:	3fcd864a 	.word	0x3fcd864a
 8006798:	a91d4101 	.word	0xa91d4101
 800679c:	3fd17460 	.word	0x3fd17460
 80067a0:	518f264d 	.word	0x518f264d
 80067a4:	3fd55555 	.word	0x3fd55555
 80067a8:	db6fabff 	.word	0xdb6fabff
 80067ac:	3fdb6db6 	.word	0x3fdb6db6
 80067b0:	33333303 	.word	0x33333303
 80067b4:	3fe33333 	.word	0x3fe33333
 80067b8:	e0000000 	.word	0xe0000000
 80067bc:	3feec709 	.word	0x3feec709
 80067c0:	dc3a03fd 	.word	0xdc3a03fd
 80067c4:	3feec709 	.word	0x3feec709
 80067c8:	145b01f5 	.word	0x145b01f5
 80067cc:	be3e2fe0 	.word	0xbe3e2fe0
 80067d0:	00000000 	.word	0x00000000
 80067d4:	3ff00000 	.word	0x3ff00000
 80067d8:	7ff00000 	.word	0x7ff00000
 80067dc:	43400000 	.word	0x43400000
 80067e0:	0003988e 	.word	0x0003988e
 80067e4:	000bb679 	.word	0x000bb679
 80067e8:	08006eb0 	.word	0x08006eb0
 80067ec:	3ff00000 	.word	0x3ff00000
 80067f0:	40080000 	.word	0x40080000
 80067f4:	08006ed0 	.word	0x08006ed0
 80067f8:	08006ec0 	.word	0x08006ec0
 80067fc:	a3b5      	add	r3, pc, #724	; (adr r3, 8006ad4 <__ieee754_pow+0xa54>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	4640      	mov	r0, r8
 8006804:	4649      	mov	r1, r9
 8006806:	f7f9 fd49 	bl	800029c <__adddf3>
 800680a:	4622      	mov	r2, r4
 800680c:	ec41 0b1a 	vmov	d10, r0, r1
 8006810:	462b      	mov	r3, r5
 8006812:	4630      	mov	r0, r6
 8006814:	4639      	mov	r1, r7
 8006816:	f7f9 fd3f 	bl	8000298 <__aeabi_dsub>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	ec51 0b1a 	vmov	r0, r1, d10
 8006822:	f7fa f981 	bl	8000b28 <__aeabi_dcmpgt>
 8006826:	2800      	cmp	r0, #0
 8006828:	f47f ae04 	bne.w	8006434 <__ieee754_pow+0x3b4>
 800682c:	4aa4      	ldr	r2, [pc, #656]	; (8006ac0 <__ieee754_pow+0xa40>)
 800682e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006832:	4293      	cmp	r3, r2
 8006834:	f340 8108 	ble.w	8006a48 <__ieee754_pow+0x9c8>
 8006838:	151b      	asrs	r3, r3, #20
 800683a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800683e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006842:	fa4a f303 	asr.w	r3, sl, r3
 8006846:	445b      	add	r3, fp
 8006848:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800684c:	4e9d      	ldr	r6, [pc, #628]	; (8006ac4 <__ieee754_pow+0xa44>)
 800684e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006852:	4116      	asrs	r6, r2
 8006854:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006858:	2000      	movs	r0, #0
 800685a:	ea23 0106 	bic.w	r1, r3, r6
 800685e:	f1c2 0214 	rsb	r2, r2, #20
 8006862:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006866:	fa4a fa02 	asr.w	sl, sl, r2
 800686a:	f1bb 0f00 	cmp.w	fp, #0
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4620      	mov	r0, r4
 8006874:	4629      	mov	r1, r5
 8006876:	bfb8      	it	lt
 8006878:	f1ca 0a00 	rsblt	sl, sl, #0
 800687c:	f7f9 fd0c 	bl	8000298 <__aeabi_dsub>
 8006880:	ec41 0b19 	vmov	d9, r0, r1
 8006884:	4642      	mov	r2, r8
 8006886:	464b      	mov	r3, r9
 8006888:	ec51 0b19 	vmov	r0, r1, d9
 800688c:	f7f9 fd06 	bl	800029c <__adddf3>
 8006890:	a37b      	add	r3, pc, #492	; (adr r3, 8006a80 <__ieee754_pow+0xa00>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	2000      	movs	r0, #0
 8006898:	4604      	mov	r4, r0
 800689a:	460d      	mov	r5, r1
 800689c:	f7f9 feb4 	bl	8000608 <__aeabi_dmul>
 80068a0:	ec53 2b19 	vmov	r2, r3, d9
 80068a4:	4606      	mov	r6, r0
 80068a6:	460f      	mov	r7, r1
 80068a8:	4620      	mov	r0, r4
 80068aa:	4629      	mov	r1, r5
 80068ac:	f7f9 fcf4 	bl	8000298 <__aeabi_dsub>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4640      	mov	r0, r8
 80068b6:	4649      	mov	r1, r9
 80068b8:	f7f9 fcee 	bl	8000298 <__aeabi_dsub>
 80068bc:	a372      	add	r3, pc, #456	; (adr r3, 8006a88 <__ieee754_pow+0xa08>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fea1 	bl	8000608 <__aeabi_dmul>
 80068c6:	a372      	add	r3, pc, #456	; (adr r3, 8006a90 <__ieee754_pow+0xa10>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	4680      	mov	r8, r0
 80068ce:	4689      	mov	r9, r1
 80068d0:	4620      	mov	r0, r4
 80068d2:	4629      	mov	r1, r5
 80068d4:	f7f9 fe98 	bl	8000608 <__aeabi_dmul>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4640      	mov	r0, r8
 80068de:	4649      	mov	r1, r9
 80068e0:	f7f9 fcdc 	bl	800029c <__adddf3>
 80068e4:	4604      	mov	r4, r0
 80068e6:	460d      	mov	r5, r1
 80068e8:	4602      	mov	r2, r0
 80068ea:	460b      	mov	r3, r1
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7f9 fcd4 	bl	800029c <__adddf3>
 80068f4:	4632      	mov	r2, r6
 80068f6:	463b      	mov	r3, r7
 80068f8:	4680      	mov	r8, r0
 80068fa:	4689      	mov	r9, r1
 80068fc:	f7f9 fccc 	bl	8000298 <__aeabi_dsub>
 8006900:	4602      	mov	r2, r0
 8006902:	460b      	mov	r3, r1
 8006904:	4620      	mov	r0, r4
 8006906:	4629      	mov	r1, r5
 8006908:	f7f9 fcc6 	bl	8000298 <__aeabi_dsub>
 800690c:	4642      	mov	r2, r8
 800690e:	4606      	mov	r6, r0
 8006910:	460f      	mov	r7, r1
 8006912:	464b      	mov	r3, r9
 8006914:	4640      	mov	r0, r8
 8006916:	4649      	mov	r1, r9
 8006918:	f7f9 fe76 	bl	8000608 <__aeabi_dmul>
 800691c:	a35e      	add	r3, pc, #376	; (adr r3, 8006a98 <__ieee754_pow+0xa18>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	4604      	mov	r4, r0
 8006924:	460d      	mov	r5, r1
 8006926:	f7f9 fe6f 	bl	8000608 <__aeabi_dmul>
 800692a:	a35d      	add	r3, pc, #372	; (adr r3, 8006aa0 <__ieee754_pow+0xa20>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fcb2 	bl	8000298 <__aeabi_dsub>
 8006934:	4622      	mov	r2, r4
 8006936:	462b      	mov	r3, r5
 8006938:	f7f9 fe66 	bl	8000608 <__aeabi_dmul>
 800693c:	a35a      	add	r3, pc, #360	; (adr r3, 8006aa8 <__ieee754_pow+0xa28>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f7f9 fcab 	bl	800029c <__adddf3>
 8006946:	4622      	mov	r2, r4
 8006948:	462b      	mov	r3, r5
 800694a:	f7f9 fe5d 	bl	8000608 <__aeabi_dmul>
 800694e:	a358      	add	r3, pc, #352	; (adr r3, 8006ab0 <__ieee754_pow+0xa30>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7f9 fca0 	bl	8000298 <__aeabi_dsub>
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	f7f9 fe54 	bl	8000608 <__aeabi_dmul>
 8006960:	a355      	add	r3, pc, #340	; (adr r3, 8006ab8 <__ieee754_pow+0xa38>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f7f9 fc99 	bl	800029c <__adddf3>
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	f7f9 fe4b 	bl	8000608 <__aeabi_dmul>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4640      	mov	r0, r8
 8006978:	4649      	mov	r1, r9
 800697a:	f7f9 fc8d 	bl	8000298 <__aeabi_dsub>
 800697e:	4604      	mov	r4, r0
 8006980:	460d      	mov	r5, r1
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4640      	mov	r0, r8
 8006988:	4649      	mov	r1, r9
 800698a:	f7f9 fe3d 	bl	8000608 <__aeabi_dmul>
 800698e:	2200      	movs	r2, #0
 8006990:	ec41 0b19 	vmov	d9, r0, r1
 8006994:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006998:	4620      	mov	r0, r4
 800699a:	4629      	mov	r1, r5
 800699c:	f7f9 fc7c 	bl	8000298 <__aeabi_dsub>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	ec51 0b19 	vmov	r0, r1, d9
 80069a8:	f7f9 ff58 	bl	800085c <__aeabi_ddiv>
 80069ac:	4632      	mov	r2, r6
 80069ae:	4604      	mov	r4, r0
 80069b0:	460d      	mov	r5, r1
 80069b2:	463b      	mov	r3, r7
 80069b4:	4640      	mov	r0, r8
 80069b6:	4649      	mov	r1, r9
 80069b8:	f7f9 fe26 	bl	8000608 <__aeabi_dmul>
 80069bc:	4632      	mov	r2, r6
 80069be:	463b      	mov	r3, r7
 80069c0:	f7f9 fc6c 	bl	800029c <__adddf3>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4620      	mov	r0, r4
 80069ca:	4629      	mov	r1, r5
 80069cc:	f7f9 fc64 	bl	8000298 <__aeabi_dsub>
 80069d0:	4642      	mov	r2, r8
 80069d2:	464b      	mov	r3, r9
 80069d4:	f7f9 fc60 	bl	8000298 <__aeabi_dsub>
 80069d8:	460b      	mov	r3, r1
 80069da:	4602      	mov	r2, r0
 80069dc:	493a      	ldr	r1, [pc, #232]	; (8006ac8 <__ieee754_pow+0xa48>)
 80069de:	2000      	movs	r0, #0
 80069e0:	f7f9 fc5a 	bl	8000298 <__aeabi_dsub>
 80069e4:	ec41 0b10 	vmov	d0, r0, r1
 80069e8:	ee10 3a90 	vmov	r3, s1
 80069ec:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80069f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f4:	da2b      	bge.n	8006a4e <__ieee754_pow+0x9ce>
 80069f6:	4650      	mov	r0, sl
 80069f8:	f000 f966 	bl	8006cc8 <scalbn>
 80069fc:	ec51 0b10 	vmov	r0, r1, d0
 8006a00:	ec53 2b18 	vmov	r2, r3, d8
 8006a04:	f7ff bbed 	b.w	80061e2 <__ieee754_pow+0x162>
 8006a08:	4b30      	ldr	r3, [pc, #192]	; (8006acc <__ieee754_pow+0xa4c>)
 8006a0a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a0e:	429e      	cmp	r6, r3
 8006a10:	f77f af0c 	ble.w	800682c <__ieee754_pow+0x7ac>
 8006a14:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <__ieee754_pow+0xa50>)
 8006a16:	440b      	add	r3, r1
 8006a18:	4303      	orrs	r3, r0
 8006a1a:	d009      	beq.n	8006a30 <__ieee754_pow+0x9b0>
 8006a1c:	ec51 0b18 	vmov	r0, r1, d8
 8006a20:	2200      	movs	r2, #0
 8006a22:	2300      	movs	r3, #0
 8006a24:	f7fa f862 	bl	8000aec <__aeabi_dcmplt>
 8006a28:	3800      	subs	r0, #0
 8006a2a:	bf18      	it	ne
 8006a2c:	2001      	movne	r0, #1
 8006a2e:	e447      	b.n	80062c0 <__ieee754_pow+0x240>
 8006a30:	4622      	mov	r2, r4
 8006a32:	462b      	mov	r3, r5
 8006a34:	f7f9 fc30 	bl	8000298 <__aeabi_dsub>
 8006a38:	4642      	mov	r2, r8
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	f7fa f86a 	bl	8000b14 <__aeabi_dcmpge>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f43f aef3 	beq.w	800682c <__ieee754_pow+0x7ac>
 8006a46:	e7e9      	b.n	8006a1c <__ieee754_pow+0x99c>
 8006a48:	f04f 0a00 	mov.w	sl, #0
 8006a4c:	e71a      	b.n	8006884 <__ieee754_pow+0x804>
 8006a4e:	ec51 0b10 	vmov	r0, r1, d0
 8006a52:	4619      	mov	r1, r3
 8006a54:	e7d4      	b.n	8006a00 <__ieee754_pow+0x980>
 8006a56:	491c      	ldr	r1, [pc, #112]	; (8006ac8 <__ieee754_pow+0xa48>)
 8006a58:	2000      	movs	r0, #0
 8006a5a:	f7ff bb30 	b.w	80060be <__ieee754_pow+0x3e>
 8006a5e:	2000      	movs	r0, #0
 8006a60:	2100      	movs	r1, #0
 8006a62:	f7ff bb2c 	b.w	80060be <__ieee754_pow+0x3e>
 8006a66:	4630      	mov	r0, r6
 8006a68:	4639      	mov	r1, r7
 8006a6a:	f7ff bb28 	b.w	80060be <__ieee754_pow+0x3e>
 8006a6e:	9204      	str	r2, [sp, #16]
 8006a70:	f7ff bb7a 	b.w	8006168 <__ieee754_pow+0xe8>
 8006a74:	2300      	movs	r3, #0
 8006a76:	f7ff bb64 	b.w	8006142 <__ieee754_pow+0xc2>
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w
 8006a80:	00000000 	.word	0x00000000
 8006a84:	3fe62e43 	.word	0x3fe62e43
 8006a88:	fefa39ef 	.word	0xfefa39ef
 8006a8c:	3fe62e42 	.word	0x3fe62e42
 8006a90:	0ca86c39 	.word	0x0ca86c39
 8006a94:	be205c61 	.word	0xbe205c61
 8006a98:	72bea4d0 	.word	0x72bea4d0
 8006a9c:	3e663769 	.word	0x3e663769
 8006aa0:	c5d26bf1 	.word	0xc5d26bf1
 8006aa4:	3ebbbd41 	.word	0x3ebbbd41
 8006aa8:	af25de2c 	.word	0xaf25de2c
 8006aac:	3f11566a 	.word	0x3f11566a
 8006ab0:	16bebd93 	.word	0x16bebd93
 8006ab4:	3f66c16c 	.word	0x3f66c16c
 8006ab8:	5555553e 	.word	0x5555553e
 8006abc:	3fc55555 	.word	0x3fc55555
 8006ac0:	3fe00000 	.word	0x3fe00000
 8006ac4:	000fffff 	.word	0x000fffff
 8006ac8:	3ff00000 	.word	0x3ff00000
 8006acc:	4090cbff 	.word	0x4090cbff
 8006ad0:	3f6f3400 	.word	0x3f6f3400
 8006ad4:	652b82fe 	.word	0x652b82fe
 8006ad8:	3c971547 	.word	0x3c971547

08006adc <__ieee754_sqrt>:
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	ec55 4b10 	vmov	r4, r5, d0
 8006ae4:	4e55      	ldr	r6, [pc, #340]	; (8006c3c <__ieee754_sqrt+0x160>)
 8006ae6:	43ae      	bics	r6, r5
 8006ae8:	ee10 0a10 	vmov	r0, s0
 8006aec:	ee10 3a10 	vmov	r3, s0
 8006af0:	462a      	mov	r2, r5
 8006af2:	4629      	mov	r1, r5
 8006af4:	d110      	bne.n	8006b18 <__ieee754_sqrt+0x3c>
 8006af6:	ee10 2a10 	vmov	r2, s0
 8006afa:	462b      	mov	r3, r5
 8006afc:	f7f9 fd84 	bl	8000608 <__aeabi_dmul>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4620      	mov	r0, r4
 8006b06:	4629      	mov	r1, r5
 8006b08:	f7f9 fbc8 	bl	800029c <__adddf3>
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	460d      	mov	r5, r1
 8006b10:	ec45 4b10 	vmov	d0, r4, r5
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	dc10      	bgt.n	8006b3e <__ieee754_sqrt+0x62>
 8006b1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b20:	4330      	orrs	r0, r6
 8006b22:	d0f5      	beq.n	8006b10 <__ieee754_sqrt+0x34>
 8006b24:	b15d      	cbz	r5, 8006b3e <__ieee754_sqrt+0x62>
 8006b26:	ee10 2a10 	vmov	r2, s0
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	ee10 0a10 	vmov	r0, s0
 8006b30:	f7f9 fbb2 	bl	8000298 <__aeabi_dsub>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	f7f9 fe90 	bl	800085c <__aeabi_ddiv>
 8006b3c:	e7e6      	b.n	8006b0c <__ieee754_sqrt+0x30>
 8006b3e:	1512      	asrs	r2, r2, #20
 8006b40:	d074      	beq.n	8006c2c <__ieee754_sqrt+0x150>
 8006b42:	07d4      	lsls	r4, r2, #31
 8006b44:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006b48:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006b50:	bf5e      	ittt	pl
 8006b52:	0fda      	lsrpl	r2, r3, #31
 8006b54:	005b      	lslpl	r3, r3, #1
 8006b56:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006b5a:	2400      	movs	r4, #0
 8006b5c:	0fda      	lsrs	r2, r3, #31
 8006b5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006b62:	107f      	asrs	r7, r7, #1
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	2516      	movs	r5, #22
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b6e:	1886      	adds	r6, r0, r2
 8006b70:	428e      	cmp	r6, r1
 8006b72:	bfde      	ittt	le
 8006b74:	1b89      	suble	r1, r1, r6
 8006b76:	18b0      	addle	r0, r6, r2
 8006b78:	18a4      	addle	r4, r4, r2
 8006b7a:	0049      	lsls	r1, r1, #1
 8006b7c:	3d01      	subs	r5, #1
 8006b7e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006b82:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006b86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006b8a:	d1f0      	bne.n	8006b6e <__ieee754_sqrt+0x92>
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	f04f 0e20 	mov.w	lr, #32
 8006b92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006b96:	4281      	cmp	r1, r0
 8006b98:	eb06 0c05 	add.w	ip, r6, r5
 8006b9c:	dc02      	bgt.n	8006ba4 <__ieee754_sqrt+0xc8>
 8006b9e:	d113      	bne.n	8006bc8 <__ieee754_sqrt+0xec>
 8006ba0:	459c      	cmp	ip, r3
 8006ba2:	d811      	bhi.n	8006bc8 <__ieee754_sqrt+0xec>
 8006ba4:	f1bc 0f00 	cmp.w	ip, #0
 8006ba8:	eb0c 0506 	add.w	r5, ip, r6
 8006bac:	da43      	bge.n	8006c36 <__ieee754_sqrt+0x15a>
 8006bae:	2d00      	cmp	r5, #0
 8006bb0:	db41      	blt.n	8006c36 <__ieee754_sqrt+0x15a>
 8006bb2:	f100 0801 	add.w	r8, r0, #1
 8006bb6:	1a09      	subs	r1, r1, r0
 8006bb8:	459c      	cmp	ip, r3
 8006bba:	bf88      	it	hi
 8006bbc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006bc0:	eba3 030c 	sub.w	r3, r3, ip
 8006bc4:	4432      	add	r2, r6
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006bcc:	f1be 0e01 	subs.w	lr, lr, #1
 8006bd0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006bd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006bdc:	d1db      	bne.n	8006b96 <__ieee754_sqrt+0xba>
 8006bde:	430b      	orrs	r3, r1
 8006be0:	d006      	beq.n	8006bf0 <__ieee754_sqrt+0x114>
 8006be2:	1c50      	adds	r0, r2, #1
 8006be4:	bf13      	iteet	ne
 8006be6:	3201      	addne	r2, #1
 8006be8:	3401      	addeq	r4, #1
 8006bea:	4672      	moveq	r2, lr
 8006bec:	f022 0201 	bicne.w	r2, r2, #1
 8006bf0:	1063      	asrs	r3, r4, #1
 8006bf2:	0852      	lsrs	r2, r2, #1
 8006bf4:	07e1      	lsls	r1, r4, #31
 8006bf6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006bfa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006bfe:	bf48      	it	mi
 8006c00:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006c04:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006c08:	4614      	mov	r4, r2
 8006c0a:	e781      	b.n	8006b10 <__ieee754_sqrt+0x34>
 8006c0c:	0ad9      	lsrs	r1, r3, #11
 8006c0e:	3815      	subs	r0, #21
 8006c10:	055b      	lsls	r3, r3, #21
 8006c12:	2900      	cmp	r1, #0
 8006c14:	d0fa      	beq.n	8006c0c <__ieee754_sqrt+0x130>
 8006c16:	02cd      	lsls	r5, r1, #11
 8006c18:	d50a      	bpl.n	8006c30 <__ieee754_sqrt+0x154>
 8006c1a:	f1c2 0420 	rsb	r4, r2, #32
 8006c1e:	fa23 f404 	lsr.w	r4, r3, r4
 8006c22:	1e55      	subs	r5, r2, #1
 8006c24:	4093      	lsls	r3, r2
 8006c26:	4321      	orrs	r1, r4
 8006c28:	1b42      	subs	r2, r0, r5
 8006c2a:	e78a      	b.n	8006b42 <__ieee754_sqrt+0x66>
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	e7f0      	b.n	8006c12 <__ieee754_sqrt+0x136>
 8006c30:	0049      	lsls	r1, r1, #1
 8006c32:	3201      	adds	r2, #1
 8006c34:	e7ef      	b.n	8006c16 <__ieee754_sqrt+0x13a>
 8006c36:	4680      	mov	r8, r0
 8006c38:	e7bd      	b.n	8006bb6 <__ieee754_sqrt+0xda>
 8006c3a:	bf00      	nop
 8006c3c:	7ff00000 	.word	0x7ff00000

08006c40 <with_errno>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	4604      	mov	r4, r0
 8006c44:	460d      	mov	r5, r1
 8006c46:	4616      	mov	r6, r2
 8006c48:	f7fe fd08 	bl	800565c <__errno>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	6006      	str	r6, [r0, #0]
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd70      	pop	{r4, r5, r6, pc}

08006c54 <xflow>:
 8006c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c56:	4614      	mov	r4, r2
 8006c58:	461d      	mov	r5, r3
 8006c5a:	b108      	cbz	r0, 8006c60 <xflow+0xc>
 8006c5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006c60:	e9cd 2300 	strd	r2, r3, [sp]
 8006c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c68:	4620      	mov	r0, r4
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	f7f9 fccc 	bl	8000608 <__aeabi_dmul>
 8006c70:	2222      	movs	r2, #34	; 0x22
 8006c72:	b003      	add	sp, #12
 8006c74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c78:	f7ff bfe2 	b.w	8006c40 <with_errno>

08006c7c <__math_uflow>:
 8006c7c:	b508      	push	{r3, lr}
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c84:	f7ff ffe6 	bl	8006c54 <xflow>
 8006c88:	ec41 0b10 	vmov	d0, r0, r1
 8006c8c:	bd08      	pop	{r3, pc}

08006c8e <__math_oflow>:
 8006c8e:	b508      	push	{r3, lr}
 8006c90:	2200      	movs	r2, #0
 8006c92:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006c96:	f7ff ffdd 	bl	8006c54 <xflow>
 8006c9a:	ec41 0b10 	vmov	d0, r0, r1
 8006c9e:	bd08      	pop	{r3, pc}

08006ca0 <fabs>:
 8006ca0:	ec51 0b10 	vmov	r0, r1, d0
 8006ca4:	ee10 2a10 	vmov	r2, s0
 8006ca8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cac:	ec43 2b10 	vmov	d0, r2, r3
 8006cb0:	4770      	bx	lr

08006cb2 <finite>:
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	ed8d 0b00 	vstr	d0, [sp]
 8006cb8:	9801      	ldr	r0, [sp, #4]
 8006cba:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006cbe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006cc2:	0fc0      	lsrs	r0, r0, #31
 8006cc4:	b002      	add	sp, #8
 8006cc6:	4770      	bx	lr

08006cc8 <scalbn>:
 8006cc8:	b570      	push	{r4, r5, r6, lr}
 8006cca:	ec55 4b10 	vmov	r4, r5, d0
 8006cce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	b99a      	cbnz	r2, 8006d00 <scalbn+0x38>
 8006cd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006cdc:	4323      	orrs	r3, r4
 8006cde:	d036      	beq.n	8006d4e <scalbn+0x86>
 8006ce0:	4b39      	ldr	r3, [pc, #228]	; (8006dc8 <scalbn+0x100>)
 8006ce2:	4629      	mov	r1, r5
 8006ce4:	ee10 0a10 	vmov	r0, s0
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f7f9 fc8d 	bl	8000608 <__aeabi_dmul>
 8006cee:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <scalbn+0x104>)
 8006cf0:	429e      	cmp	r6, r3
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	da10      	bge.n	8006d1a <scalbn+0x52>
 8006cf8:	a32b      	add	r3, pc, #172	; (adr r3, 8006da8 <scalbn+0xe0>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	e03a      	b.n	8006d76 <scalbn+0xae>
 8006d00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006d04:	428a      	cmp	r2, r1
 8006d06:	d10c      	bne.n	8006d22 <scalbn+0x5a>
 8006d08:	ee10 2a10 	vmov	r2, s0
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fac4 	bl	800029c <__adddf3>
 8006d14:	4604      	mov	r4, r0
 8006d16:	460d      	mov	r5, r1
 8006d18:	e019      	b.n	8006d4e <scalbn+0x86>
 8006d1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006d1e:	460b      	mov	r3, r1
 8006d20:	3a36      	subs	r2, #54	; 0x36
 8006d22:	4432      	add	r2, r6
 8006d24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006d28:	428a      	cmp	r2, r1
 8006d2a:	dd08      	ble.n	8006d3e <scalbn+0x76>
 8006d2c:	2d00      	cmp	r5, #0
 8006d2e:	a120      	add	r1, pc, #128	; (adr r1, 8006db0 <scalbn+0xe8>)
 8006d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d34:	da1c      	bge.n	8006d70 <scalbn+0xa8>
 8006d36:	a120      	add	r1, pc, #128	; (adr r1, 8006db8 <scalbn+0xf0>)
 8006d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d3c:	e018      	b.n	8006d70 <scalbn+0xa8>
 8006d3e:	2a00      	cmp	r2, #0
 8006d40:	dd08      	ble.n	8006d54 <scalbn+0x8c>
 8006d42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006d4e:	ec45 4b10 	vmov	d0, r4, r5
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006d58:	da19      	bge.n	8006d8e <scalbn+0xc6>
 8006d5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006d5e:	429e      	cmp	r6, r3
 8006d60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006d64:	dd0a      	ble.n	8006d7c <scalbn+0xb4>
 8006d66:	a112      	add	r1, pc, #72	; (adr r1, 8006db0 <scalbn+0xe8>)
 8006d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e2      	bne.n	8006d36 <scalbn+0x6e>
 8006d70:	a30f      	add	r3, pc, #60	; (adr r3, 8006db0 <scalbn+0xe8>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 fc47 	bl	8000608 <__aeabi_dmul>
 8006d7a:	e7cb      	b.n	8006d14 <scalbn+0x4c>
 8006d7c:	a10a      	add	r1, pc, #40	; (adr r1, 8006da8 <scalbn+0xe0>)
 8006d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0b8      	beq.n	8006cf8 <scalbn+0x30>
 8006d86:	a10e      	add	r1, pc, #56	; (adr r1, 8006dc0 <scalbn+0xf8>)
 8006d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d8c:	e7b4      	b.n	8006cf8 <scalbn+0x30>
 8006d8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006d92:	3236      	adds	r2, #54	; 0x36
 8006d94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006d98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <scalbn+0x108>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	e7e8      	b.n	8006d76 <scalbn+0xae>
 8006da4:	f3af 8000 	nop.w
 8006da8:	c2f8f359 	.word	0xc2f8f359
 8006dac:	01a56e1f 	.word	0x01a56e1f
 8006db0:	8800759c 	.word	0x8800759c
 8006db4:	7e37e43c 	.word	0x7e37e43c
 8006db8:	8800759c 	.word	0x8800759c
 8006dbc:	fe37e43c 	.word	0xfe37e43c
 8006dc0:	c2f8f359 	.word	0xc2f8f359
 8006dc4:	81a56e1f 	.word	0x81a56e1f
 8006dc8:	43500000 	.word	0x43500000
 8006dcc:	ffff3cb0 	.word	0xffff3cb0
 8006dd0:	3c900000 	.word	0x3c900000

08006dd4 <_init>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr

08006de0 <_fini>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr
